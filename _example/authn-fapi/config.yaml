apiVersion: core/v1
kind: Entrypoint
spec:
  runners:
    - apiVersion: core/v1
      kind: HTTPServer
      namespace: sampleNamespace
      name: EchoServer

---
apiVersion: app/v1
kind: EchoHandler
metadata:
  name: default
  namespace: sampleNamespace
spec: {}
---
apiVersion: core/v1
kind: HTTPServer
metadata:
  name: EchoServer
  namespace: sampleNamespace
spec:
  addr: ":8080"
  virtualHosts:
    - hosts: []
      middleware:
        - apiVersion: app/v1
          kind: SessionMiddleware
          namespace: sampleNamespace
          name: default
        - apiVersion: app/v1
          kind: AuthenticationMiddleware
          namespace: sampleNamespace
          name: default
      handlers:
        - handler:
            apiVersion: app/v1
            kind: EchoHandler
            namespace: sampleNamespace
            name: default

---
apiVersion: core/v1
kind: ErrorHandler
metadata:
  name: default
  namespace: sampleNamespace
spec:

---
apiVersion: app/v1
kind: SessionMiddleware
metadata:
  name: default
  namespace: sampleNamespace
spec:
  errorHandler:
    apiVersion: core/v1
    kind: ErrorHandler
    name: default
    namespace: sampleNamespace
  # storage:
  #   apiVersion: app/v1
  #   kind: RedisClient
  #   name: default
  #   namespace: sampleNamespace
  secureEncoder:
    enableCompression: false
    disableHMAC: true
    disableEncryption: true

---
apiVersion: app/v1
kind: RedisClient
metadata:
  name: default
  namespace: sampleNamespace
spec:
  expiration: 0

---
apiVersion: app/v1
kind: AuthenticationMiddleware
metadata:
  name: default
  namespace: sampleNamespace
spec:
  handlers:
    - apiVersion: app/v1
      kind: OAuthAuthenticationHandler
      namespace: sampleNamespace
      name: default

---
apiVersion: app/v1
kind: OAuthAuthenticationHandler
metadata:
  name: default
  namespace: sampleNamespace
spec:
  contexts:
    - provider:
        issuer: ""
        # baseURL: "http://localhost:18080"
        baseURL: "https://localhost:18443" # Use when using mTLS.
        endpoints:
          discovery: "/realms/aileron/.well-known/openid-configuration"
        roundTripper: # Use when using mTLS.
          apiVersion: core/v1
          kind: HTTPClient
          namespace: sampleNamespace
          name: discoveryClient
      client:
        id: "myclient"
        secret: "FyjP4qhscDkiiAOGgBp1taQErfROEhqe"
        audience: "myclient"
        scopes:
          - openid
          - address
          - phone
        # jwtHandler:
        #   privateKeys:
        #     - algorithm: HS256 # clientAuthMethod: Specify when JWT
        #       keyType: COMMON
        #       keyString: "RnlqUDRxaHNjRGtpaUFPR2dCcDF0YVFFcmZST0VocWU="
        # - keyID: "xFzm4BYgi-A0uzO9PpjgXmSS9HrsLZPhc0IrH8hedX4" # clientAuthMethod: specify when PRIVATE_KEY_JWT (set appropriate kid)
        #   algorithm: RS256
        #   keyType: PRIVATE
        #   keyFilePath: "./_example/authn-fapi/keys/client/client.key"
      tokenRedeemer:
        # clientAuthMethod: BasicAuth
        # clientAuthMethod: JWT
        # clientAuthMethod: PRIVATE_KEY_JWT
        clientAuthMethod: SelfSignedTLSClientAuth # Use SELF_SIGNED_TLS_CLIENT_AUTH client authentication.
        roundTripper:
          apiVersion: core/v1
          kind: HTTPClient
          namespace: sampleNamespace
          name: tokenRedeemerClient
      jwtHandler:
        publicKeys:
          - keyID: "LO9dmmUtUOiV1P7OkzYW-CDbTJV94nADvDFhojxvSqk" # @keycloak [Realm settings > Keys > RS256 > kid]
            algorithm: RS256
            keyType: PUBLIC
            keyFilePath: "./_example/authn-fapi/keys/server/public.key" # @keycloak [Realm settings > Keys > RS256] and download public key
  # authorizationCodeHandler:
  #   disableState: false
  #   disableNonce: false
  #   disablePKCE: false
  #   redirectPath: "/auth/success"
  #   loginPath: "/auth/login"
  #   callbackURL: "http://localhost:8080/auth/callback"
  #   redirectToLogin: false
  #   unauthorizeAny: false
  #   restoreRequest: false
  #   urlParams:
  #     - "max_age=120"
  #     - "login_hint=user001"
    # requestObject:
    #   requestURI: "http://localhost:8080/auth/request-uri"
    #   jwtHandler:
    #     privateKeys:
    #       - keyID: "xFzm4BYgi-A0uzO9PpjgXmSS9HrsLZPhc0IrH8hedX4"
    #         algorithm: RS256
    #         keyType: PRIVATE
    #         keyFilePath: "./_example/authn-fapi/keys/client/private.key"
    #   exp: 300
    #   disableCache: true
    # jarm:
    #   jwtHandler:
    #     publicKeys:
    #       - keyID: "LO9dmmUtUOiV1P7OkzYW-CDbTJV94nADvDFhojxvSqk" # @keycloak [Realm settings > Keys > RS256 > kid]
    #         algorithm: RS256
    #         keyType: PUBLIC
    #         keyFilePath: "./_example/authn-fapi/keys/server/public.key" # @keycloak [Realm settings > Keys > RS256 ] and  download public key.
  ropcHandler:
    redeemTokenPath: "/redeem"
    usernameKey: "username"
    passwordKey: "password"

---
# clientAuthMethod: Specify when SELF_SIGNED_TLS_CLIENT_AUTH
apiVersion: core/v1
kind: HTTPClient
metadata:
  namespace: sampleNamespace
  name: tokenRedeemerClient
spec:
  HTTPTransportConfig:
    tlsConfig:
      certKeyPairs:
        - certFile: "/home/takeda/projects/oss/aileron-gateway/aileron-dev/_example/authn-fapi/keys/mtls/client.crt"
          keyFile: "/home/takeda/projects/oss/aileron-gateway/aileron-dev/_example/authn-fapi/keys/mtls/client.key"
      rootCAs:
        - "/home/takeda/projects/oss/aileron-gateway/aileron-dev/_example/authn-fapi/keys/mtls/server-ca.crt"

---
apiVersion: core/v1
kind: HTTPClient
metadata:
  namespace: sampleNamespace
  name: discoveryClient
spec:
  HTTPTransportConfig:
    tlsConfig:
      rootCAs:
        - "/home/takeda/projects/oss/aileron-gateway/aileron-dev/_example/authn-fapi/keys/mtls/server-ca.crt"

---
apiVersion: core/v1
kind: MessageLogCreator
metadata:
  name: default
  namespace: sampleNamespace
spec:
  location: "Asia/Tokyo"
  noLocation: true
