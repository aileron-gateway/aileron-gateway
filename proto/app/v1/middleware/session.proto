syntax = "proto3";
package app.v1;

import "buf/validate/validate.proto";
import "core/v1/http.proto";
import "kernel/commonkey.proto";
import "kernel/hash.proto";
import "kernel/resource.proto";

option go_package = "github.com/aileron-gateway/aileron-gateway/apis/app/v1";

// SessionMiddleware resource definition.
// apiVersion="app/v1", kind="SessionMiddleware".
message SessionMiddleware {
    string                APIVersion = 1 [json_name = "apiVersion"];
    string                Kind       = 2 [json_name = "kind"];
    kernel.Metadata       Metadata   = 3 [json_name = "metadata"];
    SessionMiddlewareSpec Spec       = 4 [json_name = "spec"];
}

// SessionMiddlewareSpec is the status of the SessionMiddleware object.
// Values are managed by the application and therefore should not be set by users.
message SessionMiddlewareSpec {
    // [OPTIONAL]
    // Storage is the reference to a key-value storage object to save session data.
    // Referred object must implement KeyValueStorage interface.
    // Cookies is used as the session storage when this field is not set.
    kernel.Reference Storage = 1 [json_name = "storage"];

    // [OPTIONAL]
    // Prefix is the prefix used when saving the session to the external storage.
    // That is the session is saved in the session store with the key of <prefix> + <session-id>.
    // This prefx is used only for external session storage specified by storage field and not used for cookie storage.
    // Default is not set.
    string Prefix = 2 [json_name = "prefix", (buf.validate.field).string.pattern = "^[0-9a-zA-Z-_:]*$"];

    // [OPTIONAL]
    // CookieName is the name of the cookie used for save session ID or session data.
    // It is recommended to include "__Host-" or "__Secure-" prefix if possible.
    // Default values is "_SESSION".
    // See https://datatracker.ietf.org/doc/draft-ietf-httpbis-rfc6265bis/ and https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies.
    string CookieName = 3 [json_name = "cookieName", (buf.validate.field).string.pattern = "^[0-9a-zA-Z-_]+$"];

    // [OPTIONAL]
    // Cookie is the settings of cookie to save session ID and session data.
    // Default values are used when not set.
    core.v1.CookieSpec Cookie = 4 [json_name = "cookie"];

    // [OPTIONAL]
    // SecureEncoderSpec is encoder setting to securely save session data.
    SecureEncoderSpec SecureEncoder = 5 [json_name = "secureEncoder"];

    // [OPTIONAL]
    // Tracer is the reference to the tracer object.
    // The referred object must implement the tracer interface.
    // This tracer is used for tracing the saving of the session data to the session storage
    // except for cookie storage.
    kernel.Reference Tracer = 6 [json_name = "tracer"];
}

// SecureEncoderSpec is the specification of a secure encoder.
message SecureEncoderSpec {
    // [OPTIONAL]
    // HashAlg is the algorithm to calculate hash value by HMAC.
    // Default is SHA256, or HMAC-Sha256.
    kernel.HashAlg HashAlg = 1 [json_name = "hashAlg"];

    // [OPTIONAL]
    // HMACSecret is the Base64 encoded secret for HMAC.
    // The secret should be at least 64 bytes with enough entropy.
    // Use for example https://generate.plus/en/base64.
    // Default value is Base64(sha512(hostname + uid + gid)) but do not use it in production.
    string HMACSecret = 2 [json_name = "hmacSecret", (buf.validate.field).string.pattern = "[0-9a-zA-Z+/=]+"];

    // [OPTIONAL]
    // CommonKeyCryptType is the algorithm used for encrypting the data.
    // Set CryptSecret using at production.
    // Default is [AESGCM].
    kernel.CommonKeyCryptType CommonKeyCryptType = 3 [json_name = "commonKeyCryptType"];

    // [OPTIONAL]
    // CryptSecret is the Base64 encoded secret for common key encryption.
    // The secret length depends on the crypt algorithms.
    // Use for example https://generate.plus/en/base64.
    // Default value is Base64(sha256(hostname + uid + gid)) but do not use it in production.
    string CryptSecret = 4 [json_name = "cryptSecret", (buf.validate.field).string.pattern = "[0-9a-zA-Z+/=]+"];

    // [OPTIONAL]
    // EnableCompression compress the encoded values by Gzip.
    bool EnableCompression = 6 [json_name = "enableCompression"];

    // [OPTIONAL]
    // DisableHMAC is the flag to disable HMAC hashing.
    // Disabling HMAC slightly increase the performance but it is not recommended
    // from the stand point of security.
    // Never disable HMAC when using the encoder for cookie values or something exposed to clients.
    bool DisableHMAC = 7 [json_name = "disableHMAC"];

    //  [OPTIONAL] DisableEncryption is the flag to disable common key encryption.
    // Disabling encryption slightly increase the performance but it is not recommended
    // from the stand point of security.
    // Never disable encryption when using the encoder for cookie values or something exposed to clients.
    bool DisableEncryption = 8 [json_name = "disableEncryption"];
}
