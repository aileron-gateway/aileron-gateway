syntax = "proto3";
package core.v1;

import "buf/validate/validate.proto";

option go_package = "github.com/aileron-gateway/aileron-gateway/apis/core/v1";

// WaiterSpec is the specification for waiter object.
message WaiterSpec {
    oneof Waiter {
        // [OPTIONAL]
        // FixedBackoff is the confguration for FixedBackoffWaiter.
        core.v1.FixedBackoffWaiterSpec FixedBackoff = 1 [json_name = "fixedBackoff"];

        // [OPTIONAL]
        // FixedBackoff is the confguration for LinearBackoffWaiter.
        core.v1.LinearBackoffWaiterSpec LinearBackoff = 2 [json_name = "linearBackoff"];

        // [OPTIONAL]
        // FixedBackoff is the confguration for PolynomialBackoffWaiter.
        core.v1.PolynomialBackoffWaiterSpec PolynomialBackoff = 3 [json_name = "polynomialBackoff"];

        // [OPTIONAL]
        // FixedBackoff is the confguration for ExponentialBackoffWaiter.
        core.v1.ExponentialBackoffWaiterSpec ExponentialBackoff = 4 [json_name = "exponentialBackoff"];

        // [OPTIONAL]
        // FixedBackoff is the confguration for ExponentialBackoffFullJitterWaiter.
        core.v1.ExponentialBackoffFullJitterWaiterSpec ExponentialBackoffFullJitter = 5 [json_name = "exponentialBackoffFullJitter"];

        // [OPTIONAL]
        // ExponentialBackoffEqualJitter is the confguration for ExponentialBackoffEqualJitterWaiter.
        core.v1.ExponentialBackoffEqualJitterWaiterSpec ExponentialBackoffEqualJitter = 6 [json_name = "exponentialBackoffEqualJitter"];
    }
}

// FixedBackoffWaiterSpec is the specification for waiter of fixed backoff algorithm.
// 1st=base, 2nd=base, 3rd=base, ....
message FixedBackoffWaiterSpec {
    // [OPTIONAL]
    // Base is the base duration to wait until the next request in microsecond.
    // Default value is used when this field is set to 0.
    // Default is [5000] or 5 milliseconds.
    int32 Base = 1 [json_name = "base", (buf.validate.field).int32 = {gt : 0}];
}

// FixedBackoffWaiterSpec is the specification for waiter of linear backoff algorithm.
// Wait duration after n-th request will be sent after dt=[base * n] microseconds.
// 1st=base, 2nd=2*base, 3rd=3*base, ....
message LinearBackoffWaiterSpec {
    // [OPTIONAL]
    // Base is the base duration to wait until the next request in microsecond.
    // Default value is used when this field is set to 0.
    // Default is [5000] or 5 milliseconds.
    int32 Base = 1 [json_name = "base", (buf.validate.field).int32 = {gt : 0}];

    // [OPTIONAL]
    // Min is the minimum wait duration in microsecond.
    // Default is [0].
    int32 Min = 2 [json_name = "min", (buf.validate.field).int32 = {gte : 0}];

    // [OPTIONAL]
    // Max is the maximum wait duration in microsecond.
    // Default value is used when this field is set to 0.
    // Default is [2097152], or about 2.1 seconds.
    int32 Max = 3 [json_name = "max", (buf.validate.field).int32 = {gte : 0}];
}

// PolynomialBackoffWaiterSpec is the specification for waiter of polynomial backoff algorithm.
// Wait duration after n-th request will be sent after dt=[base*n^exponent] microseconds.
// 1st=base, 2nd=base*2^exponent, 3rd=base*3^exponent, ....
message PolynomialBackoffWaiterSpec {
    // [OPTIONAL]
    // Base is the base duration to wait until the next request in microsecond.
    // Default value is used when this field is set to 0.
    // Default is [5000] or 5 milliseconds.
    int32 Base = 1 [json_name = "base", (buf.validate.field).int32 = {gt : 0}];

    // [OPTIONAL]
    // Min is the minimum wait duration in microsecond.
    // Default is [0].
    int32 Min = 2 [json_name = "min", (buf.validate.field).int32 = {gte : 0}];

    // [OPTIONAL]
    // Max is the maximum wait duration in microsecond.
    // Default value is used when this field is set to 0.
    // Default is [2097152], or about 2.1 seconds.
    int32 Max = 3 [json_name = "max", (buf.validate.field).int32 = {gte : 0}];

    // [OPTIONAL]
    // Exponent is the exponent number used to calculate wait duration.
    // Default value is used when this field is set to 0.
    // Default is [2].
    int32 Exponent = 4 [json_name = "exponent", (buf.validate.field).int32 = {gte : 0}];
}

// ExponentialBackoffWaiterSpec is the specification for waiter of exponential backoff algorithm.
// Wait duration after n-th request will be sent after dt=[base*2^n] microseconds.
// 1st=2*base, 2nd=4*base, 3rd=9*base, ....
message ExponentialBackoffWaiterSpec {
    // [OPTIONAL]
    // Base is the base duration to wait until the next request in microsecond.
    // Default value is used when this field is set to 0.
    // Default is [2000] or 2 milliseconds.
    int32 Base = 1 [json_name = "base", (buf.validate.field).int32 = {gt : 0}];

    // [OPTIONAL]
    // Min is the minimum wait duration in microsecond.
    // Default is [0].
    int32 Min = 2 [json_name = "min", (buf.validate.field).int32 = {gte : 0}];

    // [OPTIONAL]
    // Max is the maximum wait duration in microsecond.
    // Default value is used when this field is set to 0.
    // Default is [2097152], or about 2.1 seconds.
    int32 Max = 3 [json_name = "max", (buf.validate.field).int32 = {gte : 0}];
}

// ExponentialBackoffFullJitterWaiterSpec is the specification for waiter of exponential backoff with full jitter algorithm.
// Wait duration after n-th request will be sent after dt=random(0, base*2^n) microseconds.
// 1st=random(0, 2*base), 2nd=random(0, 4*base), 3rd=random(0, 9*base), ....
message ExponentialBackoffFullJitterWaiterSpec {
    // [OPTIONAL]
    // Base is the base duration to wait until the next request in microsecond.
    // Default value is used when this field is set to 0.
    // Default is [2000] or 2 milliseconds.
    int32 Base = 1 [json_name = "base", (buf.validate.field).int32 = {gt : 0}];

    // [OPTIONAL]
    // Min is the minimum wait duration in microsecond.
    // Default is [0].
    int32 Min = 2 [json_name = "min", (buf.validate.field).int32 = {gte : 0}];

    // [OPTIONAL]
    // Max is the maximum wait duration in microsecond.
    // Default value is used when this field is set to 0.
    // Default is [2097152], or about 2.1 seconds.
    int32 Max = 3 [json_name = "max", (buf.validate.field).int32 = {gte : 0}];
}

// ExponentialBackoffEqualJitterWaiterSpec is the specification for waiter of exponential backoff with equal jitter algorithm.
// Wait duration after n-th request will be sent after dt=0.5*base*2^n+random(0, 0.5*base*2^n) microseconds.
// 1st=base+random(0, base), 2nd=2*base+random(0, 2*base), 3rd=4.5*base+random(0, 4.5*base), ....
message ExponentialBackoffEqualJitterWaiterSpec {
    // [OPTIONAL]
    // Base is the base duration to wait until the next request in microsecond.
    // Default value is used when this field is set to 0.
    // Default is [2000] or 2 milliseconds.
    int32 Base = 1 [json_name = "base", (buf.validate.field).int32 = {gt : 0}];

    // [OPTIONAL]
    // Min is the minimum wait duration in microsecond.
    // Default is [0].
    int32 Min = 2 [json_name = "min", (buf.validate.field).int32 = {gte : 0}];

    // [OPTIONAL]
    // Max is the maximum wait duration in microsecond.
    // Default value is used when this field is set to 0.
    // Default is [2097152], or about 2.1 seconds.
    int32 Max = 3 [json_name = "max", (buf.validate.field).int32 = {gte : 0}];
}

// LBAlgorithm is the load balance algorithm.
enum LBAlgorithm {
    RoundRobin = 0;  // Round-robin algorithm.
    Random     = 1;  // Random algorithm.
    RingHash   = 2;  // RingHash algorithm.
    Maglev     = 3;  // Maglev algorithm.
    DirectHash = 4;  // DirectHash algorithm.
}

// HTTPHasherSpec is the specifications for hasher
// that calculate hashes from http requests.
// RingHash, Maglev and DirectHash.
message HTTPHasherSpec {
    // [OPTIONAL]
    // HasherType is the hashing type to use.
    // This field is used by hash-based load balancers.
    // Non hash-based load balancers ignore this field.
    // Currently,  RingHash, Maglev and DirectHash
    // are the hash-based load balancer.
    // Default is ["ClientAddr"].
    HTTPHasherType HasherType = 1 [json_name = "hasherType"];

    // [OPTIONAL]
    // Key is the data source key.
    // This is the header name for Header hasher,
    // query parameter name for Query hasher
    // and path parameter name for PathParam hasher.
    // ClientAddr and MultiHeader hasher ignore this field.
    // This field is optional but set non empty string for
    // Header, Query and PathParam hashers.
    // Default is not set.
    string Key = 2 [json_name = "key"];

    // [OPTIONAL]
    // Keys are the data source keys.
    // This is the header names for MultiHeader hasher.
    // Other hashers ignore this field.
    // This field is optional but should be set atleast 1
    // for MultiHeader hashers.
    // Default is not set.
    repeated string Keys = 3 [json_name = "keys"];
}

// HTTPHasherType is the hashing method types
// which calculate hash values from HTTP requests.
enum HTTPHasherType {
    ClientAddr  = 0;  // ClientAddr hasher hashes client IP:Port.
    Header      = 1;  // Header hasher hashed single HTTP header.
    MultiHeader = 2;  // MultiHeader hasher hashed multiple HTTP headers.
    Cookie      = 3;  // Cookie hasher hashed cookie value.
    Query       = 4;  // Query hasher hashed URL query parameter.
    PathParam   = 5;  // PathParam hasher hashed path parameter.
}
