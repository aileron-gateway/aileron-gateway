# Architecture
# https://opentelemetry.io/docs/demo/architecture/
# https://github.com/open-telemetry/opentelemetry-collector/blob/main/receiver/otlpreceiver/config.md#confighttp-httpserversettings
# https://pkg.go.dev/go.opentelemetry.io/otel/sdk/metric
# https://www.timescale.com/blog/prometheus-vs-opentelemetry-metrics-a-complete-guide/
# https://pkg.go.dev/go.opentelemetry.io/otel/metric@v0.37.0#example-Meter-Synchronous
# https://pkg.go.dev/go.opentelemetry.io/otel/metric#MeterProvider
# https://opentelemetry.io/docs/reference/specification/metrics/data-model/
# https://pkg.go.dev/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp
# https://pkg.go.dev/go.opentelemetry.io/otel
# https://pkg.go.dev/go.opentelemetry.io/otel/sdk/metric
# https://uptrace.dev/opentelemetry/go-metrics.html#counterobserver

receivers:
  otlp:
    protocols:
      http:
        endpoint: 0.0.0.0:4318

processors:
  batch:

exporters:
  prometheus:
    endpoint: 0.0.0.0:8889
  logging:
    loglevel: debug

extensions:
  health_check:
  pprof:
  zpages:

service:
  # extensions: [health_check, pprof, zpages]

  telemetry:
    logs:
      level: "debug"
    metrics:
      level: detailed
      address: 0.0.0.0:8888

  pipelines:
    # traces:
    #   receivers: [otlp]
    #   processors: [batch]
    #   exporters: [otlp]
    metrics:
      receivers: [otlp]
      processors: [batch]
      exporters: [logging,prometheus]
    # logs:
    #   receivers: [otlp]
    #   processors: [batch]
    #   exporters: [otlp]
