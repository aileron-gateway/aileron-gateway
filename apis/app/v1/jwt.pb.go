// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.0
// source: app/v1/jwt.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SigningKeyAlgorithm is algorithm to sign JWTs.
type SigningKeyAlgorithm int32

const (
	SigningKeyAlgorithm_ALGORITHM_UNKNOWN SigningKeyAlgorithm = 0  // Unknown signing algorithm
	SigningKeyAlgorithm_NONE              SigningKeyAlgorithm = 1  // No digital signature or MAC
	SigningKeyAlgorithm_ES256             SigningKeyAlgorithm = 2  // ECDSA using P-256 and SHA-256
	SigningKeyAlgorithm_ES384             SigningKeyAlgorithm = 3  // ECDSA using P-384 and SHA-384
	SigningKeyAlgorithm_ES512             SigningKeyAlgorithm = 4  // ECDSA using P-521 and SHA-512
	SigningKeyAlgorithm_EdDSA             SigningKeyAlgorithm = 5  // EdDSA using Ed25519
	SigningKeyAlgorithm_HS256             SigningKeyAlgorithm = 6  // HMAC using SHA-256
	SigningKeyAlgorithm_HS384             SigningKeyAlgorithm = 7  // HMAC using SHA-384
	SigningKeyAlgorithm_HS512             SigningKeyAlgorithm = 8  // HMAC using SHA-512
	SigningKeyAlgorithm_RS256             SigningKeyAlgorithm = 9  // RSASSA-PKCS1-v1_5 using SHA-256
	SigningKeyAlgorithm_RS384             SigningKeyAlgorithm = 10 // RSASSA-PKCS1-v1_5 using SHA-384
	SigningKeyAlgorithm_RS512             SigningKeyAlgorithm = 11 // RSASSA-PKCS1-v1_5 using SHA-512
	SigningKeyAlgorithm_PS256             SigningKeyAlgorithm = 12 // RSASSA-PSS using SHA-256 and MGF1 with SHA-256
	SigningKeyAlgorithm_PS384             SigningKeyAlgorithm = 13 // RSASSA-PSS using SHA-384 and MGF1 with SHA-384
	SigningKeyAlgorithm_PS512             SigningKeyAlgorithm = 14 // RSASSA-PSS using SHA-512 and MGF1 with SHA-512
)

// Enum value maps for SigningKeyAlgorithm.
var (
	SigningKeyAlgorithm_name = map[int32]string{
		0:  "ALGORITHM_UNKNOWN",
		1:  "NONE",
		2:  "ES256",
		3:  "ES384",
		4:  "ES512",
		5:  "EdDSA",
		6:  "HS256",
		7:  "HS384",
		8:  "HS512",
		9:  "RS256",
		10: "RS384",
		11: "RS512",
		12: "PS256",
		13: "PS384",
		14: "PS512",
	}
	SigningKeyAlgorithm_value = map[string]int32{
		"ALGORITHM_UNKNOWN": 0,
		"NONE":              1,
		"ES256":             2,
		"ES384":             3,
		"ES512":             4,
		"EdDSA":             5,
		"HS256":             6,
		"HS384":             7,
		"HS512":             8,
		"RS256":             9,
		"RS384":             10,
		"RS512":             11,
		"PS256":             12,
		"PS384":             13,
		"PS512":             14,
	}
)

func (x SigningKeyAlgorithm) Enum() *SigningKeyAlgorithm {
	p := new(SigningKeyAlgorithm)
	*p = x
	return p
}

func (x SigningKeyAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SigningKeyAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_app_v1_jwt_proto_enumTypes[0].Descriptor()
}

func (SigningKeyAlgorithm) Type() protoreflect.EnumType {
	return &file_app_v1_jwt_proto_enumTypes[0]
}

func (x SigningKeyAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SigningKeyAlgorithm.Descriptor instead.
func (SigningKeyAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_app_v1_jwt_proto_rawDescGZIP(), []int{0}
}

// SigningKeyType is the type of key for encryption.
type SigningKeyType int32

const (
	SigningKeyType_KEY_TYPE_UNKNOWN SigningKeyType = 0 // Unknown encryption key type.
	SigningKeyType_COMMON           SigningKeyType = 1 // Common key for common key encryption.
	SigningKeyType_PUBLIC           SigningKeyType = 2 // Public keys for public key encryption.
	SigningKeyType_PRIVATE          SigningKeyType = 3 // Private keys for public key encryption.
)

// Enum value maps for SigningKeyType.
var (
	SigningKeyType_name = map[int32]string{
		0: "KEY_TYPE_UNKNOWN",
		1: "COMMON",
		2: "PUBLIC",
		3: "PRIVATE",
	}
	SigningKeyType_value = map[string]int32{
		"KEY_TYPE_UNKNOWN": 0,
		"COMMON":           1,
		"PUBLIC":           2,
		"PRIVATE":          3,
	}
)

func (x SigningKeyType) Enum() *SigningKeyType {
	p := new(SigningKeyType)
	*p = x
	return p
}

func (x SigningKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SigningKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_app_v1_jwt_proto_enumTypes[1].Descriptor()
}

func (SigningKeyType) Type() protoreflect.EnumType {
	return &file_app_v1_jwt_proto_enumTypes[1]
}

func (x SigningKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SigningKeyType.Descriptor instead.
func (SigningKeyType) EnumDescriptor() ([]byte, []int) {
	return file_app_v1_jwt_proto_rawDescGZIP(), []int{1}
}

// SigningKeySpec is the definition of the JWT signing key object.
type SigningKeySpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// KeyID is the key identifier.
	// This value is set in the "kid" attribute of JWT headers.
	// This value is automatically set if not set.
	KeyID string `protobuf:"bytes,1,opt,name=KeyID,json=keyID,proto3" json:"KeyID,omitempty"`
	// [REQUIRED]
	// Algorithm is the signing algorith when generating JWTs.
	Algorithm SigningKeyAlgorithm `protobuf:"varint,2,opt,name=Algorithm,json=algorithm,proto3,enum=app.v1.SigningKeyAlgorithm" json:"Algorithm,omitempty"`
	// [REQUIRED]
	// KeyType is the type of key.
	KeyType SigningKeyType `protobuf:"varint,3,opt,name=KeyType,json=keyType,proto3,enum=app.v1.SigningKeyType" json:"KeyType,omitempty"`
	// [OPTIONAL]
	// KeyFilePath is the file path to a common key or a pem key.
	// KeyFilePath is used when both keyFilePath and keyString are set.
	KeyFilePath string `protobuf:"bytes,4,opt,name=KeyFilePath,json=keyFilePath,proto3" json:"KeyFilePath,omitempty"`
	// [OPTIONAL]
	// KeyString is the base64 encoded string of a common key or a pem key.
	// KeyFilePath is used when both keyFilePath and keyString are set.
	KeyString string `protobuf:"bytes,5,opt,name=KeyString,json=keyString,proto3" json:"KeyString,omitempty"`
	// [OPTIONAL]
	// JWTHeader is the user defined header values in the JWT's header.
	JWTHeader     map[string]string `protobuf:"bytes,6,rep,name=JWTHeader,json=jwtHeader,proto3" json:"JWTHeader,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningKeySpec) Reset() {
	*x = SigningKeySpec{}
	mi := &file_app_v1_jwt_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningKeySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningKeySpec) ProtoMessage() {}

func (x *SigningKeySpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_jwt_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningKeySpec.ProtoReflect.Descriptor instead.
func (*SigningKeySpec) Descriptor() ([]byte, []int) {
	return file_app_v1_jwt_proto_rawDescGZIP(), []int{0}
}

func (x *SigningKeySpec) GetKeyID() string {
	if x != nil {
		return x.KeyID
	}
	return ""
}

func (x *SigningKeySpec) GetAlgorithm() SigningKeyAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return SigningKeyAlgorithm_ALGORITHM_UNKNOWN
}

func (x *SigningKeySpec) GetKeyType() SigningKeyType {
	if x != nil {
		return x.KeyType
	}
	return SigningKeyType_KEY_TYPE_UNKNOWN
}

func (x *SigningKeySpec) GetKeyFilePath() string {
	if x != nil {
		return x.KeyFilePath
	}
	return ""
}

func (x *SigningKeySpec) GetKeyString() string {
	if x != nil {
		return x.KeyString
	}
	return ""
}

func (x *SigningKeySpec) GetJWTHeader() map[string]string {
	if x != nil {
		return x.JWTHeader
	}
	return nil
}

// JWTHandlerSpec is the specification of JWTHandler object.
type JWTHandlerSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// PrivateKeys is list of private key objects for signing JWTs.
	// Default is empty.
	PrivateKeys []*SigningKeySpec `protobuf:"bytes,1,rep,name=PrivateKeys,json=privateKeys,proto3" json:"PrivateKeys,omitempty"`
	// [OPTIONAL]
	// PublicKeys is list of public key objects for validating JWTs.
	// Default is empty.
	PublicKeys []*SigningKeySpec `protobuf:"bytes,2,rep,name=PublicKeys,json=publicKeys,proto3" json:"PublicKeys,omitempty"`
	// [OPTIONAL]
	// JWKs is the pairs of issuer and JWKs URLs.
	// The keys are issuer and the values are JWKs URLs corresponding to the issuer.
	// JWKs URLs are used when a validating key was not found for JWTs.
	JWKs map[string]string `protobuf:"bytes,3,rep,name=JWKs,proto3" json:"JWKs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// [OPTIONAL]
	// UseJKU is the flag to use JWKs endpoint set in "jku" header field.
	// JWKs endpoint in "jku" header is used if there is no key cached
	// in the handler for validating a token.
	// Default is [false].
	UseJKU        bool `protobuf:"varint,4,opt,name=UseJKU,json=useJKU,proto3" json:"UseJKU,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JWTHandlerSpec) Reset() {
	*x = JWTHandlerSpec{}
	mi := &file_app_v1_jwt_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JWTHandlerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTHandlerSpec) ProtoMessage() {}

func (x *JWTHandlerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_jwt_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTHandlerSpec.ProtoReflect.Descriptor instead.
func (*JWTHandlerSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_jwt_proto_rawDescGZIP(), []int{1}
}

func (x *JWTHandlerSpec) GetPrivateKeys() []*SigningKeySpec {
	if x != nil {
		return x.PrivateKeys
	}
	return nil
}

func (x *JWTHandlerSpec) GetPublicKeys() []*SigningKeySpec {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *JWTHandlerSpec) GetJWKs() map[string]string {
	if x != nil {
		return x.JWKs
	}
	return nil
}

func (x *JWTHandlerSpec) GetUseJKU() bool {
	if x != nil {
		return x.UseJKU
	}
	return false
}

var File_app_v1_jwt_proto protoreflect.FileDescriptor

const file_app_v1_jwt_proto_rawDesc = "" +
	"\n" +
	"\x10app/v1/jwt.proto\x12\x06app.v1\"\xd6\x02\n" +
	"\x0eSigningKeySpec\x12\x14\n" +
	"\x05KeyID\x18\x01 \x01(\tR\x05keyID\x129\n" +
	"\tAlgorithm\x18\x02 \x01(\x0e2\x1b.app.v1.SigningKeyAlgorithmR\talgorithm\x120\n" +
	"\aKeyType\x18\x03 \x01(\x0e2\x16.app.v1.SigningKeyTypeR\akeyType\x12 \n" +
	"\vKeyFilePath\x18\x04 \x01(\tR\vkeyFilePath\x12\x1c\n" +
	"\tKeyString\x18\x05 \x01(\tR\tkeyString\x12C\n" +
	"\tJWTHeader\x18\x06 \x03(\v2%.app.v1.SigningKeySpec.JWTHeaderEntryR\tjwtHeader\x1a<\n" +
	"\x0eJWTHeaderEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x89\x02\n" +
	"\x0eJWTHandlerSpec\x128\n" +
	"\vPrivateKeys\x18\x01 \x03(\v2\x16.app.v1.SigningKeySpecR\vprivateKeys\x126\n" +
	"\n" +
	"PublicKeys\x18\x02 \x03(\v2\x16.app.v1.SigningKeySpecR\n" +
	"publicKeys\x124\n" +
	"\x04JWKs\x18\x03 \x03(\v2 .app.v1.JWTHandlerSpec.JWKsEntryR\x04JWKs\x12\x16\n" +
	"\x06UseJKU\x18\x04 \x01(\bR\x06useJKU\x1a7\n" +
	"\tJWKsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01*\xc5\x01\n" +
	"\x13SigningKeyAlgorithm\x12\x15\n" +
	"\x11ALGORITHM_UNKNOWN\x10\x00\x12\b\n" +
	"\x04NONE\x10\x01\x12\t\n" +
	"\x05ES256\x10\x02\x12\t\n" +
	"\x05ES384\x10\x03\x12\t\n" +
	"\x05ES512\x10\x04\x12\t\n" +
	"\x05EdDSA\x10\x05\x12\t\n" +
	"\x05HS256\x10\x06\x12\t\n" +
	"\x05HS384\x10\a\x12\t\n" +
	"\x05HS512\x10\b\x12\t\n" +
	"\x05RS256\x10\t\x12\t\n" +
	"\x05RS384\x10\n" +
	"\x12\t\n" +
	"\x05RS512\x10\v\x12\t\n" +
	"\x05PS256\x10\f\x12\t\n" +
	"\x05PS384\x10\r\x12\t\n" +
	"\x05PS512\x10\x0e*K\n" +
	"\x0eSigningKeyType\x12\x14\n" +
	"\x10KEY_TYPE_UNKNOWN\x10\x00\x12\n" +
	"\n" +
	"\x06COMMON\x10\x01\x12\n" +
	"\n" +
	"\x06PUBLIC\x10\x02\x12\v\n" +
	"\aPRIVATE\x10\x03B8Z6github.com/aileron-gateway/aileron-gateway/apis/app/v1b\x06proto3"

var (
	file_app_v1_jwt_proto_rawDescOnce sync.Once
	file_app_v1_jwt_proto_rawDescData []byte
)

func file_app_v1_jwt_proto_rawDescGZIP() []byte {
	file_app_v1_jwt_proto_rawDescOnce.Do(func() {
		file_app_v1_jwt_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_app_v1_jwt_proto_rawDesc), len(file_app_v1_jwt_proto_rawDesc)))
	})
	return file_app_v1_jwt_proto_rawDescData
}

var file_app_v1_jwt_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_app_v1_jwt_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_app_v1_jwt_proto_goTypes = []any{
	(SigningKeyAlgorithm)(0), // 0: app.v1.SigningKeyAlgorithm
	(SigningKeyType)(0),      // 1: app.v1.SigningKeyType
	(*SigningKeySpec)(nil),   // 2: app.v1.SigningKeySpec
	(*JWTHandlerSpec)(nil),   // 3: app.v1.JWTHandlerSpec
	nil,                      // 4: app.v1.SigningKeySpec.JWTHeaderEntry
	nil,                      // 5: app.v1.JWTHandlerSpec.JWKsEntry
}
var file_app_v1_jwt_proto_depIdxs = []int32{
	0, // 0: app.v1.SigningKeySpec.Algorithm:type_name -> app.v1.SigningKeyAlgorithm
	1, // 1: app.v1.SigningKeySpec.KeyType:type_name -> app.v1.SigningKeyType
	4, // 2: app.v1.SigningKeySpec.JWTHeader:type_name -> app.v1.SigningKeySpec.JWTHeaderEntry
	2, // 3: app.v1.JWTHandlerSpec.PrivateKeys:type_name -> app.v1.SigningKeySpec
	2, // 4: app.v1.JWTHandlerSpec.PublicKeys:type_name -> app.v1.SigningKeySpec
	5, // 5: app.v1.JWTHandlerSpec.JWKs:type_name -> app.v1.JWTHandlerSpec.JWKsEntry
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_app_v1_jwt_proto_init() }
func file_app_v1_jwt_proto_init() {
	if File_app_v1_jwt_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_app_v1_jwt_proto_rawDesc), len(file_app_v1_jwt_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_app_v1_jwt_proto_goTypes,
		DependencyIndexes: file_app_v1_jwt_proto_depIdxs,
		EnumInfos:         file_app_v1_jwt_proto_enumTypes,
		MessageInfos:      file_app_v1_jwt_proto_msgTypes,
	}.Build()
	File_app_v1_jwt_proto = out.File
	file_app_v1_jwt_proto_goTypes = nil
	file_app_v1_jwt_proto_depIdxs = nil
}
