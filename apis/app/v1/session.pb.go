// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.0
// source: app/v1/middleware/session.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/aileron-gateway/aileron-gateway/apis/core/v1"
	kernel "github.com/aileron-gateway/aileron-gateway/apis/kernel"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SessionMiddleware resource definition.
// apiVersion="app/v1", kind="SessionMiddleware".
type SessionMiddleware struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	APIVersion    string                 `protobuf:"bytes,1,opt,name=APIVersion,json=apiVersion,proto3" json:"APIVersion,omitempty"`
	Kind          string                 `protobuf:"bytes,2,opt,name=Kind,json=kind,proto3" json:"Kind,omitempty"`
	Metadata      *kernel.Metadata       `protobuf:"bytes,3,opt,name=Metadata,json=metadata,proto3" json:"Metadata,omitempty"`
	Spec          *SessionMiddlewareSpec `protobuf:"bytes,4,opt,name=Spec,json=spec,proto3" json:"Spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionMiddleware) Reset() {
	*x = SessionMiddleware{}
	mi := &file_app_v1_middleware_session_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionMiddleware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionMiddleware) ProtoMessage() {}

func (x *SessionMiddleware) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_session_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionMiddleware.ProtoReflect.Descriptor instead.
func (*SessionMiddleware) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_session_proto_rawDescGZIP(), []int{0}
}

func (x *SessionMiddleware) GetAPIVersion() string {
	if x != nil {
		return x.APIVersion
	}
	return ""
}

func (x *SessionMiddleware) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SessionMiddleware) GetMetadata() *kernel.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SessionMiddleware) GetSpec() *SessionMiddlewareSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// SessionMiddlewareSpec is the status of the SessionMiddleware object.
// Values are managed by the application and therefore should not be set by users.
type SessionMiddlewareSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// Logger is the reference to a Logger object.
	// Referred object must implement Logger interface.
	// Default Logger is used when not set.
	Logger *kernel.Reference `protobuf:"bytes,1,opt,name=Logger,json=logger,proto3" json:"Logger,omitempty"`
	// [OPTIONAL]
	// ErrorHandler is the reference to a ErrorHandler object.
	// Referred object must implement ErrorHandler interface.
	// Default error handler is used when not set.
	ErrorHandler *kernel.Reference `protobuf:"bytes,2,opt,name=ErrorHandler,json=errorHandler,proto3" json:"ErrorHandler,omitempty"`
	// [OPTIONAL]
	// Storage is the reference to a key-value storage object to save session data.
	// Referred object must implement KeyValueStorage interface.
	// Cookies is used as the session storage when this field is not set.
	Storage *kernel.Reference `protobuf:"bytes,3,opt,name=Storage,json=storage,proto3" json:"Storage,omitempty"`
	// [OPTIONAL]
	// Prefix is the prefix used when saving the session to the external storage.
	// That is the session is saved in the session store with the key of <prefix> + <session-id>.
	// This prefx is used only for external session storage specified by storage field and not used for cookie storage.
	// Default is not set.
	Prefix string `protobuf:"bytes,4,opt,name=Prefix,json=prefix,proto3" json:"Prefix,omitempty"`
	// [OPTIONAL]
	// CookieName is the name of the cookie used for save session ID or session data.
	// It is recommended to include "__Host-" or "__Secure-" prefix if possible.
	// Default values is "_SESSION".
	// See https://datatracker.ietf.org/doc/draft-ietf-httpbis-rfc6265bis/ and https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies.
	CookieName string `protobuf:"bytes,5,opt,name=CookieName,json=cookieName,proto3" json:"CookieName,omitempty"`
	// [OPTIONAL]
	// Cookie is the settings of cookie to save session ID and session data.
	// Default values are used when not set.
	Cookie *v1.CookieSpec `protobuf:"bytes,6,opt,name=Cookie,json=cookie,proto3" json:"Cookie,omitempty"`
	// [OPTIONAL]
	// SecureEncoderSpec is encoder setting to securely save session data.
	SecureEncoder *SecureEncoderSpec `protobuf:"bytes,7,opt,name=SecureEncoder,json=secureEncoder,proto3" json:"SecureEncoder,omitempty"`
	// [OPTIONAL]
	// Tracer is the reference to the tracer object.
	// The referred object must implement the tracer interface.
	// This tracer is used for tracing the saving of the session data to the session storage
	// except for cookie storage.
	Tracer        *kernel.Reference `protobuf:"bytes,8,opt,name=Tracer,json=tracer,proto3" json:"Tracer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionMiddlewareSpec) Reset() {
	*x = SessionMiddlewareSpec{}
	mi := &file_app_v1_middleware_session_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionMiddlewareSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionMiddlewareSpec) ProtoMessage() {}

func (x *SessionMiddlewareSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_session_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionMiddlewareSpec.ProtoReflect.Descriptor instead.
func (*SessionMiddlewareSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_session_proto_rawDescGZIP(), []int{1}
}

func (x *SessionMiddlewareSpec) GetLogger() *kernel.Reference {
	if x != nil {
		return x.Logger
	}
	return nil
}

func (x *SessionMiddlewareSpec) GetErrorHandler() *kernel.Reference {
	if x != nil {
		return x.ErrorHandler
	}
	return nil
}

func (x *SessionMiddlewareSpec) GetStorage() *kernel.Reference {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *SessionMiddlewareSpec) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *SessionMiddlewareSpec) GetCookieName() string {
	if x != nil {
		return x.CookieName
	}
	return ""
}

func (x *SessionMiddlewareSpec) GetCookie() *v1.CookieSpec {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SessionMiddlewareSpec) GetSecureEncoder() *SecureEncoderSpec {
	if x != nil {
		return x.SecureEncoder
	}
	return nil
}

func (x *SessionMiddlewareSpec) GetTracer() *kernel.Reference {
	if x != nil {
		return x.Tracer
	}
	return nil
}

// SecureEncoderSpec is the specification of a secure encoder.
type SecureEncoderSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// HashAlg is the algorithm to calculate hash value by HMAC.
	// Default is SHA256, or HMAC-Sha256.
	HashAlg kernel.HashAlg `protobuf:"varint,1,opt,name=HashAlg,json=hashAlg,proto3,enum=kernel.HashAlg" json:"HashAlg,omitempty"`
	// [OPTIONAL]
	// HMACSecret is the Base64 encoded secret for HMAC.
	// The secret should be at least 64 bytes with enough entropy.
	// Use for example https://generate.plus/en/base64.
	// Default value is Base64(sha512(hostname + uid + gid)) but do not use it in production.
	HMACSecret string `protobuf:"bytes,2,opt,name=HMACSecret,json=hmacSecret,proto3" json:"HMACSecret,omitempty"`
	// [OPTIONAL]
	// CommonKeyCryptType is the algorithm used for encrypting the data.
	// Set CryptSecret using at production.
	// Default is [AESGCM].
	CommonKeyCryptType kernel.CommonKeyCryptType `protobuf:"varint,3,opt,name=CommonKeyCryptType,json=commonKeyCryptType,proto3,enum=kernel.CommonKeyCryptType" json:"CommonKeyCryptType,omitempty"`
	// [OPTIONAL]
	// CryptSecret is the Base64 encoded secret for common key encryption.
	// The secret length depends on the crypt algorithms.
	// Use for example https://generate.plus/en/base64.
	// Default value is Base64(sha256(hostname + uid + gid)) but do not use it in production.
	CryptSecret string `protobuf:"bytes,4,opt,name=CryptSecret,json=cryptSecret,proto3" json:"CryptSecret,omitempty"`
	// [OPTIONAL]
	// EnableCompression compress the encoded values by Gzip.
	EnableCompression bool `protobuf:"varint,6,opt,name=EnableCompression,json=enableCompression,proto3" json:"EnableCompression,omitempty"`
	// [OPTIONAL]
	// DisableHMAC is the flag to disable HMAC hashing.
	// Disabling HMAC slightly increase the performance but it is not recommended
	// from the stand point of security.
	// Never disable HMAC when using the encoder for cookie values or something exposed to clients.
	DisableHMAC bool `protobuf:"varint,7,opt,name=DisableHMAC,json=disableHMAC,proto3" json:"DisableHMAC,omitempty"`
	//	[OPTIONAL] DisableEncryption is the flag to disable common key encryption.
	//
	// Disabling encryption slightly increase the performance but it is not recommended
	// from the stand point of security.
	// Never disable encryption when using the encoder for cookie values or something exposed to clients.
	DisableEncryption bool `protobuf:"varint,8,opt,name=DisableEncryption,json=disableEncryption,proto3" json:"DisableEncryption,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SecureEncoderSpec) Reset() {
	*x = SecureEncoderSpec{}
	mi := &file_app_v1_middleware_session_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecureEncoderSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureEncoderSpec) ProtoMessage() {}

func (x *SecureEncoderSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_session_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureEncoderSpec.ProtoReflect.Descriptor instead.
func (*SecureEncoderSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_session_proto_rawDescGZIP(), []int{2}
}

func (x *SecureEncoderSpec) GetHashAlg() kernel.HashAlg {
	if x != nil {
		return x.HashAlg
	}
	return kernel.HashAlg(0)
}

func (x *SecureEncoderSpec) GetHMACSecret() string {
	if x != nil {
		return x.HMACSecret
	}
	return ""
}

func (x *SecureEncoderSpec) GetCommonKeyCryptType() kernel.CommonKeyCryptType {
	if x != nil {
		return x.CommonKeyCryptType
	}
	return kernel.CommonKeyCryptType(0)
}

func (x *SecureEncoderSpec) GetCryptSecret() string {
	if x != nil {
		return x.CryptSecret
	}
	return ""
}

func (x *SecureEncoderSpec) GetEnableCompression() bool {
	if x != nil {
		return x.EnableCompression
	}
	return false
}

func (x *SecureEncoderSpec) GetDisableHMAC() bool {
	if x != nil {
		return x.DisableHMAC
	}
	return false
}

func (x *SecureEncoderSpec) GetDisableEncryption() bool {
	if x != nil {
		return x.DisableEncryption
	}
	return false
}

var File_app_v1_middleware_session_proto protoreflect.FileDescriptor

var file_app_v1_middleware_session_proto_rawDesc = string([]byte{
	0x0a, 0x1f, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x01, 0x0a,
	0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xaa, 0x03, 0x0a, 0x15, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x29, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x30, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0xba, 0x48, 0x15, 0x72, 0x13, 0x32, 0x11, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5f, 0x3a, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x37, 0x0a, 0x0a, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5f, 0x5d, 0x2b, 0x24, 0x52,
	0x0a, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x43,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x72, 0x22, 0xfa, 0x02, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x07, 0x48, 0x61,
	0x73, 0x68, 0x41, 0x6c, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x52, 0x07, 0x68, 0x61,
	0x73, 0x68, 0x41, 0x6c, 0x67, 0x12, 0x36, 0x0a, 0x0a, 0x48, 0x4d, 0x41, 0x43, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xba, 0x48, 0x13, 0x72, 0x11,
	0x32, 0x0f, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2b, 0x2f, 0x3d, 0x5d,
	0x2b, 0x52, 0x0a, 0x68, 0x6d, 0x61, 0x63, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x4a, 0x0a,
	0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x79, 0x70, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16,
	0xba, 0x48, 0x13, 0x72, 0x11, 0x32, 0x0f, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x2b, 0x2f, 0x3d, 0x5d, 0x2b, 0x52, 0x0b, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x4d, 0x41, 0x43,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48,
	0x4d, 0x41, 0x43, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x69, 0x6c, 0x65, 0x72, 0x6f, 0x6e, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f,
	0x61, 0x69, 0x6c, 0x65, 0x72, 0x6f, 0x6e, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_app_v1_middleware_session_proto_rawDescOnce sync.Once
	file_app_v1_middleware_session_proto_rawDescData []byte
)

func file_app_v1_middleware_session_proto_rawDescGZIP() []byte {
	file_app_v1_middleware_session_proto_rawDescOnce.Do(func() {
		file_app_v1_middleware_session_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_app_v1_middleware_session_proto_rawDesc), len(file_app_v1_middleware_session_proto_rawDesc)))
	})
	return file_app_v1_middleware_session_proto_rawDescData
}

var file_app_v1_middleware_session_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_app_v1_middleware_session_proto_goTypes = []any{
	(*SessionMiddleware)(nil),      // 0: app.v1.SessionMiddleware
	(*SessionMiddlewareSpec)(nil),  // 1: app.v1.SessionMiddlewareSpec
	(*SecureEncoderSpec)(nil),      // 2: app.v1.SecureEncoderSpec
	(*kernel.Metadata)(nil),        // 3: kernel.Metadata
	(*kernel.Reference)(nil),       // 4: kernel.Reference
	(*v1.CookieSpec)(nil),          // 5: core.v1.CookieSpec
	(kernel.HashAlg)(0),            // 6: kernel.HashAlg
	(kernel.CommonKeyCryptType)(0), // 7: kernel.CommonKeyCryptType
}
var file_app_v1_middleware_session_proto_depIdxs = []int32{
	3,  // 0: app.v1.SessionMiddleware.Metadata:type_name -> kernel.Metadata
	1,  // 1: app.v1.SessionMiddleware.Spec:type_name -> app.v1.SessionMiddlewareSpec
	4,  // 2: app.v1.SessionMiddlewareSpec.Logger:type_name -> kernel.Reference
	4,  // 3: app.v1.SessionMiddlewareSpec.ErrorHandler:type_name -> kernel.Reference
	4,  // 4: app.v1.SessionMiddlewareSpec.Storage:type_name -> kernel.Reference
	5,  // 5: app.v1.SessionMiddlewareSpec.Cookie:type_name -> core.v1.CookieSpec
	2,  // 6: app.v1.SessionMiddlewareSpec.SecureEncoder:type_name -> app.v1.SecureEncoderSpec
	4,  // 7: app.v1.SessionMiddlewareSpec.Tracer:type_name -> kernel.Reference
	6,  // 8: app.v1.SecureEncoderSpec.HashAlg:type_name -> kernel.HashAlg
	7,  // 9: app.v1.SecureEncoderSpec.CommonKeyCryptType:type_name -> kernel.CommonKeyCryptType
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_app_v1_middleware_session_proto_init() }
func file_app_v1_middleware_session_proto_init() {
	if File_app_v1_middleware_session_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_app_v1_middleware_session_proto_rawDesc), len(file_app_v1_middleware_session_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_app_v1_middleware_session_proto_goTypes,
		DependencyIndexes: file_app_v1_middleware_session_proto_depIdxs,
		MessageInfos:      file_app_v1_middleware_session_proto_msgTypes,
	}.Build()
	File_app_v1_middleware_session_proto = out.File
	file_app_v1_middleware_session_proto_goTypes = nil
	file_app_v1_middleware_session_proto_depIdxs = nil
}
