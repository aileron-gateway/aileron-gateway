// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.0
// source: app/v1/middleware/opa.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kernel "github.com/aileron-gateway/aileron-gateway/apis/kernel"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OPAAuthzMiddleware is the definition of the OPAAuthzMiddleware object.
// OPAAuthzMiddleware implements interface of the authorization handler.
// See https://www.openpolicyagent.org/ for about OPA.
type OPAAuthzMiddleware struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [REQUIRED]
	// APIVersion is the defined version of the authorization handler.
	// This value must be "app/v1".
	APIVersion string `protobuf:"bytes,1,opt,name=APIVersion,json=apiVersion,proto3" json:"APIVersion,omitempty"`
	// [REQUIRED]
	// Kind is the kind of this object.
	// This value must be "OPAAuthzMiddleware".
	Kind string `protobuf:"bytes,2,opt,name=Kind,json=kind,proto3" json:"Kind,omitempty"`
	// [OPTIONAL]
	// Metadata is the metadata of the http logger object.
	// If not set, both name and namespace in the metadata
	// are treated as "default".
	Metadata *kernel.Metadata `protobuf:"bytes,3,opt,name=Metadata,json=metadata,proto3" json:"Metadata,omitempty"`
	// [OPTIONAL]
	// Spec is the specification of the authorization handler.
	// Default values are used when nothing is set.
	Spec          *OPAAuthzMiddlewareSpec `protobuf:"bytes,4,opt,name=Spec,json=spec,proto3" json:"Spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OPAAuthzMiddleware) Reset() {
	*x = OPAAuthzMiddleware{}
	mi := &file_app_v1_middleware_opa_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OPAAuthzMiddleware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OPAAuthzMiddleware) ProtoMessage() {}

func (x *OPAAuthzMiddleware) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_opa_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OPAAuthzMiddleware.ProtoReflect.Descriptor instead.
func (*OPAAuthzMiddleware) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_opa_proto_rawDescGZIP(), []int{0}
}

func (x *OPAAuthzMiddleware) GetAPIVersion() string {
	if x != nil {
		return x.APIVersion
	}
	return ""
}

func (x *OPAAuthzMiddleware) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *OPAAuthzMiddleware) GetMetadata() *kernel.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *OPAAuthzMiddleware) GetSpec() *OPAAuthzMiddlewareSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// OPAAuthzMiddlewareSpec is the specifications of the OPAAuthzMiddleware object.
type OPAAuthzMiddlewareSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// Logger is the reference to a Logger object.
	// Referred object must implement Logger interface.
	// Default Logger is used when not set.
	Logger *kernel.Reference `protobuf:"bytes,1,opt,name=Logger,json=logger,proto3" json:"Logger,omitempty"`
	// [OPTIONAL]
	// ErrorHandler is the reference to a ErrorHandler object.
	// Referred object must implement ErrorHandler interface.
	// Default error handler is used when not set.
	ErrorHandler *kernel.Reference `protobuf:"bytes,2,opt,name=ErrorHandler,json=errorHandler,proto3" json:"ErrorHandler,omitempty"`
	// [OPTIONAL]
	// ClaimsKey is the key to get claims to be used for authorization.
	// This value should be matched to the one which is set in the authentication handler
	// when using this authorization handler with any authentication handler.
	// Found values are accessible from rego through "input.auth".
	// Default is ["AuthnClaims"].
	ClaimsKey string `protobuf:"bytes,3,opt,name=ClaimsKey,json=claimsKey,proto3" json:"ClaimsKey,omitempty"`
	// [OPTIONAL]
	// EnvData allows optional input of host environment information.
	// Configured data is available as "input.env" in regos.
	// Default is not set.
	EnvData *EnvDataSpec `protobuf:"bytes,5,opt,name=EnvData,json=envData,proto3" json:"EnvData,omitempty"`
	// [OPTIONAL]
	// Regos is the list of rego policies.
	// This is optional but should be set at least one to make authorization work.
	// Default is not set.
	Regos []*RegoSpec `protobuf:"bytes,6,rep,name=Regos,json=regos,proto3" json:"Regos,omitempty"`
	// [OPTIONAL]
	// EnableTrace enables tracing of the policy decision.
	// Tace logs are input to the logger.
	// Trace logs are output as-is even the logger is json-based structural logger.
	// That means the trace logs are output with any log level.
	// Trace should be disabled in production environment for performance.
	// Default is [false].
	EnableTrace   bool `protobuf:"varint,7,opt,name=EnableTrace,json=enableTrace,proto3" json:"EnableTrace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OPAAuthzMiddlewareSpec) Reset() {
	*x = OPAAuthzMiddlewareSpec{}
	mi := &file_app_v1_middleware_opa_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OPAAuthzMiddlewareSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OPAAuthzMiddlewareSpec) ProtoMessage() {}

func (x *OPAAuthzMiddlewareSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_opa_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OPAAuthzMiddlewareSpec.ProtoReflect.Descriptor instead.
func (*OPAAuthzMiddlewareSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_opa_proto_rawDescGZIP(), []int{1}
}

func (x *OPAAuthzMiddlewareSpec) GetLogger() *kernel.Reference {
	if x != nil {
		return x.Logger
	}
	return nil
}

func (x *OPAAuthzMiddlewareSpec) GetErrorHandler() *kernel.Reference {
	if x != nil {
		return x.ErrorHandler
	}
	return nil
}

func (x *OPAAuthzMiddlewareSpec) GetClaimsKey() string {
	if x != nil {
		return x.ClaimsKey
	}
	return ""
}

func (x *OPAAuthzMiddlewareSpec) GetEnvData() *EnvDataSpec {
	if x != nil {
		return x.EnvData
	}
	return nil
}

func (x *OPAAuthzMiddlewareSpec) GetRegos() []*RegoSpec {
	if x != nil {
		return x.Regos
	}
	return nil
}

func (x *OPAAuthzMiddlewareSpec) GetEnableTrace() bool {
	if x != nil {
		return x.EnableTrace
	}
	return false
}

// RegoSpec is the specification of a OPA rego.
// See the OPA's official documents for details at https://www.openpolicyagent.org/docs/latest/
type RegoSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// QueryParameter is the name of the parameter that is used in
	// the Regos to represent the target was authrorized or not.
	// For example, "data.authz.allow".
	// Default is ["data.authz.allow"].
	QueryParameter string `protobuf:"bytes,1,opt,name=QueryParameter,json=queryParameter,proto3" json:"QueryParameter,omitempty"`
	// [OPTIONAL]
	// PolicyFiles is the list of Rego policy file paths.
	// Online playground for rego is available at https://play.openpolicyagent.org/
	// Policies are loaded as a module
	// https://pkg.go.dev/github.com/open-policy-agent/opa/rego#Module.
	// Default is not set.
	PolicyFiles []string `protobuf:"bytes,2,rep,name=PolicyFiles,json=policyFiles,proto3" json:"PolicyFiles,omitempty"`
	// [OPTIONAL]
	// BundlePaths is the list of bundle paths.
	// If a path starts with "http://" or "https://",
	// it is considered to be an endpoint to a bundle server and
	// bundles are requested to the specified endpoint with GET request.
	// If a path does not starts with "http://" or "https://",
	// the path is considered to be a path in local file system.
	// If a single file path is provided, it will be treated as a normal tarball bundle.
	// If a directory path is provided, it will be loaded as an unzipped bundle tree.
	// See https://www.openpolicyagent.org/docs/latest/management-bundles/.
	// Default is not set.
	BundlePaths []string `protobuf:"bytes,3,rep,name=BundlePaths,json=bundlePaths,proto3" json:"BundlePaths,omitempty"`
	// [OPTIONAL]
	// BundleVerification is the bundle verification configuration.
	// To skip bundle verifications, use SkipBundleVerification.
	// See https://www.openpolicyagent.org/docs/latest/management-bundles.
	// Default is not set.
	BundleVerification *BundleVerificationSpec `protobuf:"bytes,4,opt,name=BundleVerification,json=bundleVerification,proto3" json:"BundleVerification,omitempty"`
	// [OPTIONAL]
	// SkipBundleVerification if true, skips verification of a signed bundle.
	// To configure verification, use BundleVerification.
	// See https://pkg.go.dev/github.com/open-policy-agent/opa/rego#SkipBundleVerification
	// and https://www.openpolicyagent.org/docs/latest/management-bundles/#signature-verification.
	// Default is [false].
	SkipBundleVerification bool `protobuf:"varint,5,opt,name=SkipBundleVerification,json=skipBundleVerification,proto3" json:"SkipBundleVerification,omitempty"`
	// [OPTIONAL]
	// EnablePrintStatements enables print() calls in regos.
	// If false, print() calls will be erased from the policy.
	// Note that the outputs of the print() stateents are passed to the logger as-is.
	// It means they are output with any log levels and
	// no formatting will be applied even using a json logger.
	// See https://pkg.go.dev/github.com/open-policy-agent/opa/rego#EnablePrintStatements
	// Default is [false].
	EnablePrintStatements bool `protobuf:"varint,6,opt,name=EnablePrintStatements,json=enablePrintStatements,proto3" json:"EnablePrintStatements,omitempty"`
	// [OPTIONAL]
	// ShallowInlining prevents rules that depend on unknown values
	// from being inlined. Rules that only depend on known values are inlined.
	// See https://pkg.go.dev/github.com/open-policy-agent/opa/rego#ShallowInlining
	// Default is [false].
	ShallowInlining bool `protobuf:"varint,7,opt,name=ShallowInlining,json=shallowInlining,proto3" json:"ShallowInlining,omitempty"`
	// [OPTIONAL]
	// Strict enables or disables strict-mode in the compiler.
	// See https://pkg.go.dev/github.com/open-policy-agent/opa/rego#Strict and
	// https://www.openpolicyagent.org/docs/latest/policy-language/#strict-mode.
	// Default is [false].
	Strict bool `protobuf:"varint,8,opt,name=Strict,json=strict,proto3" json:"Strict,omitempty"`
	// [OPTIONAL]
	// StrictBuiltinErrors tells the evaluator to treat
	// all built-in function errors as fatal errors.
	// See https://pkg.go.dev/github.com/open-policy-agent/opa/rego#StrictBuiltinErrors
	// and https://www.openpolicyagent.org/docs/latest/policy-language/#errors.
	// Default is [false].
	StrictBuiltinErrors bool `protobuf:"varint,9,opt,name=StrictBuiltinErrors,json=strictBuiltinErrors,proto3" json:"StrictBuiltinErrors,omitempty"`
	// [OPTIONAL]
	// RoundTripper is the references to a roundTripper object.
	// Referred object must implement RoundTripper interface.
	// This round tripper is used for getting data
	// from the specified endpoints.
	// Use Header field to add custom HTTP headers to the requests.
	// Default is not set.
	RoundTripper *kernel.Reference `protobuf:"bytes,10,opt,name=RoundTripper,json=roundTripper,proto3" json:"RoundTripper,omitempty"`
	// [OPTIONAL]
	// Header is the HTTP header name and value list.
	// Specified headers are added to the HTTP requests
	// when getting model and policies from HTTP endpoints.
	// This is mainly intended for adding Authorization header.
	// Default is not set.
	Header map[string]string `protobuf:"bytes,11,rep,name=Header,json=header,proto3" json:"Header,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Types that are valid to be assigned to Stores:
	//
	//	*RegoSpec_FileStore
	//	*RegoSpec_HTTPStore
	Stores        isRegoSpec_Stores `protobuf_oneof:"Stores"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegoSpec) Reset() {
	*x = RegoSpec{}
	mi := &file_app_v1_middleware_opa_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegoSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegoSpec) ProtoMessage() {}

func (x *RegoSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_opa_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegoSpec.ProtoReflect.Descriptor instead.
func (*RegoSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_opa_proto_rawDescGZIP(), []int{2}
}

func (x *RegoSpec) GetQueryParameter() string {
	if x != nil {
		return x.QueryParameter
	}
	return ""
}

func (x *RegoSpec) GetPolicyFiles() []string {
	if x != nil {
		return x.PolicyFiles
	}
	return nil
}

func (x *RegoSpec) GetBundlePaths() []string {
	if x != nil {
		return x.BundlePaths
	}
	return nil
}

func (x *RegoSpec) GetBundleVerification() *BundleVerificationSpec {
	if x != nil {
		return x.BundleVerification
	}
	return nil
}

func (x *RegoSpec) GetSkipBundleVerification() bool {
	if x != nil {
		return x.SkipBundleVerification
	}
	return false
}

func (x *RegoSpec) GetEnablePrintStatements() bool {
	if x != nil {
		return x.EnablePrintStatements
	}
	return false
}

func (x *RegoSpec) GetShallowInlining() bool {
	if x != nil {
		return x.ShallowInlining
	}
	return false
}

func (x *RegoSpec) GetStrict() bool {
	if x != nil {
		return x.Strict
	}
	return false
}

func (x *RegoSpec) GetStrictBuiltinErrors() bool {
	if x != nil {
		return x.StrictBuiltinErrors
	}
	return false
}

func (x *RegoSpec) GetRoundTripper() *kernel.Reference {
	if x != nil {
		return x.RoundTripper
	}
	return nil
}

func (x *RegoSpec) GetHeader() map[string]string {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RegoSpec) GetStores() isRegoSpec_Stores {
	if x != nil {
		return x.Stores
	}
	return nil
}

func (x *RegoSpec) GetFileStore() *FileStore {
	if x != nil {
		if x, ok := x.Stores.(*RegoSpec_FileStore); ok {
			return x.FileStore
		}
	}
	return nil
}

func (x *RegoSpec) GetHTTPStore() *HTTPStore {
	if x != nil {
		if x, ok := x.Stores.(*RegoSpec_HTTPStore); ok {
			return x.HTTPStore
		}
	}
	return nil
}

type isRegoSpec_Stores interface {
	isRegoSpec_Stores()
}

type RegoSpec_FileStore struct {
	FileStore *FileStore `protobuf:"bytes,15,opt,name=FileStore,json=fileStore,proto3,oneof"`
}

type RegoSpec_HTTPStore struct {
	HTTPStore *HTTPStore `protobuf:"bytes,16,opt,name=HTTPStore,json=httpStore,proto3,oneof"`
}

func (*RegoSpec_FileStore) isRegoSpec_Stores() {}

func (*RegoSpec_HTTPStore) isRegoSpec_Stores() {}

type BundleVerificationSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [REQUIRED]
	// VerificationKeys is the list of verification keys
	// used for verifying bundles.
	// Default is not set.
	VerificationKeys []*VerificationKeySpec `protobuf:"bytes,1,rep,name=VerificationKeys,json=verificationKeys,proto3" json:"VerificationKeys,omitempty"`
	// [REQUIRED]
	// KeyID is the key id, or kid value of JWTs, used for validating bundles.
	// If set, bundles must be signed with the specified key.
	// At least a public key corresponding to this KeyID should be
	// confiured to the PublicKeys.
	// If not set, verification keys are looked up from PublicKeys
	// with the kid obtained from bundles.
	// Default is not set.
	KeyID string `protobuf:"bytes,2,opt,name=KeyID,json=keyID,proto3" json:"KeyID,omitempty"`
	// [OPTIONAL]
	// Scope is the scope of valid bundle.
	// If not set, scope value configured in the VerificationKeys
	// are used.
	// This value is optional but at least one of this field or
	// Scope in the VerificationKeys are required for verification.
	// Default is not set.
	Scope string `protobuf:"bytes,3,opt,name=Scope,json=scope,proto3" json:"Scope,omitempty"`
	// [OPTIONAL]
	// Excludes are files in the bundle to exclude during verification.
	// Default is not set.
	Excludes      []string `protobuf:"bytes,4,rep,name=Excludes,json=excludes,proto3" json:"Excludes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BundleVerificationSpec) Reset() {
	*x = BundleVerificationSpec{}
	mi := &file_app_v1_middleware_opa_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BundleVerificationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleVerificationSpec) ProtoMessage() {}

func (x *BundleVerificationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_opa_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleVerificationSpec.ProtoReflect.Descriptor instead.
func (*BundleVerificationSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_opa_proto_rawDescGZIP(), []int{3}
}

func (x *BundleVerificationSpec) GetVerificationKeys() []*VerificationKeySpec {
	if x != nil {
		return x.VerificationKeys
	}
	return nil
}

func (x *BundleVerificationSpec) GetKeyID() string {
	if x != nil {
		return x.KeyID
	}
	return ""
}

func (x *BundleVerificationSpec) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *BundleVerificationSpec) GetExcludes() []string {
	if x != nil {
		return x.Excludes
	}
	return nil
}

type VerificationKeySpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [REQUIRED]
	// KeyID is the key id, or kid value of JWTs, of the key.
	// Bundle verification keys are looked up by this id.
	// Verification will fail if no keys were found.
	// Default is not set.
	KeyID string `protobuf:"bytes,1,opt,name=KeyID,json=keyID,proto3" json:"KeyID,omitempty"`
	// [OPTIONAL]
	// Scope is the scope that this key is valid.
	// This value is overwritten by the value of BundleVerificationSpec.
	// Default is not set.
	Scope string `protobuf:"bytes,2,opt,name=Scope,json=scope,proto3" json:"Scope,omitempty"`
	// [OPTIONAL]
	// Algorithm is the signature algorith this key can be used for.
	// Supported algorithms are as follows.
	// "ES256", "ES384", "ES512"
	// "HS256", "HS384", "HS512"
	// "PS256", "PS384", "PS512"
	// "RS256", "RS384", "RS512"
	// If not set "RS256" is used.
	// Default is not set.
	Algorithm string `protobuf:"bytes,3,opt,name=Algorithm,json=algorithm,proto3" json:"Algorithm,omitempty"`
	// [REQUIRED]
	// KeyFile is the file path that contains key data
	// corresponging to the algorithm.
	// The file should contains common key for HS
	// and pem format public key for others.
	// For example, "/tmp/keys/foo_public.pem".
	// Default is not set.
	KeyFile       string `protobuf:"bytes,4,opt,name=KeyFile,json=keyFile,proto3" json:"KeyFile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerificationKeySpec) Reset() {
	*x = VerificationKeySpec{}
	mi := &file_app_v1_middleware_opa_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerificationKeySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationKeySpec) ProtoMessage() {}

func (x *VerificationKeySpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_opa_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationKeySpec.ProtoReflect.Descriptor instead.
func (*VerificationKeySpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_opa_proto_rawDescGZIP(), []int{4}
}

func (x *VerificationKeySpec) GetKeyID() string {
	if x != nil {
		return x.KeyID
	}
	return ""
}

func (x *VerificationKeySpec) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *VerificationKeySpec) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *VerificationKeySpec) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

type EnvDataSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// Vars is the list of environmental variable names
	// to make accessible from rego.
	// Values are available with "input.env.vars".
	// Default is not set.
	Vars []string `protobuf:"bytes,1,rep,name=Vars,json=vars,proto3" json:"Vars,omitempty"`
	// [OPTIONAL]
	// PID makes the Process ID available in regos.
	// The PID is available with "input.env.pid".
	// Default is [false].
	PID bool `protobuf:"varint,2,opt,name=PID,json=pid,proto3" json:"PID,omitempty"`
	// [OPTIONAL]
	// PPID makes the Parent Process ID available in regos.
	// The PPID is available with "input.env.ppid".
	// Default is [false].
	PPID bool `protobuf:"varint,3,opt,name=PPID,json=ppid,proto3" json:"PPID,omitempty"`
	// [OPTIONAL]
	// GID makes the Group ID available in regos.
	// The GID is available with "input.env.gid".
	// On Windows, -1.
	// Default is [false].
	GID bool `protobuf:"varint,4,opt,name=GID,json=gid,proto3" json:"GID,omitempty"`
	// [OPTIONAL]
	// UID makes the User ID available in regos.
	// The UID is available with "input.env.uid".
	// Default is [false].
	UID           bool `protobuf:"varint,5,opt,name=UID,json=uid,proto3" json:"UID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnvDataSpec) Reset() {
	*x = EnvDataSpec{}
	mi := &file_app_v1_middleware_opa_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvDataSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvDataSpec) ProtoMessage() {}

func (x *EnvDataSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_opa_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvDataSpec.ProtoReflect.Descriptor instead.
func (*EnvDataSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_opa_proto_rawDescGZIP(), []int{5}
}

func (x *EnvDataSpec) GetVars() []string {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *EnvDataSpec) GetPID() bool {
	if x != nil {
		return x.PID
	}
	return false
}

func (x *EnvDataSpec) GetPPID() bool {
	if x != nil {
		return x.PPID
	}
	return false
}

func (x *EnvDataSpec) GetGID() bool {
	if x != nil {
		return x.GID
	}
	return false
}

func (x *EnvDataSpec) GetUID() bool {
	if x != nil {
		return x.UID
	}
	return false
}

type FileStore struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [REQUIRED]
	// Path is the storage path and data file path paires.
	// Data file should go in the values and their paths in
	// a storage should go in the keys.
	// e.g. `"/authz": "data/authz/users.json"`.
	// File extension must be one of ".csv", ".json", ".yaml", ".yml".
	// Default is not set.
	Path map[string]string `protobuf:"bytes,1,rep,name=Path,json=path,proto3" json:"Path,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// [OPTIONAL]
	// Directory is the directory for OPA disk storage.
	// If set, the stored data is kept on the disk storage
	// under the specified directory rather than using
	// memory storage.
	// Note that each files are temporarily load on memory
	// of their entire data even using disk storage.
	// If not set or empty string, all data is stored on a meory storage.
	// See the following documentation for in-memory and disk storages.
	// https://pkg.go.dev/github.com/open-policy-agent/opa/storage/disk
	// https://pkg.go.dev/github.com/open-policy-agent/opa/storage/inmem
	// Default is not set.
	Directory     string `protobuf:"bytes,2,opt,name=Directory,json=directory,proto3" json:"Directory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileStore) Reset() {
	*x = FileStore{}
	mi := &file_app_v1_middleware_opa_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileStore) ProtoMessage() {}

func (x *FileStore) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_opa_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileStore.ProtoReflect.Descriptor instead.
func (*FileStore) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_opa_proto_rawDescGZIP(), []int{6}
}

func (x *FileStore) GetPath() map[string]string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *FileStore) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

type HTTPStore struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [REQUIRED]
	// Endpoint is the storage path and HTTP endpoint paires.
	// Endpoints should go in the values and their paths in
	// a storage should go in the keys.
	// e.g. `"/authz": "http://example.com/data/authz/users.json"`.
	// Response status code must be 200 OK.
	// Response content-type must be "application/" or "text/"
	// + one of "csv", "json", "yaml", "yml".
	// Default is not set.
	Endpoint map[string]string `protobuf:"bytes,1,rep,name=Endpoint,json=endpoint,proto3" json:"Endpoint,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// [OPTIONAL]
	// Directory is the directory for OPA disk storage.
	// If set, the stored data is kept on the disk storage
	// under the specified directory rather than using
	// memory storage.
	// Note that each files are temporarily load on memory
	// of their entire data even using disk storage.
	// If not set or empty string, all data is stored on a meory storage.
	// See the following documentation for in-memory and disk storages.
	// https://pkg.go.dev/github.com/open-policy-agent/opa/storage/disk
	// https://pkg.go.dev/github.com/open-policy-agent/opa/storage/inmem
	// Default is not set.
	Directory string `protobuf:"bytes,2,opt,name=Directory,json=directory,proto3" json:"Directory,omitempty"`
	// [OPTIONAL]
	// Partitions is the list of partitions for disk storage.
	// Partitions enables efficient data layout.
	// Partitions are use only for disk storage and not
	// used for in-memory storage.
	// See the disk storage description here
	// https://www.openpolicyagent.org/docs/latest/storage/
	// https://www.openpolicyagent.org/docs/latest/configuration/#disk-storage
	// Default is not set.
	Partitions    []string `protobuf:"bytes,3,rep,name=Partitions,json=partitions,proto3" json:"Partitions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPStore) Reset() {
	*x = HTTPStore{}
	mi := &file_app_v1_middleware_opa_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPStore) ProtoMessage() {}

func (x *HTTPStore) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_opa_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPStore.ProtoReflect.Descriptor instead.
func (*HTTPStore) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_opa_proto_rawDescGZIP(), []int{7}
}

func (x *HTTPStore) GetEndpoint() map[string]string {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *HTTPStore) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *HTTPStore) GetPartitions() []string {
	if x != nil {
		return x.Partitions
	}
	return nil
}

var File_app_v1_middleware_opa_proto protoreflect.FileDescriptor

var file_app_v1_middleware_opa_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2f, 0x6f, 0x70, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61,
	0x70, 0x70, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x01, 0x0a, 0x12, 0x4f, 0x50,
	0x41, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x12, 0x2d, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0x72, 0x08, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x2f, 0x76, 0x31, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xba,
	0x48, 0x16, 0x72, 0x14, 0x0a, 0x12, 0x4f, 0x50, 0x41, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x4d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2c,
	0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x04,
	0x53, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x50, 0x41, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x4d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x22, 0xab, 0x02, 0x0a, 0x16, 0x4f, 0x50, 0x41, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x06, 0x4c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06,
	0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x09, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0xba, 0x48, 0x15, 0x72, 0x13, 0x32, 0x11, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x2d, 0x5f, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x07, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x65, 0x6e, 0x76,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x05, 0x52, 0x65, 0x67, 0x6f, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x6f, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x72, 0x65, 0x67, 0x6f, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x22, 0xd3,
	0x05, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x0e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x0b,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x12, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x6b,
	0x69, 0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x6b, 0x69, 0x70,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x0c,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70,
	0x70, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x6f, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x09,
	0x48, 0x54, 0x54, 0x50, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x1a,
	0x39, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x16, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x47, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4b, 0x65, 0x79, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73,
	0x22, 0x79, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x6b, 0x0a, 0x0b, 0x45,
	0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x61,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x50, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x50, 0x50, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x70, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x37, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x68, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3,
	0x01, 0x0a, 0x09, 0x48, 0x54, 0x54, 0x50, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x08,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x6f, 0x6e, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2f, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x6f, 0x6e, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_app_v1_middleware_opa_proto_rawDescOnce sync.Once
	file_app_v1_middleware_opa_proto_rawDescData []byte
)

func file_app_v1_middleware_opa_proto_rawDescGZIP() []byte {
	file_app_v1_middleware_opa_proto_rawDescOnce.Do(func() {
		file_app_v1_middleware_opa_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_app_v1_middleware_opa_proto_rawDesc), len(file_app_v1_middleware_opa_proto_rawDesc)))
	})
	return file_app_v1_middleware_opa_proto_rawDescData
}

var file_app_v1_middleware_opa_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_app_v1_middleware_opa_proto_goTypes = []any{
	(*OPAAuthzMiddleware)(nil),     // 0: app.v1.OPAAuthzMiddleware
	(*OPAAuthzMiddlewareSpec)(nil), // 1: app.v1.OPAAuthzMiddlewareSpec
	(*RegoSpec)(nil),               // 2: app.v1.RegoSpec
	(*BundleVerificationSpec)(nil), // 3: app.v1.BundleVerificationSpec
	(*VerificationKeySpec)(nil),    // 4: app.v1.VerificationKeySpec
	(*EnvDataSpec)(nil),            // 5: app.v1.EnvDataSpec
	(*FileStore)(nil),              // 6: app.v1.FileStore
	(*HTTPStore)(nil),              // 7: app.v1.HTTPStore
	nil,                            // 8: app.v1.RegoSpec.HeaderEntry
	nil,                            // 9: app.v1.FileStore.PathEntry
	nil,                            // 10: app.v1.HTTPStore.EndpointEntry
	(*kernel.Metadata)(nil),        // 11: kernel.Metadata
	(*kernel.Reference)(nil),       // 12: kernel.Reference
}
var file_app_v1_middleware_opa_proto_depIdxs = []int32{
	11, // 0: app.v1.OPAAuthzMiddleware.Metadata:type_name -> kernel.Metadata
	1,  // 1: app.v1.OPAAuthzMiddleware.Spec:type_name -> app.v1.OPAAuthzMiddlewareSpec
	12, // 2: app.v1.OPAAuthzMiddlewareSpec.Logger:type_name -> kernel.Reference
	12, // 3: app.v1.OPAAuthzMiddlewareSpec.ErrorHandler:type_name -> kernel.Reference
	5,  // 4: app.v1.OPAAuthzMiddlewareSpec.EnvData:type_name -> app.v1.EnvDataSpec
	2,  // 5: app.v1.OPAAuthzMiddlewareSpec.Regos:type_name -> app.v1.RegoSpec
	3,  // 6: app.v1.RegoSpec.BundleVerification:type_name -> app.v1.BundleVerificationSpec
	12, // 7: app.v1.RegoSpec.RoundTripper:type_name -> kernel.Reference
	8,  // 8: app.v1.RegoSpec.Header:type_name -> app.v1.RegoSpec.HeaderEntry
	6,  // 9: app.v1.RegoSpec.FileStore:type_name -> app.v1.FileStore
	7,  // 10: app.v1.RegoSpec.HTTPStore:type_name -> app.v1.HTTPStore
	4,  // 11: app.v1.BundleVerificationSpec.VerificationKeys:type_name -> app.v1.VerificationKeySpec
	9,  // 12: app.v1.FileStore.Path:type_name -> app.v1.FileStore.PathEntry
	10, // 13: app.v1.HTTPStore.Endpoint:type_name -> app.v1.HTTPStore.EndpointEntry
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_app_v1_middleware_opa_proto_init() }
func file_app_v1_middleware_opa_proto_init() {
	if File_app_v1_middleware_opa_proto != nil {
		return
	}
	file_app_v1_middleware_opa_proto_msgTypes[2].OneofWrappers = []any{
		(*RegoSpec_FileStore)(nil),
		(*RegoSpec_HTTPStore)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_app_v1_middleware_opa_proto_rawDesc), len(file_app_v1_middleware_opa_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_app_v1_middleware_opa_proto_goTypes,
		DependencyIndexes: file_app_v1_middleware_opa_proto_depIdxs,
		MessageInfos:      file_app_v1_middleware_opa_proto_msgTypes,
	}.Build()
	File_app_v1_middleware_opa_proto = out.File
	file_app_v1_middleware_opa_proto_goTypes = nil
	file_app_v1_middleware_opa_proto_depIdxs = nil
}
