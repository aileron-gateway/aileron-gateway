// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.0
// source: app/v1/middleware/soaprest.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kernel "github.com/aileron-gateway/aileron-gateway/apis/kernel"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SOAPRESTMiddleware is the definition of the SOAPRESTMiddleware object.
// SOAPRESTMiddleware implements interface of the middleware.
type SOAPRESTMiddleware struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [REQUIRED]
	// APIVersion is the defined version of the middleware.
	// This value must be "app/v1".
	APIVersion string `protobuf:"bytes,1,opt,name=APIVersion,json=apiVersion,proto3" json:"APIVersion,omitempty"`
	// [REQUIRED]
	// Kind is the kind of this object.
	// This value must be "SOAPRESTMiddleware".
	Kind string `protobuf:"bytes,2,opt,name=Kind,json=kind,proto3" json:"Kind,omitempty"`
	// [OPTIONAL]
	// Metadata is the metadata of the http logger object.
	// If not set, both name and namespace in the metadata
	// are treated as "default".
	Metadata *kernel.Metadata `protobuf:"bytes,3,opt,name=Metadata,json=metadata,proto3" json:"Metadata,omitempty"`
	// [OPTIONAL]
	// Spec is the specification of the middleware.
	// Default values are used when nothing is set.
	Spec          *SOAPRESTMiddlewareSpec `protobuf:"bytes,4,opt,name=Spec,json=spec,proto3" json:"Spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SOAPRESTMiddleware) Reset() {
	*x = SOAPRESTMiddleware{}
	mi := &file_app_v1_middleware_soaprest_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SOAPRESTMiddleware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SOAPRESTMiddleware) ProtoMessage() {}

func (x *SOAPRESTMiddleware) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_soaprest_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SOAPRESTMiddleware.ProtoReflect.Descriptor instead.
func (*SOAPRESTMiddleware) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_soaprest_proto_rawDescGZIP(), []int{0}
}

func (x *SOAPRESTMiddleware) GetAPIVersion() string {
	if x != nil {
		return x.APIVersion
	}
	return ""
}

func (x *SOAPRESTMiddleware) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SOAPRESTMiddleware) GetMetadata() *kernel.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SOAPRESTMiddleware) GetSpec() *SOAPRESTMiddlewareSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// SOAPRESTMiddlewareSpec is the status of the SOAPRESTMiddleware object.
// Values are managed by the application and therefore should not be set by users.
type SOAPRESTMiddlewareSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [REQUIRED]
	// Matcher is a matcher which matches to defined patterns.
	// Default is not set.
	Matcher *kernel.MatcherSpec `protobuf:"bytes,1,opt,name=Matcher,json=matcher,proto3" json:"Matcher,omitempty"`
	// [OPTIONAL]
	// ErrorHandler is the reference to a ErrorHandler object.
	// Referred object must implement ErrorHandler interface.
	// Default error handler is used when not set.
	ErrorHandler *kernel.Reference `protobuf:"bytes,2,opt,name=ErrorHandler,json=errorHandler,proto3" json:"ErrorHandler,omitempty"`
	// [OPTIONAL]
	// Method is the conversion type between XML and JSON.
	// Default is [Custom].
	//
	// Types that are valid to be assigned to Method:
	//
	//	*SOAPRESTMiddlewareSpec_SimpleMethodSpec
	//	*SOAPRESTMiddlewareSpec_RayfishMethodSpec
	//	*SOAPRESTMiddlewareSpec_BadgerfishMethodSpec
	Method        isSOAPRESTMiddlewareSpec_Method `protobuf_oneof:"Method"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SOAPRESTMiddlewareSpec) Reset() {
	*x = SOAPRESTMiddlewareSpec{}
	mi := &file_app_v1_middleware_soaprest_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SOAPRESTMiddlewareSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SOAPRESTMiddlewareSpec) ProtoMessage() {}

func (x *SOAPRESTMiddlewareSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_soaprest_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SOAPRESTMiddlewareSpec.ProtoReflect.Descriptor instead.
func (*SOAPRESTMiddlewareSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_soaprest_proto_rawDescGZIP(), []int{1}
}

func (x *SOAPRESTMiddlewareSpec) GetMatcher() *kernel.MatcherSpec {
	if x != nil {
		return x.Matcher
	}
	return nil
}

func (x *SOAPRESTMiddlewareSpec) GetErrorHandler() *kernel.Reference {
	if x != nil {
		return x.ErrorHandler
	}
	return nil
}

func (x *SOAPRESTMiddlewareSpec) GetMethod() isSOAPRESTMiddlewareSpec_Method {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *SOAPRESTMiddlewareSpec) GetSimpleMethodSpec() *SimpleMethodSpec {
	if x != nil {
		if x, ok := x.Method.(*SOAPRESTMiddlewareSpec_SimpleMethodSpec); ok {
			return x.SimpleMethodSpec
		}
	}
	return nil
}

func (x *SOAPRESTMiddlewareSpec) GetRayfishMethodSpec() *RayfishMethodSpec {
	if x != nil {
		if x, ok := x.Method.(*SOAPRESTMiddlewareSpec_RayfishMethodSpec); ok {
			return x.RayfishMethodSpec
		}
	}
	return nil
}

func (x *SOAPRESTMiddlewareSpec) GetBadgerfishMethodSpec() *BadgerfishMethodSpec {
	if x != nil {
		if x, ok := x.Method.(*SOAPRESTMiddlewareSpec_BadgerfishMethodSpec); ok {
			return x.BadgerfishMethodSpec
		}
	}
	return nil
}

type isSOAPRESTMiddlewareSpec_Method interface {
	isSOAPRESTMiddlewareSpec_Method()
}

type SOAPRESTMiddlewareSpec_SimpleMethodSpec struct {
	SimpleMethodSpec *SimpleMethodSpec `protobuf:"bytes,3,opt,name=SimpleMethodSpec,json=simpleMethodSpec,proto3,oneof"`
}

type SOAPRESTMiddlewareSpec_RayfishMethodSpec struct {
	RayfishMethodSpec *RayfishMethodSpec `protobuf:"bytes,4,opt,name=RayfishMethodSpec,json=rayfishMethodSpec,proto3,oneof"`
}

type SOAPRESTMiddlewareSpec_BadgerfishMethodSpec struct {
	BadgerfishMethodSpec *BadgerfishMethodSpec `protobuf:"bytes,5,opt,name=BadgerfishMethodSpec,json=badgerfishMethodSpec,proto3,oneof"`
}

func (*SOAPRESTMiddlewareSpec_SimpleMethodSpec) isSOAPRESTMiddlewareSpec_Method() {}

func (*SOAPRESTMiddlewareSpec_RayfishMethodSpec) isSOAPRESTMiddlewareSpec_Method() {}

func (*SOAPRESTMiddlewareSpec_BadgerfishMethodSpec) isSOAPRESTMiddlewareSpec_Method() {}

type SimpleMethodSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// TextKey is the json key name to store content of XML elements.
	// TextKey should not be empty.
	// Default is "$".
	TextKey string `protobuf:"bytes,1,opt,name=TextKey,json=textKey,proto3" json:"TextKey,omitempty"`
	// [OPTIONAL]
	// AttrPrefix is the json key name prefix for XML attributes.
	// Attribute names are stored in a json with this prefix.
	// For example, XML attribute foo="" is converted into {"@foo": "bar"}
	// AttrPrefix should not be empty.
	// Default is "@".
	AttrPrefix string `protobuf:"bytes,2,opt,name=AttrPrefix,json=attrPrefix,proto3" json:"AttrPrefix,omitempty"`
	// [OPTIONAL]
	// NamespaceSep is the name space separator.
	// Namespace separator ":" in XML element names are converted into the specified string.
	// Note that, general RayFish convention discard namespace information but this converter keep it.
	// NamespaceSep should not be empty.
	// Default is ":".
	NamespaceSep string `protobuf:"bytes,3,opt,name=NamespaceSep,json=namespaceSep,proto3" json:"NamespaceSep,omitempty"`
	// [OPTIONAL]
	// TrimSpace if true, trims unicode space from xml text.
	// See the [unicode.IsSpace] for space definition.
	// This option is used in XML to JSON conversion.
	// Default is false.
	TrimSpace bool `protobuf:"varint,4,opt,name=TrimSpace,json=trimSpace,proto3" json:"TrimSpace,omitempty"`
	// [OPTIONAL]
	// PreferShort if true, use short format.
	// For XML to JSON conversion, if content has no attribute and no child elements,
	// JSON will be {"key": "value"} rather than {"key": {"$": "value"}}.
	// For JSON to XML conversion, JSON can always use {"key": "value"}
	// and {"key": {"$": "value"}} expression without this configuration.
	// This option is used in XML to JSON conversion.
	// Default is false.
	PreferShort   bool `protobuf:"varint,5,opt,name=PreferShort,json=preferShort,proto3" json:"PreferShort,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimpleMethodSpec) Reset() {
	*x = SimpleMethodSpec{}
	mi := &file_app_v1_middleware_soaprest_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleMethodSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleMethodSpec) ProtoMessage() {}

func (x *SimpleMethodSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_soaprest_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleMethodSpec.ProtoReflect.Descriptor instead.
func (*SimpleMethodSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_soaprest_proto_rawDescGZIP(), []int{2}
}

func (x *SimpleMethodSpec) GetTextKey() string {
	if x != nil {
		return x.TextKey
	}
	return ""
}

func (x *SimpleMethodSpec) GetAttrPrefix() string {
	if x != nil {
		return x.AttrPrefix
	}
	return ""
}

func (x *SimpleMethodSpec) GetNamespaceSep() string {
	if x != nil {
		return x.NamespaceSep
	}
	return ""
}

func (x *SimpleMethodSpec) GetTrimSpace() bool {
	if x != nil {
		return x.TrimSpace
	}
	return false
}

func (x *SimpleMethodSpec) GetPreferShort() bool {
	if x != nil {
		return x.PreferShort
	}
	return false
}

type RayfishMethodSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// NameKeys is the json key name to store XML element names.
	// NameKey should not be empty.
	// Default is "#name".
	NameKey string `protobuf:"bytes,1,opt,name=NameKey,json=nameKey,proto3" json:"NameKey,omitempty"`
	// [OPTIONAL]
	// TextKey is the json key name to store content of XML elements.
	// Typically "#text" is used.
	// TextKey should not be empty.
	// Default is "#text".
	TextKey string `protobuf:"bytes,2,opt,name=TextKey,json=textKey,proto3" json:"TextKey,omitempty"`
	// [OPTIONAL]
	// ChildrenKey is the json key name to store attributes of a element and its child elements.
	// ChildrenKey should not be empty.
	// Default is "#children".
	ChildrenKey string `protobuf:"bytes,3,opt,name=ChildrenKey,json=childrenKey,proto3" json:"ChildrenKey,omitempty"`
	// [OPTIONAL]
	// AttrPrefix is the json key name prefix for XML attributes.
	// Attribute names are stored in a json with this prefix.
	// For example, XML attribute foo="" is converted into {"@foo": "bar"}
	// AttrPrefix should not be empty.
	// Default is "@".
	AttrPrefix string `protobuf:"bytes,4,opt,name=AttrPrefix,json=attrPrefix,proto3" json:"AttrPrefix,omitempty"`
	// [OPTIONAL]
	// NamespaceSep is the name space separator.
	// Namespace separator ":" in XML element names are converted into the specified string.
	// Note that, general RayFish convention discard namespace information but this converter keep it.
	// NamespaceSep should not be empty.
	// Default is ":".
	NamespaceSep string `protobuf:"bytes,5,opt,name=NamespaceSep,json=namespaceSep,proto3" json:"NamespaceSep,omitempty"`
	// [OPTIONAL]
	// TrimSpace if true, trims unicode space from xml text.
	// See the [unicode.IsSpace] for space definition.
	// This option is used in XML to JSON conversion.
	// Default is false.
	TrimSpace     bool `protobuf:"varint,6,opt,name=TrimSpace,json=trimSpace,proto3" json:"TrimSpace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RayfishMethodSpec) Reset() {
	*x = RayfishMethodSpec{}
	mi := &file_app_v1_middleware_soaprest_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RayfishMethodSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RayfishMethodSpec) ProtoMessage() {}

func (x *RayfishMethodSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_soaprest_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RayfishMethodSpec.ProtoReflect.Descriptor instead.
func (*RayfishMethodSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_soaprest_proto_rawDescGZIP(), []int{3}
}

func (x *RayfishMethodSpec) GetNameKey() string {
	if x != nil {
		return x.NameKey
	}
	return ""
}

func (x *RayfishMethodSpec) GetTextKey() string {
	if x != nil {
		return x.TextKey
	}
	return ""
}

func (x *RayfishMethodSpec) GetChildrenKey() string {
	if x != nil {
		return x.ChildrenKey
	}
	return ""
}

func (x *RayfishMethodSpec) GetAttrPrefix() string {
	if x != nil {
		return x.AttrPrefix
	}
	return ""
}

func (x *RayfishMethodSpec) GetNamespaceSep() string {
	if x != nil {
		return x.NamespaceSep
	}
	return ""
}

func (x *RayfishMethodSpec) GetTrimSpace() bool {
	if x != nil {
		return x.TrimSpace
	}
	return false
}

type BadgerfishMethodSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// TextKey is the json key name to store content of XML elements.
	// TextKey should not be empty.
	// Default is "#text".
	TextKey string `protobuf:"bytes,1,opt,name=TextKey,json=textKey,proto3" json:"TextKey,omitempty"`
	// [OPTIONAL]
	// AttrPrefix is the json key name prefix for XML attributes.
	// Attribute names are stored in a json with this prefix.
	// For example, XML attribute foo="" is converted into {"@foo": "bar"}
	// AttrPrefix should not be empty.
	// Default is "@".
	AttrPrefix string `protobuf:"bytes,2,opt,name=AttrPrefix,json=attrPrefix,proto3" json:"AttrPrefix,omitempty"`
	// [OPTIONAL]
	// NamespaceSep is the name space separator.
	// Namespace separator ":" in XML element names are converted into the specified string.
	// Note that, general RayFish convention discard namespace information but this converter keep it.
	// NamespaceSep should not be empty.
	// Default is ":".
	NamespaceSep string `protobuf:"bytes,3,opt,name=NamespaceSep,json=namespaceSep,proto3" json:"NamespaceSep,omitempty"`
	// [OPTIONAL]
	// TrimSpace if true, trims unicode space from xml text.
	// See the [unicode.IsSpace] for space definition.
	// This option is used in XML to JSON conversion.
	// Default is false.
	TrimSpace     bool `protobuf:"varint,4,opt,name=TrimSpace,json=trimSpace,proto3" json:"TrimSpace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BadgerfishMethodSpec) Reset() {
	*x = BadgerfishMethodSpec{}
	mi := &file_app_v1_middleware_soaprest_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BadgerfishMethodSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgerfishMethodSpec) ProtoMessage() {}

func (x *BadgerfishMethodSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_soaprest_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgerfishMethodSpec.ProtoReflect.Descriptor instead.
func (*BadgerfishMethodSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_soaprest_proto_rawDescGZIP(), []int{4}
}

func (x *BadgerfishMethodSpec) GetTextKey() string {
	if x != nil {
		return x.TextKey
	}
	return ""
}

func (x *BadgerfishMethodSpec) GetAttrPrefix() string {
	if x != nil {
		return x.AttrPrefix
	}
	return ""
}

func (x *BadgerfishMethodSpec) GetNamespaceSep() string {
	if x != nil {
		return x.NamespaceSep
	}
	return ""
}

func (x *BadgerfishMethodSpec) GetTrimSpace() bool {
	if x != nil {
		return x.TrimSpace
	}
	return false
}

var File_app_v1_middleware_soaprest_proto protoreflect.FileDescriptor

var file_app_v1_middleware_soaprest_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2f, 0x73, 0x6f, 0x61, 0x70, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x74, 0x78, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x01, 0x0a, 0x12, 0x53, 0x4f, 0x41, 0x50, 0x52, 0x45, 0x53,
	0x54, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x41,
	0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0xba, 0x48, 0x0a, 0x72, 0x08, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x31, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x4b, 0x69,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xba, 0x48, 0x16, 0x72, 0x14, 0x0a,
	0x12, 0x53, 0x4f, 0x41, 0x50, 0x52, 0x45, 0x53, 0x54, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x4f, 0x41, 0x50, 0x52, 0x45, 0x53, 0x54, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xf7, 0x02, 0x0a, 0x16,
	0x53, 0x4f, 0x41, 0x50, 0x52, 0x45, 0x53, 0x54, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x35, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x10, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x10, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x49, 0x0a, 0x11,
	0x52, 0x61, 0x79, 0x66, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x70, 0x65,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x79, 0x66, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x48, 0x00, 0x52, 0x11, 0x72, 0x61, 0x79, 0x66, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x52, 0x0a, 0x14, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x72, 0x66, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x72, 0x66, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x14, 0x62, 0x61, 0x64, 0x67, 0x65, 0x72, 0x66, 0x69, 0x73,
	0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x42, 0x08, 0x0a, 0x06, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x10, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x65,
	0x78, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x78,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x69, 0x6d,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x72, 0x69,
	0x6d, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x11, 0x52, 0x61, 0x79,
	0x66, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18,
	0x0a, 0x07, 0x4e, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x65, 0x78, 0x74,
	0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x78, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x4b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x65, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x69, 0x6d,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x72, 0x69,
	0x6d, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x72, 0x66, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x18, 0x0a, 0x07, 0x54, 0x65, 0x78, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x65, 0x78, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x74, 0x74,
	0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x74, 0x72, 0x69, 0x6d, 0x53, 0x70, 0x61, 0x63, 0x65, 0x42, 0x38, 0x5a, 0x36, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x6f,
	0x6e, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x6f,
	0x6e, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61,
	0x70, 0x70, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_app_v1_middleware_soaprest_proto_rawDescOnce sync.Once
	file_app_v1_middleware_soaprest_proto_rawDescData []byte
)

func file_app_v1_middleware_soaprest_proto_rawDescGZIP() []byte {
	file_app_v1_middleware_soaprest_proto_rawDescOnce.Do(func() {
		file_app_v1_middleware_soaprest_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_app_v1_middleware_soaprest_proto_rawDesc), len(file_app_v1_middleware_soaprest_proto_rawDesc)))
	})
	return file_app_v1_middleware_soaprest_proto_rawDescData
}

var file_app_v1_middleware_soaprest_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_app_v1_middleware_soaprest_proto_goTypes = []any{
	(*SOAPRESTMiddleware)(nil),     // 0: app.v1.SOAPRESTMiddleware
	(*SOAPRESTMiddlewareSpec)(nil), // 1: app.v1.SOAPRESTMiddlewareSpec
	(*SimpleMethodSpec)(nil),       // 2: app.v1.SimpleMethodSpec
	(*RayfishMethodSpec)(nil),      // 3: app.v1.RayfishMethodSpec
	(*BadgerfishMethodSpec)(nil),   // 4: app.v1.BadgerfishMethodSpec
	(*kernel.Metadata)(nil),        // 5: kernel.Metadata
	(*kernel.MatcherSpec)(nil),     // 6: kernel.MatcherSpec
	(*kernel.Reference)(nil),       // 7: kernel.Reference
}
var file_app_v1_middleware_soaprest_proto_depIdxs = []int32{
	5, // 0: app.v1.SOAPRESTMiddleware.Metadata:type_name -> kernel.Metadata
	1, // 1: app.v1.SOAPRESTMiddleware.Spec:type_name -> app.v1.SOAPRESTMiddlewareSpec
	6, // 2: app.v1.SOAPRESTMiddlewareSpec.Matcher:type_name -> kernel.MatcherSpec
	7, // 3: app.v1.SOAPRESTMiddlewareSpec.ErrorHandler:type_name -> kernel.Reference
	2, // 4: app.v1.SOAPRESTMiddlewareSpec.SimpleMethodSpec:type_name -> app.v1.SimpleMethodSpec
	3, // 5: app.v1.SOAPRESTMiddlewareSpec.RayfishMethodSpec:type_name -> app.v1.RayfishMethodSpec
	4, // 6: app.v1.SOAPRESTMiddlewareSpec.BadgerfishMethodSpec:type_name -> app.v1.BadgerfishMethodSpec
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_app_v1_middleware_soaprest_proto_init() }
func file_app_v1_middleware_soaprest_proto_init() {
	if File_app_v1_middleware_soaprest_proto != nil {
		return
	}
	file_app_v1_middleware_soaprest_proto_msgTypes[1].OneofWrappers = []any{
		(*SOAPRESTMiddlewareSpec_SimpleMethodSpec)(nil),
		(*SOAPRESTMiddlewareSpec_RayfishMethodSpec)(nil),
		(*SOAPRESTMiddlewareSpec_BadgerfishMethodSpec)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_app_v1_middleware_soaprest_proto_rawDesc), len(file_app_v1_middleware_soaprest_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_app_v1_middleware_soaprest_proto_goTypes,
		DependencyIndexes: file_app_v1_middleware_soaprest_proto_depIdxs,
		MessageInfos:      file_app_v1_middleware_soaprest_proto_msgTypes,
	}.Build()
	File_app_v1_middleware_soaprest_proto = out.File
	file_app_v1_middleware_soaprest_proto_goTypes = nil
	file_app_v1_middleware_soaprest_proto_depIdxs = nil
}
