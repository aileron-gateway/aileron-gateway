// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.0
// source: app/v1/middleware/soaprest.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kernel "github.com/aileron-gateway/aileron-gateway/apis/kernel"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SOAPRESTMiddleware is the definition of the SOAPRESTMiddleware object.
// SOAPRESTMiddleware implements interface of the middleware.
type SOAPRESTMiddleware struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [REQUIRED]
	// APIVersion is the defined version of the middleware.
	// This value must be "app/v1".
	APIVersion string `protobuf:"bytes,1,opt,name=APIVersion,json=apiVersion,proto3" json:"APIVersion,omitempty"`
	// [REQUIRED]
	// Kind is the kind of this object.
	// This value must be "SOAPRESTMiddleware".
	Kind string `protobuf:"bytes,2,opt,name=Kind,json=kind,proto3" json:"Kind,omitempty"`
	// [OPTIONAL]
	// Metadata is the metadata of the http logger object.
	// If not set, both name and namespace in the metadata
	// are treated as "default".
	Metadata *kernel.Metadata `protobuf:"bytes,3,opt,name=Metadata,json=metadata,proto3" json:"Metadata,omitempty"`
	// [OPTIONAL]
	// Spec is the specification of the middleware.
	// Default values are used when nothing is set.
	Spec          *SOAPRESTMiddlewareSpec `protobuf:"bytes,4,opt,name=Spec,json=spec,proto3" json:"Spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SOAPRESTMiddleware) Reset() {
	*x = SOAPRESTMiddleware{}
	mi := &file_app_v1_middleware_soaprest_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SOAPRESTMiddleware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SOAPRESTMiddleware) ProtoMessage() {}

func (x *SOAPRESTMiddleware) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_soaprest_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SOAPRESTMiddleware.ProtoReflect.Descriptor instead.
func (*SOAPRESTMiddleware) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_soaprest_proto_rawDescGZIP(), []int{0}
}

func (x *SOAPRESTMiddleware) GetAPIVersion() string {
	if x != nil {
		return x.APIVersion
	}
	return ""
}

func (x *SOAPRESTMiddleware) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SOAPRESTMiddleware) GetMetadata() *kernel.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SOAPRESTMiddleware) GetSpec() *SOAPRESTMiddlewareSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// SOAPRESTMiddlewareSpec is the status of the SOAPRESTMiddleware object.
// Values are managed by the application and therefore should not be set by users.
type SOAPRESTMiddlewareSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// ErrorHandler is the reference to a ErrorHandler object.
	// Referred object must implement ErrorHandler interface.
	// Default error handler is used when not set.
	ErrorHandler *kernel.Reference `protobuf:"bytes,1,opt,name=ErrorHandler,json=errorHandler,proto3" json:"ErrorHandler,omitempty"`
	// [OPTIONAL]
	// Rules is the conversion ruleset.
	// Default is [Simple].
	//
	// Types that are valid to be assigned to Rules:
	//
	//	*SOAPRESTMiddlewareSpec_Simple
	//	*SOAPRESTMiddlewareSpec_Rayfish
	//	*SOAPRESTMiddlewareSpec_Badgerfish
	Rules         isSOAPRESTMiddlewareSpec_Rules `protobuf_oneof:"Rules"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SOAPRESTMiddlewareSpec) Reset() {
	*x = SOAPRESTMiddlewareSpec{}
	mi := &file_app_v1_middleware_soaprest_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SOAPRESTMiddlewareSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SOAPRESTMiddlewareSpec) ProtoMessage() {}

func (x *SOAPRESTMiddlewareSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_soaprest_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SOAPRESTMiddlewareSpec.ProtoReflect.Descriptor instead.
func (*SOAPRESTMiddlewareSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_soaprest_proto_rawDescGZIP(), []int{1}
}

func (x *SOAPRESTMiddlewareSpec) GetErrorHandler() *kernel.Reference {
	if x != nil {
		return x.ErrorHandler
	}
	return nil
}

func (x *SOAPRESTMiddlewareSpec) GetRules() isSOAPRESTMiddlewareSpec_Rules {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *SOAPRESTMiddlewareSpec) GetSimple() *SimpleSpec {
	if x != nil {
		if x, ok := x.Rules.(*SOAPRESTMiddlewareSpec_Simple); ok {
			return x.Simple
		}
	}
	return nil
}

func (x *SOAPRESTMiddlewareSpec) GetRayfish() *RayfishSpec {
	if x != nil {
		if x, ok := x.Rules.(*SOAPRESTMiddlewareSpec_Rayfish); ok {
			return x.Rayfish
		}
	}
	return nil
}

func (x *SOAPRESTMiddlewareSpec) GetBadgerfish() *BadgerfishSpec {
	if x != nil {
		if x, ok := x.Rules.(*SOAPRESTMiddlewareSpec_Badgerfish); ok {
			return x.Badgerfish
		}
	}
	return nil
}

type isSOAPRESTMiddlewareSpec_Rules interface {
	isSOAPRESTMiddlewareSpec_Rules()
}

type SOAPRESTMiddlewareSpec_Simple struct {
	Simple *SimpleSpec `protobuf:"bytes,2,opt,name=Simple,json=simple,proto3,oneof"`
}

type SOAPRESTMiddlewareSpec_Rayfish struct {
	Rayfish *RayfishSpec `protobuf:"bytes,3,opt,name=Rayfish,json=rayfish,proto3,oneof"`
}

type SOAPRESTMiddlewareSpec_Badgerfish struct {
	Badgerfish *BadgerfishSpec `protobuf:"bytes,4,opt,name=Badgerfish,json=badgerfish,proto3,oneof"`
}

func (*SOAPRESTMiddlewareSpec_Simple) isSOAPRESTMiddlewareSpec_Rules() {}

func (*SOAPRESTMiddlewareSpec_Rayfish) isSOAPRESTMiddlewareSpec_Rules() {}

func (*SOAPRESTMiddlewareSpec_Badgerfish) isSOAPRESTMiddlewareSpec_Rules() {}

type SimpleSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// TextKey is the json key name to store content of XML elements.
	// TextKey should not be empty.
	// Default is "$".
	TextKey string `protobuf:"bytes,1,opt,name=TextKey,json=textKey,proto3" json:"TextKey,omitempty"`
	// [OPTIONAL]
	// AttrPrefix is the json key name prefix for XML attributes.
	// Attribute names are stored in a json with this prefix.
	// For example, XML attribute foo="" is converted into {"@foo": "bar"}
	// AttrPrefix should not be empty.
	// Default is "@".
	AttrPrefix string `protobuf:"bytes,2,opt,name=AttrPrefix,json=attrPrefix,proto3" json:"AttrPrefix,omitempty"`
	// [OPTIONAL]
	// NamespaceSep is the name space separator.
	// Namespace separator ":" in XML element names are converted into the specified string.
	// Note that, general RayFish convention discard namespace information but this converter keep it.
	// NamespaceSep should not be empty.
	// Default is ":".
	NamespaceSep string `protobuf:"bytes,3,opt,name=NamespaceSep,json=namespaceSep,proto3" json:"NamespaceSep,omitempty"`
	// [OPTIONAL]
	// TrimSpace if true, trims unicode space from xml text.
	// See the [unicode.IsSpace] for space definition.
	// This option is used in XML to JSON conversion.
	// Default is false.
	TrimSpace bool `protobuf:"varint,4,opt,name=TrimSpace,json=trimSpace,proto3" json:"TrimSpace,omitempty"`
	// [OPTIONAL]
	// PreferShort if true, use short format.
	// For XML to JSON conversion, if content has no attribute and no child elements,
	// JSON will be {"key": "value"} rather than {"key": {"$": "value"}}.
	// For JSON to XML conversion, JSON can always use {"key": "value"}
	// and {"key": {"$": "value"}} expression without this configuration.
	// This option is used in XML to JSON conversion.
	// Default is false.
	PreferShort   bool `protobuf:"varint,5,opt,name=PreferShort,json=preferShort,proto3" json:"PreferShort,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimpleSpec) Reset() {
	*x = SimpleSpec{}
	mi := &file_app_v1_middleware_soaprest_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleSpec) ProtoMessage() {}

func (x *SimpleSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_soaprest_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleSpec.ProtoReflect.Descriptor instead.
func (*SimpleSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_soaprest_proto_rawDescGZIP(), []int{2}
}

func (x *SimpleSpec) GetTextKey() string {
	if x != nil {
		return x.TextKey
	}
	return ""
}

func (x *SimpleSpec) GetAttrPrefix() string {
	if x != nil {
		return x.AttrPrefix
	}
	return ""
}

func (x *SimpleSpec) GetNamespaceSep() string {
	if x != nil {
		return x.NamespaceSep
	}
	return ""
}

func (x *SimpleSpec) GetTrimSpace() bool {
	if x != nil {
		return x.TrimSpace
	}
	return false
}

func (x *SimpleSpec) GetPreferShort() bool {
	if x != nil {
		return x.PreferShort
	}
	return false
}

type RayfishSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// NameKeys is the json key name to store XML element names.
	// NameKey should not be empty.
	// Default is "#name".
	NameKey string `protobuf:"bytes,1,opt,name=NameKey,json=nameKey,proto3" json:"NameKey,omitempty"`
	// [OPTIONAL]
	// TextKey is the json key name to store content of XML elements.
	// Typically "#text" is used.
	// TextKey should not be empty.
	// Default is "#text".
	TextKey string `protobuf:"bytes,2,opt,name=TextKey,json=textKey,proto3" json:"TextKey,omitempty"`
	// [OPTIONAL]
	// ChildrenKey is the json key name to store attributes of a element and its child elements.
	// ChildrenKey should not be empty.
	// Default is "#children".
	ChildrenKey string `protobuf:"bytes,3,opt,name=ChildrenKey,json=childrenKey,proto3" json:"ChildrenKey,omitempty"`
	// [OPTIONAL]
	// AttrPrefix is the json key name prefix for XML attributes.
	// Attribute names are stored in a json with this prefix.
	// For example, XML attribute foo="" is converted into {"@foo": "bar"}
	// AttrPrefix should not be empty.
	// Default is "@".
	AttrPrefix string `protobuf:"bytes,4,opt,name=AttrPrefix,json=attrPrefix,proto3" json:"AttrPrefix,omitempty"`
	// [OPTIONAL]
	// NamespaceSep is the name space separator.
	// Namespace separator ":" in XML element names are converted into the specified string.
	// Note that, general RayFish convention discard namespace information but this converter keep it.
	// NamespaceSep should not be empty.
	// Default is ":".
	NamespaceSep string `protobuf:"bytes,5,opt,name=NamespaceSep,json=namespaceSep,proto3" json:"NamespaceSep,omitempty"`
	// [OPTIONAL]
	// TrimSpace if true, trims unicode space from xml text.
	// See the [unicode.IsSpace] for space definition.
	// This option is used in XML to JSON conversion.
	// Default is false.
	TrimSpace     bool `protobuf:"varint,6,opt,name=TrimSpace,json=trimSpace,proto3" json:"TrimSpace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RayfishSpec) Reset() {
	*x = RayfishSpec{}
	mi := &file_app_v1_middleware_soaprest_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RayfishSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RayfishSpec) ProtoMessage() {}

func (x *RayfishSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_soaprest_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RayfishSpec.ProtoReflect.Descriptor instead.
func (*RayfishSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_soaprest_proto_rawDescGZIP(), []int{3}
}

func (x *RayfishSpec) GetNameKey() string {
	if x != nil {
		return x.NameKey
	}
	return ""
}

func (x *RayfishSpec) GetTextKey() string {
	if x != nil {
		return x.TextKey
	}
	return ""
}

func (x *RayfishSpec) GetChildrenKey() string {
	if x != nil {
		return x.ChildrenKey
	}
	return ""
}

func (x *RayfishSpec) GetAttrPrefix() string {
	if x != nil {
		return x.AttrPrefix
	}
	return ""
}

func (x *RayfishSpec) GetNamespaceSep() string {
	if x != nil {
		return x.NamespaceSep
	}
	return ""
}

func (x *RayfishSpec) GetTrimSpace() bool {
	if x != nil {
		return x.TrimSpace
	}
	return false
}

type BadgerfishSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// TextKey is the json key name to store content of XML elements.
	// TextKey should not be empty.
	// Default is "#text".
	TextKey string `protobuf:"bytes,1,opt,name=TextKey,json=textKey,proto3" json:"TextKey,omitempty"`
	// [OPTIONAL]
	// AttrPrefix is the json key name prefix for XML attributes.
	// Attribute names are stored in a json with this prefix.
	// For example, XML attribute foo="" is converted into {"@foo": "bar"}
	// AttrPrefix should not be empty.
	// Default is "@".
	AttrPrefix string `protobuf:"bytes,2,opt,name=AttrPrefix,json=attrPrefix,proto3" json:"AttrPrefix,omitempty"`
	// [OPTIONAL]
	// NamespaceSep is the name space separator.
	// Namespace separator ":" in XML element names are converted into the specified string.
	// Note that, general RayFish convention discard namespace information but this converter keep it.
	// NamespaceSep should not be empty.
	// Default is ":".
	NamespaceSep string `protobuf:"bytes,3,opt,name=NamespaceSep,json=namespaceSep,proto3" json:"NamespaceSep,omitempty"`
	// [OPTIONAL]
	// TrimSpace if true, trims unicode space from xml text.
	// See the [unicode.IsSpace] for space definition.
	// This option is used in XML to JSON conversion.
	// Default is false.
	TrimSpace     bool `protobuf:"varint,4,opt,name=TrimSpace,json=trimSpace,proto3" json:"TrimSpace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BadgerfishSpec) Reset() {
	*x = BadgerfishSpec{}
	mi := &file_app_v1_middleware_soaprest_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BadgerfishSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgerfishSpec) ProtoMessage() {}

func (x *BadgerfishSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_soaprest_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgerfishSpec.ProtoReflect.Descriptor instead.
func (*BadgerfishSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_soaprest_proto_rawDescGZIP(), []int{4}
}

func (x *BadgerfishSpec) GetTextKey() string {
	if x != nil {
		return x.TextKey
	}
	return ""
}

func (x *BadgerfishSpec) GetAttrPrefix() string {
	if x != nil {
		return x.AttrPrefix
	}
	return ""
}

func (x *BadgerfishSpec) GetNamespaceSep() string {
	if x != nil {
		return x.NamespaceSep
	}
	return ""
}

func (x *BadgerfishSpec) GetTrimSpace() bool {
	if x != nil {
		return x.TrimSpace
	}
	return false
}

var File_app_v1_middleware_soaprest_proto protoreflect.FileDescriptor

const file_app_v1_middleware_soaprest_proto_rawDesc = "" +
	"\n" +
	" app/v1/middleware/soaprest.proto\x12\x06app.v1\x1a\x1bbuf/validate/validate.proto\x1a\x15kernel/resource.proto\x1a\x14kernel/txtutil.proto\"\xd4\x01\n" +
	"\x12SOAPRESTMiddleware\x12-\n" +
	"\n" +
	"APIVersion\x18\x01 \x01(\tB\r\xbaH\n" +
	"r\b\n" +
	"\x06app/v1R\n" +
	"apiVersion\x12-\n" +
	"\x04Kind\x18\x02 \x01(\tB\x19\xbaH\x16r\x14\n" +
	"\x12SOAPRESTMiddlewareR\x04kind\x12,\n" +
	"\bMetadata\x18\x03 \x01(\v2\x10.kernel.MetadataR\bmetadata\x122\n" +
	"\x04Spec\x18\x04 \x01(\v2\x1e.app.v1.SOAPRESTMiddlewareSpecR\x04spec\"\xf1\x01\n" +
	"\x16SOAPRESTMiddlewareSpec\x125\n" +
	"\fErrorHandler\x18\x01 \x01(\v2\x11.kernel.ReferenceR\ferrorHandler\x12,\n" +
	"\x06Simple\x18\x02 \x01(\v2\x12.app.v1.SimpleSpecH\x00R\x06simple\x12/\n" +
	"\aRayfish\x18\x03 \x01(\v2\x13.app.v1.RayfishSpecH\x00R\arayfish\x128\n" +
	"\n" +
	"Badgerfish\x18\x04 \x01(\v2\x16.app.v1.BadgerfishSpecH\x00R\n" +
	"badgerfishB\a\n" +
	"\x05Rules\"\xaa\x01\n" +
	"\n" +
	"SimpleSpec\x12\x18\n" +
	"\aTextKey\x18\x01 \x01(\tR\atextKey\x12\x1e\n" +
	"\n" +
	"AttrPrefix\x18\x02 \x01(\tR\n" +
	"attrPrefix\x12\"\n" +
	"\fNamespaceSep\x18\x03 \x01(\tR\fnamespaceSep\x12\x1c\n" +
	"\tTrimSpace\x18\x04 \x01(\bR\ttrimSpace\x12 \n" +
	"\vPreferShort\x18\x05 \x01(\bR\vpreferShort\"\xc5\x01\n" +
	"\vRayfishSpec\x12\x18\n" +
	"\aNameKey\x18\x01 \x01(\tR\anameKey\x12\x18\n" +
	"\aTextKey\x18\x02 \x01(\tR\atextKey\x12 \n" +
	"\vChildrenKey\x18\x03 \x01(\tR\vchildrenKey\x12\x1e\n" +
	"\n" +
	"AttrPrefix\x18\x04 \x01(\tR\n" +
	"attrPrefix\x12\"\n" +
	"\fNamespaceSep\x18\x05 \x01(\tR\fnamespaceSep\x12\x1c\n" +
	"\tTrimSpace\x18\x06 \x01(\bR\ttrimSpace\"\x8c\x01\n" +
	"\x0eBadgerfishSpec\x12\x18\n" +
	"\aTextKey\x18\x01 \x01(\tR\atextKey\x12\x1e\n" +
	"\n" +
	"AttrPrefix\x18\x02 \x01(\tR\n" +
	"attrPrefix\x12\"\n" +
	"\fNamespaceSep\x18\x03 \x01(\tR\fnamespaceSep\x12\x1c\n" +
	"\tTrimSpace\x18\x04 \x01(\bR\ttrimSpaceB8Z6github.com/aileron-gateway/aileron-gateway/apis/app/v1b\x06proto3"

var (
	file_app_v1_middleware_soaprest_proto_rawDescOnce sync.Once
	file_app_v1_middleware_soaprest_proto_rawDescData []byte
)

func file_app_v1_middleware_soaprest_proto_rawDescGZIP() []byte {
	file_app_v1_middleware_soaprest_proto_rawDescOnce.Do(func() {
		file_app_v1_middleware_soaprest_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_app_v1_middleware_soaprest_proto_rawDesc), len(file_app_v1_middleware_soaprest_proto_rawDesc)))
	})
	return file_app_v1_middleware_soaprest_proto_rawDescData
}

var file_app_v1_middleware_soaprest_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_app_v1_middleware_soaprest_proto_goTypes = []any{
	(*SOAPRESTMiddleware)(nil),     // 0: app.v1.SOAPRESTMiddleware
	(*SOAPRESTMiddlewareSpec)(nil), // 1: app.v1.SOAPRESTMiddlewareSpec
	(*SimpleSpec)(nil),             // 2: app.v1.SimpleSpec
	(*RayfishSpec)(nil),            // 3: app.v1.RayfishSpec
	(*BadgerfishSpec)(nil),         // 4: app.v1.BadgerfishSpec
	(*kernel.Metadata)(nil),        // 5: kernel.Metadata
	(*kernel.Reference)(nil),       // 6: kernel.Reference
}
var file_app_v1_middleware_soaprest_proto_depIdxs = []int32{
	5, // 0: app.v1.SOAPRESTMiddleware.Metadata:type_name -> kernel.Metadata
	1, // 1: app.v1.SOAPRESTMiddleware.Spec:type_name -> app.v1.SOAPRESTMiddlewareSpec
	6, // 2: app.v1.SOAPRESTMiddlewareSpec.ErrorHandler:type_name -> kernel.Reference
	2, // 3: app.v1.SOAPRESTMiddlewareSpec.Simple:type_name -> app.v1.SimpleSpec
	3, // 4: app.v1.SOAPRESTMiddlewareSpec.Rayfish:type_name -> app.v1.RayfishSpec
	4, // 5: app.v1.SOAPRESTMiddlewareSpec.Badgerfish:type_name -> app.v1.BadgerfishSpec
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_app_v1_middleware_soaprest_proto_init() }
func file_app_v1_middleware_soaprest_proto_init() {
	if File_app_v1_middleware_soaprest_proto != nil {
		return
	}
	file_app_v1_middleware_soaprest_proto_msgTypes[1].OneofWrappers = []any{
		(*SOAPRESTMiddlewareSpec_Simple)(nil),
		(*SOAPRESTMiddlewareSpec_Rayfish)(nil),
		(*SOAPRESTMiddlewareSpec_Badgerfish)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_app_v1_middleware_soaprest_proto_rawDesc), len(file_app_v1_middleware_soaprest_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_app_v1_middleware_soaprest_proto_goTypes,
		DependencyIndexes: file_app_v1_middleware_soaprest_proto_depIdxs,
		MessageInfos:      file_app_v1_middleware_soaprest_proto_msgTypes,
	}.Build()
	File_app_v1_middleware_soaprest_proto = out.File
	file_app_v1_middleware_soaprest_proto_goTypes = nil
	file_app_v1_middleware_soaprest_proto_depIdxs = nil
}
