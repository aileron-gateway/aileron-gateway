// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.0
// source: app/v1/middleware/throttle.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/aileron-gateway/aileron-gateway/apis/core/v1"
	kernel "github.com/aileron-gateway/aileron-gateway/apis/kernel"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ThrottleMiddleware is the definition of the ThrottleMiddleware object.
// ThrottleMiddleware implements interface of the middleware.
type ThrottleMiddleware struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [REQUIRED]
	// APIVersion is the defined version of the midleware.
	// This value must be "app/v1".
	APIVersion string `protobuf:"bytes,1,opt,name=APIVersion,json=apiVersion,proto3" json:"APIVersion,omitempty"`
	// [REQUIRED]
	// Kind is the kind of this object.
	// This value must be "ThrottleMiddleware".
	Kind string `protobuf:"bytes,2,opt,name=Kind,json=kind,proto3" json:"Kind,omitempty"`
	// [OPTIONAL]
	// Metadata is the metadata of the http logger object.
	// If not set, both name and namespace in the metadata
	// are treated as "default".
	Metadata *kernel.Metadata `protobuf:"bytes,3,opt,name=Metadata,json=metadata,proto3" json:"Metadata,omitempty"`
	// [OPTIONAL]
	// Spec is the specification of the middleware.
	// Default values are used when nothing is set.
	Spec          *ThrottleMiddlewareSpec `protobuf:"bytes,4,opt,name=Spec,json=spec,proto3" json:"Spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ThrottleMiddleware) Reset() {
	*x = ThrottleMiddleware{}
	mi := &file_app_v1_middleware_throttle_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThrottleMiddleware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThrottleMiddleware) ProtoMessage() {}

func (x *ThrottleMiddleware) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_throttle_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThrottleMiddleware.ProtoReflect.Descriptor instead.
func (*ThrottleMiddleware) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_throttle_proto_rawDescGZIP(), []int{0}
}

func (x *ThrottleMiddleware) GetAPIVersion() string {
	if x != nil {
		return x.APIVersion
	}
	return ""
}

func (x *ThrottleMiddleware) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ThrottleMiddleware) GetMetadata() *kernel.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ThrottleMiddleware) GetSpec() *ThrottleMiddlewareSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// ThrottleMiddlewareSpec is the specifications for the ThrottleMiddleware object.
type ThrottleMiddlewareSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// ErrorHandler is the reference to a ErrorHandler object.
	// Referred object must implement ErrorHandler interface.
	// Default error handler is used when not set.
	ErrorHandler *kernel.Reference `protobuf:"bytes,1,opt,name=ErrorHandler,json=errorHandler,proto3" json:"ErrorHandler,omitempty"`
	// [OPTIONAL]
	// APIThrottlers is the list of APIThrottler objects.
	// Throttler that matches all requests should be defined at the last of this list to
	// protect the application from DDoS attack.
	APIThrottlers []*APIThrottlerSpec `protobuf:"bytes,2,rep,name=APIThrottlers,json=apiThrottlers,proto3" json:"APIThrottlers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ThrottleMiddlewareSpec) Reset() {
	*x = ThrottleMiddlewareSpec{}
	mi := &file_app_v1_middleware_throttle_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThrottleMiddlewareSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThrottleMiddlewareSpec) ProtoMessage() {}

func (x *ThrottleMiddlewareSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_throttle_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThrottleMiddlewareSpec.ProtoReflect.Descriptor instead.
func (*ThrottleMiddlewareSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_throttle_proto_rawDescGZIP(), []int{1}
}

func (x *ThrottleMiddlewareSpec) GetErrorHandler() *kernel.Reference {
	if x != nil {
		return x.ErrorHandler
	}
	return nil
}

func (x *ThrottleMiddlewareSpec) GetAPIThrottlers() []*APIThrottlerSpec {
	if x != nil {
		return x.APIThrottlers
	}
	return nil
}

// APIThrottlerSpec creates a timeout which is applied to requests
// with configured methods and a path.
type APIThrottlerSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [REQUIRED]
	// Matcher is a matcher which matches to defined patterns.
	// Default is not set.
	Matcher *kernel.MatcherSpec `protobuf:"bytes,1,opt,name=Matcher,json=matcher,proto3" json:"Matcher,omitempty"`
	// [OPTIONAL]
	// Methods is the list of HTTP methods to be matched.
	// If not set, all methods are matched.
	// If set, only configured methods are matched.
	// Default is not set.
	Methods []v1.HTTPMethod `protobuf:"varint,2,rep,packed,name=Methods,json=methods,proto3,enum=core.v1.HTTPMethod" json:"Methods,omitempty"`
	// [OPTIONAL]
	// maxRetry is the maximum retry count to accept the requests when throttled.
	// Errors are returned to the requests that are not accepted after retrying maxRetry times.
	// Default is [0] or no retry by default.
	MaxRetry int32 `protobuf:"varint,3,opt,name=MaxRetry,json=maxRetry,proto3" json:"MaxRetry,omitempty"`
	// [OPTIONAL]
	// Waiter is the waiter object to determine the wait time until the next try.
	// ExponentialBackoffFullJitterWaiter is used by default.
	Waiter *v1.WaiterSpec `protobuf:"bytes,4,opt,name=Waiter,json=waiter,proto3" json:"Waiter,omitempty"`
	// [REQUIRED]
	// Throttlers is the list of the throttlers that are applied to the requests matched to the matcher.
	// No throttlers are applied when nothong has specified in this field.
	//
	// Types that are valid to be assigned to Throttlers:
	//
	//	*APIThrottlerSpec_MaxConnections
	//	*APIThrottlerSpec_TokenBucket
	//	*APIThrottlerSpec_FixedWindow
	//	*APIThrottlerSpec_LeakyBucket
	Throttlers    isAPIThrottlerSpec_Throttlers `protobuf_oneof:"Throttlers"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *APIThrottlerSpec) Reset() {
	*x = APIThrottlerSpec{}
	mi := &file_app_v1_middleware_throttle_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIThrottlerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIThrottlerSpec) ProtoMessage() {}

func (x *APIThrottlerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_throttle_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIThrottlerSpec.ProtoReflect.Descriptor instead.
func (*APIThrottlerSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_throttle_proto_rawDescGZIP(), []int{2}
}

func (x *APIThrottlerSpec) GetMatcher() *kernel.MatcherSpec {
	if x != nil {
		return x.Matcher
	}
	return nil
}

func (x *APIThrottlerSpec) GetMethods() []v1.HTTPMethod {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *APIThrottlerSpec) GetMaxRetry() int32 {
	if x != nil {
		return x.MaxRetry
	}
	return 0
}

func (x *APIThrottlerSpec) GetWaiter() *v1.WaiterSpec {
	if x != nil {
		return x.Waiter
	}
	return nil
}

func (x *APIThrottlerSpec) GetThrottlers() isAPIThrottlerSpec_Throttlers {
	if x != nil {
		return x.Throttlers
	}
	return nil
}

func (x *APIThrottlerSpec) GetMaxConnections() *MaxConnectionsSpec {
	if x != nil {
		if x, ok := x.Throttlers.(*APIThrottlerSpec_MaxConnections); ok {
			return x.MaxConnections
		}
	}
	return nil
}

func (x *APIThrottlerSpec) GetTokenBucket() *TokenBucketSpec {
	if x != nil {
		if x, ok := x.Throttlers.(*APIThrottlerSpec_TokenBucket); ok {
			return x.TokenBucket
		}
	}
	return nil
}

func (x *APIThrottlerSpec) GetFixedWindow() *FixedWindowSpec {
	if x != nil {
		if x, ok := x.Throttlers.(*APIThrottlerSpec_FixedWindow); ok {
			return x.FixedWindow
		}
	}
	return nil
}

func (x *APIThrottlerSpec) GetLeakyBucket() *LeakyBucketSpec {
	if x != nil {
		if x, ok := x.Throttlers.(*APIThrottlerSpec_LeakyBucket); ok {
			return x.LeakyBucket
		}
	}
	return nil
}

type isAPIThrottlerSpec_Throttlers interface {
	isAPIThrottlerSpec_Throttlers()
}

type APIThrottlerSpec_MaxConnections struct {
	// MaxConnections is the setting for throttler with max connection algorithm.
	MaxConnections *MaxConnectionsSpec `protobuf:"bytes,10,opt,name=MaxConnections,json=maxConnections,proto3,oneof"`
}

type APIThrottlerSpec_TokenBucket struct {
	// TokenBucket is the setting for throttler with token bucket algorithm.
	TokenBucket *TokenBucketSpec `protobuf:"bytes,11,opt,name=TokenBucket,json=tokenBucket,proto3,oneof"`
}

type APIThrottlerSpec_FixedWindow struct {
	// FixedWindow is the setting for throttler with fixed window algorithm.
	FixedWindow *FixedWindowSpec `protobuf:"bytes,12,opt,name=FixedWindow,json=fixedWindow,proto3,oneof"`
}

type APIThrottlerSpec_LeakyBucket struct {
	// LeakyBucket is the setting for throttler with leaky bucket algorithm.
	LeakyBucket *LeakyBucketSpec `protobuf:"bytes,13,opt,name=LeakyBucket,json=leakyBucket,proto3,oneof"`
}

func (*APIThrottlerSpec_MaxConnections) isAPIThrottlerSpec_Throttlers() {}

func (*APIThrottlerSpec_TokenBucket) isAPIThrottlerSpec_Throttlers() {}

func (*APIThrottlerSpec_FixedWindow) isAPIThrottlerSpec_Throttlers() {}

func (*APIThrottlerSpec_LeakyBucket) isAPIThrottlerSpec_Throttlers() {}

// MaxConnectionsSpec is the specification for max connection algorithms of throttling.
type MaxConnectionsSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// maxConns is the max connection to allow to connect at a moment.
	// Default is [128].
	MaxConns      int32 `protobuf:"varint,1,opt,name=MaxConns,json=maxConns,proto3" json:"MaxConns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MaxConnectionsSpec) Reset() {
	*x = MaxConnectionsSpec{}
	mi := &file_app_v1_middleware_throttle_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaxConnectionsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxConnectionsSpec) ProtoMessage() {}

func (x *MaxConnectionsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_throttle_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxConnectionsSpec.ProtoReflect.Descriptor instead.
func (*MaxConnectionsSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_throttle_proto_rawDescGZIP(), []int{3}
}

func (x *MaxConnectionsSpec) GetMaxConns() int32 {
	if x != nil {
		return x.MaxConns
	}
	return 0
}

// FixedWindowSpec is the specification for token fixed window algorithms of throttling.
type FixedWindowSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// WindowSize is the time span of the window in millisecond.
	// Default is [1000] or 1 second.
	WindowSize int64 `protobuf:"varint,1,opt,name=WindowSize,json=windowSize,proto3" json:"WindowSize,omitempty"`
	// [OPTIONAL]
	// Limit is the limit of requests in the windows.
	// Default is [1000].
	Limit         int32 `protobuf:"varint,2,opt,name=Limit,json=limit,proto3" json:"Limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FixedWindowSpec) Reset() {
	*x = FixedWindowSpec{}
	mi := &file_app_v1_middleware_throttle_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixedWindowSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedWindowSpec) ProtoMessage() {}

func (x *FixedWindowSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_throttle_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedWindowSpec.ProtoReflect.Descriptor instead.
func (*FixedWindowSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_throttle_proto_rawDescGZIP(), []int{4}
}

func (x *FixedWindowSpec) GetWindowSize() int64 {
	if x != nil {
		return x.WindowSize
	}
	return 0
}

func (x *FixedWindowSpec) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// TokenBucketSpec is the specification for token bucket algorithms of throttling.
type TokenBucketSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// BucketSize is the number of tokens that the bucket can keep.
	// Defailt is [1000].
	BucketSize int32 `protobuf:"varint,1,opt,name=BucketSize,json=bucketSize,proto3" json:"BucketSize,omitempty"`
	// [OPTIONAL]
	// FillInterval is the interval to fill tokens in the bucket in millisecond.
	// Defailt is [1000] or 1 second.
	FillInterval int64 `protobuf:"varint,2,opt,name=FillInterval,json=fillInterval,proto3" json:"FillInterval,omitempty"`
	// [OPTIONAL]
	// FillRate is the number of tokens to fill in the bucket at every fill interval.
	// Defailt is [1000].
	FillRate      int32 `protobuf:"varint,3,opt,name=FillRate,json=fillRate,proto3" json:"FillRate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenBucketSpec) Reset() {
	*x = TokenBucketSpec{}
	mi := &file_app_v1_middleware_throttle_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenBucketSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBucketSpec) ProtoMessage() {}

func (x *TokenBucketSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_throttle_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBucketSpec.ProtoReflect.Descriptor instead.
func (*TokenBucketSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_throttle_proto_rawDescGZIP(), []int{5}
}

func (x *TokenBucketSpec) GetBucketSize() int32 {
	if x != nil {
		return x.BucketSize
	}
	return 0
}

func (x *TokenBucketSpec) GetFillInterval() int64 {
	if x != nil {
		return x.FillInterval
	}
	return 0
}

func (x *TokenBucketSpec) GetFillRate() int32 {
	if x != nil {
		return x.FillRate
	}
	return 0
}

// LeakyBucketSpec is the specification for leaky bucket algorithms of throttling.
type LeakyBucketSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// BucketSize is the size of bucket.
	// Requests will be en-queued in the bucket and will be de-queued with
	// the rate of LeakRate/LeakInterval.
	// Defailt is [1000].
	BucketSize int32 `protobuf:"varint,1,opt,name=BucketSize,json=bucketSize,proto3" json:"BucketSize,omitempty"`
	// [OPTIONAL]
	// LeakInterval is the interval to count the leaked tokens in millisecond.
	// Defailt is [1000] or 1 second.
	LeakInterval int64 `protobuf:"varint,2,opt,name=LeakInterval,json=leakInterval,proto3" json:"LeakInterval,omitempty"`
	// [OPTIONAL]
	// LeakRate is the number of requests that will be accepted every LeakInterval.
	// Defailt is [200].
	LeakRate      int32 `protobuf:"varint,3,opt,name=LeakRate,json=leakRate,proto3" json:"LeakRate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeakyBucketSpec) Reset() {
	*x = LeakyBucketSpec{}
	mi := &file_app_v1_middleware_throttle_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeakyBucketSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeakyBucketSpec) ProtoMessage() {}

func (x *LeakyBucketSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_middleware_throttle_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeakyBucketSpec.ProtoReflect.Descriptor instead.
func (*LeakyBucketSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_middleware_throttle_proto_rawDescGZIP(), []int{6}
}

func (x *LeakyBucketSpec) GetBucketSize() int32 {
	if x != nil {
		return x.BucketSize
	}
	return 0
}

func (x *LeakyBucketSpec) GetLeakInterval() int64 {
	if x != nil {
		return x.LeakInterval
	}
	return 0
}

func (x *LeakyBucketSpec) GetLeakRate() int32 {
	if x != nil {
		return x.LeakRate
	}
	return 0
}

var File_app_v1_middleware_throttle_proto protoreflect.FileDescriptor

const file_app_v1_middleware_throttle_proto_rawDesc = "" +
	"\n" +
	" app/v1/middleware/throttle.proto\x12\x06app.v1\x1a\x1bbuf/validate/validate.proto\x1a\x18core/v1/resilience.proto\x1a\x15kernel/resource.proto\x1a\x12core/v1/http.proto\x1a\x14kernel/txtutil.proto\"\xd4\x01\n" +
	"\x12ThrottleMiddleware\x12-\n" +
	"\n" +
	"APIVersion\x18\x01 \x01(\tB\r\xbaH\n" +
	"r\b\n" +
	"\x06app/v1R\n" +
	"apiVersion\x12-\n" +
	"\x04Kind\x18\x02 \x01(\tB\x19\xbaH\x16r\x14\n" +
	"\x12ThrottleMiddlewareR\x04kind\x12,\n" +
	"\bMetadata\x18\x03 \x01(\v2\x10.kernel.MetadataR\bmetadata\x122\n" +
	"\x04Spec\x18\x04 \x01(\v2\x1e.app.v1.ThrottleMiddlewareSpecR\x04spec\"\x8f\x01\n" +
	"\x16ThrottleMiddlewareSpec\x125\n" +
	"\fErrorHandler\x18\x01 \x01(\v2\x11.kernel.ReferenceR\ferrorHandler\x12>\n" +
	"\rAPIThrottlers\x18\x02 \x03(\v2\x18.app.v1.APIThrottlerSpecR\rapiThrottlers\"\xe6\x03\n" +
	"\x10APIThrottlerSpec\x125\n" +
	"\aMatcher\x18\x01 \x01(\v2\x13.kernel.MatcherSpecB\x06\xbaH\x03\xc8\x01\x01R\amatcher\x127\n" +
	"\aMethods\x18\x02 \x03(\x0e2\x13.core.v1.HTTPMethodB\b\xbaH\x05\x92\x01\x02\x18\x01R\amethods\x12#\n" +
	"\bMaxRetry\x18\x03 \x01(\x05B\a\xbaH\x04\x1a\x02(\x00R\bmaxRetry\x12+\n" +
	"\x06Waiter\x18\x04 \x01(\v2\x13.core.v1.WaiterSpecR\x06waiter\x12D\n" +
	"\x0eMaxConnections\x18\n" +
	" \x01(\v2\x1a.app.v1.MaxConnectionsSpecH\x00R\x0emaxConnections\x12;\n" +
	"\vTokenBucket\x18\v \x01(\v2\x17.app.v1.TokenBucketSpecH\x00R\vtokenBucket\x12;\n" +
	"\vFixedWindow\x18\f \x01(\v2\x17.app.v1.FixedWindowSpecH\x00R\vfixedWindow\x12;\n" +
	"\vLeakyBucket\x18\r \x01(\v2\x17.app.v1.LeakyBucketSpecH\x00R\vleakyBucketB\x13\n" +
	"\n" +
	"Throttlers\x12\x05\xbaH\x02\b\x01\"0\n" +
	"\x12MaxConnectionsSpec\x12\x1a\n" +
	"\bMaxConns\x18\x01 \x01(\x05R\bmaxConns\"Y\n" +
	"\x0fFixedWindowSpec\x12'\n" +
	"\n" +
	"WindowSize\x18\x01 \x01(\x03B\a\xbaH\x04\"\x02(\x01R\n" +
	"windowSize\x12\x1d\n" +
	"\x05Limit\x18\x02 \x01(\x05B\a\xbaH\x04\x1a\x02(\x01R\x05limit\"\x8c\x01\n" +
	"\x0fTokenBucketSpec\x12'\n" +
	"\n" +
	"BucketSize\x18\x01 \x01(\x05B\a\xbaH\x04\x1a\x02(\x01R\n" +
	"bucketSize\x12+\n" +
	"\fFillInterval\x18\x02 \x01(\x03B\a\xbaH\x04\"\x02(\x01R\ffillInterval\x12#\n" +
	"\bFillRate\x18\x03 \x01(\x05B\a\xbaH\x04\x1a\x02(\x01R\bfillRate\"\x8c\x01\n" +
	"\x0fLeakyBucketSpec\x12'\n" +
	"\n" +
	"BucketSize\x18\x01 \x01(\x05B\a\xbaH\x04\x1a\x02(\x01R\n" +
	"bucketSize\x12+\n" +
	"\fLeakInterval\x18\x02 \x01(\x03B\a\xbaH\x04\"\x02(\x01R\fleakInterval\x12#\n" +
	"\bLeakRate\x18\x03 \x01(\x05B\a\xbaH\x04\x1a\x02(\x01R\bleakRateB8Z6github.com/aileron-gateway/aileron-gateway/apis/app/v1b\x06proto3"

var (
	file_app_v1_middleware_throttle_proto_rawDescOnce sync.Once
	file_app_v1_middleware_throttle_proto_rawDescData []byte
)

func file_app_v1_middleware_throttle_proto_rawDescGZIP() []byte {
	file_app_v1_middleware_throttle_proto_rawDescOnce.Do(func() {
		file_app_v1_middleware_throttle_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_app_v1_middleware_throttle_proto_rawDesc), len(file_app_v1_middleware_throttle_proto_rawDesc)))
	})
	return file_app_v1_middleware_throttle_proto_rawDescData
}

var file_app_v1_middleware_throttle_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_app_v1_middleware_throttle_proto_goTypes = []any{
	(*ThrottleMiddleware)(nil),     // 0: app.v1.ThrottleMiddleware
	(*ThrottleMiddlewareSpec)(nil), // 1: app.v1.ThrottleMiddlewareSpec
	(*APIThrottlerSpec)(nil),       // 2: app.v1.APIThrottlerSpec
	(*MaxConnectionsSpec)(nil),     // 3: app.v1.MaxConnectionsSpec
	(*FixedWindowSpec)(nil),        // 4: app.v1.FixedWindowSpec
	(*TokenBucketSpec)(nil),        // 5: app.v1.TokenBucketSpec
	(*LeakyBucketSpec)(nil),        // 6: app.v1.LeakyBucketSpec
	(*kernel.Metadata)(nil),        // 7: kernel.Metadata
	(*kernel.Reference)(nil),       // 8: kernel.Reference
	(*kernel.MatcherSpec)(nil),     // 9: kernel.MatcherSpec
	(v1.HTTPMethod)(0),             // 10: core.v1.HTTPMethod
	(*v1.WaiterSpec)(nil),          // 11: core.v1.WaiterSpec
}
var file_app_v1_middleware_throttle_proto_depIdxs = []int32{
	7,  // 0: app.v1.ThrottleMiddleware.Metadata:type_name -> kernel.Metadata
	1,  // 1: app.v1.ThrottleMiddleware.Spec:type_name -> app.v1.ThrottleMiddlewareSpec
	8,  // 2: app.v1.ThrottleMiddlewareSpec.ErrorHandler:type_name -> kernel.Reference
	2,  // 3: app.v1.ThrottleMiddlewareSpec.APIThrottlers:type_name -> app.v1.APIThrottlerSpec
	9,  // 4: app.v1.APIThrottlerSpec.Matcher:type_name -> kernel.MatcherSpec
	10, // 5: app.v1.APIThrottlerSpec.Methods:type_name -> core.v1.HTTPMethod
	11, // 6: app.v1.APIThrottlerSpec.Waiter:type_name -> core.v1.WaiterSpec
	3,  // 7: app.v1.APIThrottlerSpec.MaxConnections:type_name -> app.v1.MaxConnectionsSpec
	5,  // 8: app.v1.APIThrottlerSpec.TokenBucket:type_name -> app.v1.TokenBucketSpec
	4,  // 9: app.v1.APIThrottlerSpec.FixedWindow:type_name -> app.v1.FixedWindowSpec
	6,  // 10: app.v1.APIThrottlerSpec.LeakyBucket:type_name -> app.v1.LeakyBucketSpec
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_app_v1_middleware_throttle_proto_init() }
func file_app_v1_middleware_throttle_proto_init() {
	if File_app_v1_middleware_throttle_proto != nil {
		return
	}
	file_app_v1_middleware_throttle_proto_msgTypes[2].OneofWrappers = []any{
		(*APIThrottlerSpec_MaxConnections)(nil),
		(*APIThrottlerSpec_TokenBucket)(nil),
		(*APIThrottlerSpec_FixedWindow)(nil),
		(*APIThrottlerSpec_LeakyBucket)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_app_v1_middleware_throttle_proto_rawDesc), len(file_app_v1_middleware_throttle_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_app_v1_middleware_throttle_proto_goTypes,
		DependencyIndexes: file_app_v1_middleware_throttle_proto_depIdxs,
		MessageInfos:      file_app_v1_middleware_throttle_proto_msgTypes,
	}.Build()
	File_app_v1_middleware_throttle_proto = out.File
	file_app_v1_middleware_throttle_proto_goTypes = nil
	file_app_v1_middleware_throttle_proto_depIdxs = nil
}
