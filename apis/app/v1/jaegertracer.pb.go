// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: app/v1/tracer/jaegertracer.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kernel "github.com/aileron-gateway/aileron-gateway/apis/kernel"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JaegerSamplerSpec_JaegerSamplerType int32

const (
	// Const is the type of sampler that always makes the same decision.
	JaegerSamplerSpec_Const JaegerSamplerSpec_JaegerSamplerType = 0
	// Remote is the type of sampler that polls Jaeger agent for sampling strategy.
	JaegerSamplerSpec_Remote JaegerSamplerSpec_JaegerSamplerType = 1
	// Probabilistic is the type of sampler that samples traces
	// with a certain fixed probability.
	JaegerSamplerSpec_Probabilistic JaegerSamplerSpec_JaegerSamplerType = 2
	// RateLimiting is the type of sampler that samples
	// only up to a fixed number of traces per second.
	JaegerSamplerSpec_RateLimiting JaegerSamplerSpec_JaegerSamplerType = 3
	// LowerBound is the type of sampler that samples
	// at least a fixed number of traces per second.
	JaegerSamplerSpec_LowerBound JaegerSamplerSpec_JaegerSamplerType = 4
)

// Enum value maps for JaegerSamplerSpec_JaegerSamplerType.
var (
	JaegerSamplerSpec_JaegerSamplerType_name = map[int32]string{
		0: "Const",
		1: "Remote",
		2: "Probabilistic",
		3: "RateLimiting",
		4: "LowerBound",
	}
	JaegerSamplerSpec_JaegerSamplerType_value = map[string]int32{
		"Const":         0,
		"Remote":        1,
		"Probabilistic": 2,
		"RateLimiting":  3,
		"LowerBound":    4,
	}
)

func (x JaegerSamplerSpec_JaegerSamplerType) Enum() *JaegerSamplerSpec_JaegerSamplerType {
	p := new(JaegerSamplerSpec_JaegerSamplerType)
	*p = x
	return p
}

func (x JaegerSamplerSpec_JaegerSamplerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JaegerSamplerSpec_JaegerSamplerType) Descriptor() protoreflect.EnumDescriptor {
	return file_app_v1_tracer_jaegertracer_proto_enumTypes[0].Descriptor()
}

func (JaegerSamplerSpec_JaegerSamplerType) Type() protoreflect.EnumType {
	return &file_app_v1_tracer_jaegertracer_proto_enumTypes[0]
}

func (x JaegerSamplerSpec_JaegerSamplerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JaegerSamplerSpec_JaegerSamplerType.Descriptor instead.
func (JaegerSamplerSpec_JaegerSamplerType) EnumDescriptor() ([]byte, []int) {
	return file_app_v1_tracer_jaegertracer_proto_rawDescGZIP(), []int{2, 0}
}

// JaegerTracer is the definition of the JaegerTracer object.
// JaegerTracer implements interface of the tracer.
type JaegerTracer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [REQUIRED]
	// APIVersion is the defined version of the tracer.
	// This value must be "app/v1".
	APIVersion string `protobuf:"bytes,1,opt,name=APIVersion,json=apiVersion,proto3" json:"APIVersion,omitempty"`
	// [REQUIRED]
	// Kind is the kind of this object.
	// This value must be "JaegerTracer".
	Kind string `protobuf:"bytes,2,opt,name=Kind,json=kind,proto3" json:"Kind,omitempty"`
	// [OPTIONAL]
	// Metadata is the metadata of the http logger object.
	// If not set, both name and namespace in the metadata
	// are treated as "default".
	Metadata *kernel.Metadata `protobuf:"bytes,3,opt,name=Metadata,json=metadata,proto3" json:"Metadata,omitempty"`
	// [OPTIONAL]
	// Spec is the specification of the tracer.
	// Default values are used when nothing is set.
	Spec          *JaegerTracerSpec `protobuf:"bytes,4,opt,name=Spec,json=spec,proto3" json:"Spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JaegerTracer) Reset() {
	*x = JaegerTracer{}
	mi := &file_app_v1_tracer_jaegertracer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JaegerTracer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JaegerTracer) ProtoMessage() {}

func (x *JaegerTracer) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_tracer_jaegertracer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JaegerTracer.ProtoReflect.Descriptor instead.
func (*JaegerTracer) Descriptor() ([]byte, []int) {
	return file_app_v1_tracer_jaegertracer_proto_rawDescGZIP(), []int{0}
}

func (x *JaegerTracer) GetAPIVersion() string {
	if x != nil {
		return x.APIVersion
	}
	return ""
}

func (x *JaegerTracer) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *JaegerTracer) GetMetadata() *kernel.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *JaegerTracer) GetSpec() *JaegerTracerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// JaegerTracerSpec is the specifications for the JaegerTracer object.
type JaegerTracerSpec struct {
	state                protoimpl.MessageState         `protogen:"open.v1"`
	HeaderNames          []string                       `protobuf:"bytes,1,rep,name=HeaderNames,json=headerNames,proto3" json:"HeaderNames,omitempty"`
	ServiceName          string                         `protobuf:"bytes,2,opt,name=ServiceName,json=serviceName,proto3" json:"ServiceName,omitempty"`
	Disabled             bool                           `protobuf:"varint,3,opt,name=Disabled,json=disabled,proto3" json:"Disabled,omitempty"`
	RPCMetrics           bool                           `protobuf:"varint,4,opt,name=RPCMetrics,json=rpcMetrics,proto3" json:"RPCMetrics,omitempty"`
	Gen128Bit            bool                           `protobuf:"varint,5,opt,name=Gen128Bit,json=gen128Bit,proto3" json:"Gen128Bit,omitempty"`
	Tags                 map[string]string              `protobuf:"bytes,6,rep,name=Tags,json=tags,proto3" json:"Tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sampler              *JaegerSamplerSpec             `protobuf:"bytes,7,opt,name=Sampler,json=sampler,proto3" json:"Sampler,omitempty"`
	Reporter             *JaegerReporterSpec            `protobuf:"bytes,8,opt,name=Reporter,json=reporter,proto3" json:"Reporter,omitempty"`
	Headers              *JaegerHeadersSpec             `protobuf:"bytes,9,opt,name=Headers,json=headers,proto3" json:"Headers,omitempty"`
	BaggageRestrictions  *JaegerBaggageRestrictionsSpec `protobuf:"bytes,10,opt,name=BaggageRestrictions,json=baggageRestrictions,proto3" json:"BaggageRestrictions,omitempty"`
	Throttler            *JaegerThrottlerSpec           `protobuf:"bytes,11,opt,name=Throttler,json=throttler,proto3" json:"Throttler,omitempty"`
	K8SAttributes        *K8SAttributesSpec             `protobuf:"bytes,12,opt,name=K8sAttributes,json=k8sAttributes,proto3" json:"K8sAttributes,omitempty"`
	ContainerAttributes  *ContainerAttributesSpec       `protobuf:"bytes,13,opt,name=ContainerAttributes,json=containerAttributes,proto3" json:"ContainerAttributes,omitempty"`
	HostAttributes       *HostAttributesSpec            `protobuf:"bytes,14,opt,name=HostAttributes,json=hostAttributes,proto3" json:"HostAttributes,omitempty"`
	MiddlewareSpanNames  map[int32]string               `protobuf:"bytes,15,rep,name=MiddlewareSpanNames,json=middlewareSpanNames,proto3" json:"MiddlewareSpanNames,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TripperwareSpanNames map[int32]string               `protobuf:"bytes,16,rep,name=TripperwareSpanNames,json=tripperwareSpanNames,proto3" json:"TripperwareSpanNames,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *JaegerTracerSpec) Reset() {
	*x = JaegerTracerSpec{}
	mi := &file_app_v1_tracer_jaegertracer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JaegerTracerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JaegerTracerSpec) ProtoMessage() {}

func (x *JaegerTracerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_tracer_jaegertracer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JaegerTracerSpec.ProtoReflect.Descriptor instead.
func (*JaegerTracerSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_tracer_jaegertracer_proto_rawDescGZIP(), []int{1}
}

func (x *JaegerTracerSpec) GetHeaderNames() []string {
	if x != nil {
		return x.HeaderNames
	}
	return nil
}

func (x *JaegerTracerSpec) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *JaegerTracerSpec) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *JaegerTracerSpec) GetRPCMetrics() bool {
	if x != nil {
		return x.RPCMetrics
	}
	return false
}

func (x *JaegerTracerSpec) GetGen128Bit() bool {
	if x != nil {
		return x.Gen128Bit
	}
	return false
}

func (x *JaegerTracerSpec) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *JaegerTracerSpec) GetSampler() *JaegerSamplerSpec {
	if x != nil {
		return x.Sampler
	}
	return nil
}

func (x *JaegerTracerSpec) GetReporter() *JaegerReporterSpec {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *JaegerTracerSpec) GetHeaders() *JaegerHeadersSpec {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *JaegerTracerSpec) GetBaggageRestrictions() *JaegerBaggageRestrictionsSpec {
	if x != nil {
		return x.BaggageRestrictions
	}
	return nil
}

func (x *JaegerTracerSpec) GetThrottler() *JaegerThrottlerSpec {
	if x != nil {
		return x.Throttler
	}
	return nil
}

func (x *JaegerTracerSpec) GetK8SAttributes() *K8SAttributesSpec {
	if x != nil {
		return x.K8SAttributes
	}
	return nil
}

func (x *JaegerTracerSpec) GetContainerAttributes() *ContainerAttributesSpec {
	if x != nil {
		return x.ContainerAttributes
	}
	return nil
}

func (x *JaegerTracerSpec) GetHostAttributes() *HostAttributesSpec {
	if x != nil {
		return x.HostAttributes
	}
	return nil
}

func (x *JaegerTracerSpec) GetMiddlewareSpanNames() map[int32]string {
	if x != nil {
		return x.MiddlewareSpanNames
	}
	return nil
}

func (x *JaegerTracerSpec) GetTripperwareSpanNames() map[int32]string {
	if x != nil {
		return x.TripperwareSpanNames
	}
	return nil
}

type JaegerSamplerSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// Type is the sample type.
	// Default is [Const].
	Type JaegerSamplerSpec_JaegerSamplerType `protobuf:"varint,1,opt,name=Type,json=type,proto3,enum=app.v1.JaegerSamplerSpec_JaegerSamplerType" json:"Type,omitempty"`
	// [OPTIONAL]
	// Param is a value passed to the sampler.
	// Valid values for Param field are as follows.
	// For "const" sampler, 0 or 1 for always false/true respectively.
	// For "probabilistic" sampler, a probability between 0 and 1.
	// For "rateLimiting" sampler, the number of spans per second.
	// For "remote" sampler, param is the same as for "probabilistic" and indicates
	// the initial sampling rate before the actual one is received from the mothership.
	// Default is [1.0].
	Param float64 `protobuf:"fixed64,2,opt,name=Param,json=param,proto3" json:"Param,omitempty"`
	// [OPTIONAL]
	// SamplingServerURL is the URL of sampling manager that can provide
	// sampling strategy to this service.
	// Default is not set.
	SamplingServerURL string `protobuf:"bytes,3,opt,name=SamplingServerURL,json=samplingServerURL,proto3" json:"SamplingServerURL,omitempty"`
	// [OPTIONAL]
	// SamplingRefreshInterval controls how often the remotely controlled
	// sampler will poll sampling manager for the appropriate sampling strategy.
	// The value unit is millisecond.
	// Default is not set.
	SamplingRefreshInterval int32 `protobuf:"varint,4,opt,name=SamplingRefreshInterval,json=samplingRefreshInterval,proto3" json:"SamplingRefreshInterval,omitempty"`
	// [OPTIONAL]
	// MaxOperations is the maximum number of operations that the PerOperationSampler
	// will keep track of.
	// If an operation is not tracked, a default probabilistic sampler will be
	// used rather than the per operation specific sampler.
	// Default is not set.
	MaxOperations int32 `protobuf:"varint,5,opt,name=MaxOperations,json=maxOperations,proto3" json:"MaxOperations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JaegerSamplerSpec) Reset() {
	*x = JaegerSamplerSpec{}
	mi := &file_app_v1_tracer_jaegertracer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JaegerSamplerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JaegerSamplerSpec) ProtoMessage() {}

func (x *JaegerSamplerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_tracer_jaegertracer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JaegerSamplerSpec.ProtoReflect.Descriptor instead.
func (*JaegerSamplerSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_tracer_jaegertracer_proto_rawDescGZIP(), []int{2}
}

func (x *JaegerSamplerSpec) GetType() JaegerSamplerSpec_JaegerSamplerType {
	if x != nil {
		return x.Type
	}
	return JaegerSamplerSpec_Const
}

func (x *JaegerSamplerSpec) GetParam() float64 {
	if x != nil {
		return x.Param
	}
	return 0
}

func (x *JaegerSamplerSpec) GetSamplingServerURL() string {
	if x != nil {
		return x.SamplingServerURL
	}
	return ""
}

func (x *JaegerSamplerSpec) GetSamplingRefreshInterval() int32 {
	if x != nil {
		return x.SamplingRefreshInterval
	}
	return 0
}

func (x *JaegerSamplerSpec) GetMaxOperations() int32 {
	if x != nil {
		return x.MaxOperations
	}
	return 0
}

type JaegerReporterSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// QueueSize controls how many spans the reporter can keep in memory
	// before it starts dropping new spans.
	// The queue is continuously drained by a background go-routine,
	// as fast as spans can be sent out of process.
	// Default is not set.
	QueueSize int32 `protobuf:"varint,1,opt,name=QueueSize,json=queueSize,proto3" json:"QueueSize,omitempty"`
	// [OPTIONAL]
	// BufferFlushInterval controls how often the buffer is force-flushed,
	// even if it's not full.
	// It is generally not useful, as it only matters for very low traffic services.
	// The value unit is millisecond.
	// Default is not set.
	BufferFlushInterval int32 `protobuf:"varint,2,opt,name=BufferFlushInterval,json=bufferFlushInterval,proto3" json:"BufferFlushInterval,omitempty"`
	// [OPTIONAL]
	// LogSpans, when true, enables LoggingReporter that runs in parallel
	// with the main reporter and logs all submitted spans.
	// Default is not set.
	LogSpans bool `protobuf:"varint,3,opt,name=LogSpans,json=logSpans,proto3" json:"LogSpans,omitempty"`
	// [OPTIONAL]
	// LocalAgentHostPort instructs reporter to send spans to jaeger-agent at this address.
	// Default is not set.
	LocalAgentHostPort string `protobuf:"bytes,4,opt,name=LocalAgentHostPort,json=localAgentHostPort,proto3" json:"LocalAgentHostPort,omitempty"`
	// [OPTIONAL]
	// DisableAttemptReconnecting when true,
	// disables udp connection helper that periodically re-resolves the agent's hostname
	// and reconnects if there was a change.
	// This option only applies if LocalAgentHostPort is specified.
	// Default is not set.
	DisableAttemptReconnecting bool `protobuf:"varint,5,opt,name=DisableAttemptReconnecting,json=disableAttemptReconnecting,proto3" json:"DisableAttemptReconnecting,omitempty"`
	// [OPTIONAL]
	// AttemptReconnectInterval controls how often the agent client re-resolves the
	// provided hostname in order to detect address changes.
	// This option only applies if DisableAttemptReconnecting is false.
	// The value unit is millisecond.
	// Default is not set.
	AttemptReconnectInterval int32 `protobuf:"varint,6,opt,name=AttemptReconnectInterval,json=attemptReconnectInterval,proto3" json:"AttemptReconnectInterval,omitempty"`
	// [OPTIONAL]
	// CollectorEndpoint instructs reporter to send spans to jaeger-collector at this URL.
	// Default is not set.
	CollectorEndpoint string `protobuf:"bytes,7,opt,name=CollectorEndpoint,json=collectorEndpoint,proto3" json:"CollectorEndpoint,omitempty"`
	// [OPTIONAL]
	// User instructs reporter to include a user for basic http authentication
	// when sending spans to jaeger-collector.
	// Default is not set.
	User string `protobuf:"bytes,8,opt,name=User,json=user,proto3" json:"User,omitempty"`
	// [OPTIONAL]
	// Password instructs reporter to include a password for basic http authentication
	// when sending spans to jaeger-collector.
	// Default is not set.
	Password string `protobuf:"bytes,9,opt,name=Password,json=password,proto3" json:"Password,omitempty"`
	// [OPTIONAL]
	// HTTPHeaders instructs the reporter to add these headers to the http request
	// when reporting spans. This field takes effect only when using HTTPTransport
	// by setting the CollectorEndpoint.
	// Default is not set.
	HTTPHeaders   map[string]string `protobuf:"bytes,10,rep,name=HTTPHeaders,json=httpHeaders,proto3" json:"HTTPHeaders,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JaegerReporterSpec) Reset() {
	*x = JaegerReporterSpec{}
	mi := &file_app_v1_tracer_jaegertracer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JaegerReporterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JaegerReporterSpec) ProtoMessage() {}

func (x *JaegerReporterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_tracer_jaegertracer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JaegerReporterSpec.ProtoReflect.Descriptor instead.
func (*JaegerReporterSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_tracer_jaegertracer_proto_rawDescGZIP(), []int{3}
}

func (x *JaegerReporterSpec) GetQueueSize() int32 {
	if x != nil {
		return x.QueueSize
	}
	return 0
}

func (x *JaegerReporterSpec) GetBufferFlushInterval() int32 {
	if x != nil {
		return x.BufferFlushInterval
	}
	return 0
}

func (x *JaegerReporterSpec) GetLogSpans() bool {
	if x != nil {
		return x.LogSpans
	}
	return false
}

func (x *JaegerReporterSpec) GetLocalAgentHostPort() string {
	if x != nil {
		return x.LocalAgentHostPort
	}
	return ""
}

func (x *JaegerReporterSpec) GetDisableAttemptReconnecting() bool {
	if x != nil {
		return x.DisableAttemptReconnecting
	}
	return false
}

func (x *JaegerReporterSpec) GetAttemptReconnectInterval() int32 {
	if x != nil {
		return x.AttemptReconnectInterval
	}
	return 0
}

func (x *JaegerReporterSpec) GetCollectorEndpoint() string {
	if x != nil {
		return x.CollectorEndpoint
	}
	return ""
}

func (x *JaegerReporterSpec) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *JaegerReporterSpec) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *JaegerReporterSpec) GetHTTPHeaders() map[string]string {
	if x != nil {
		return x.HTTPHeaders
	}
	return nil
}

type JaegerHeadersSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// JaegerDebugHeader is the name of HTTP header or a TextMap carrier key which,
	// if found in the carrier, forces the trace to be sampled as "debug" trace.
	// The value of the header is recorded as the tag on the root span,
	// so that the trace can be found in the UI using this value as a correlation ID.
	// Default is not set.
	JaegerDebugHeader string `protobuf:"bytes,1,opt,name=JaegerDebugHeader,json=jaegerDebugHeader,proto3" json:"JaegerDebugHeader,omitempty"`
	// [OPTIONAL]
	// JaegerBaggageHeader is the name of the HTTP header that is used to submit baggage.
	// It differs from TraceBaggageHeaderPrefix in that it can be used
	// only in cases where a root span does not exist.
	// Default is not set.
	JaegerBaggageHeader string `protobuf:"bytes,2,opt,name=JaegerBaggageHeader,json=jaegerBaggageHeader,proto3" json:"JaegerBaggageHeader,omitempty"`
	// [OPTIONAL]
	// TraceContextHeaderName is the http header name used to propagate tracing context.
	// This must be in lower-case to avoid mismatches when decoding incoming headers.
	// Default is not set.
	TraceContextHeaderName string `protobuf:"bytes,3,opt,name=TraceContextHeaderName,json=traceContextHeaderName,proto3" json:"TraceContextHeaderName,omitempty"`
	// [OPTIONAL]
	// TraceBaggageHeaderPrefix is the prefix for http headers used to propagate baggage.
	// This must be in lower-case to avoid mismatches when decoding incoming headers.
	// Default is not set.
	TraceBaggageHeaderPrefix string `protobuf:"bytes,4,opt,name=TraceBaggageHeaderPrefix,json=traceBaggageHeaderPrefix,proto3" json:"TraceBaggageHeaderPrefix,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *JaegerHeadersSpec) Reset() {
	*x = JaegerHeadersSpec{}
	mi := &file_app_v1_tracer_jaegertracer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JaegerHeadersSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JaegerHeadersSpec) ProtoMessage() {}

func (x *JaegerHeadersSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_tracer_jaegertracer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JaegerHeadersSpec.ProtoReflect.Descriptor instead.
func (*JaegerHeadersSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_tracer_jaegertracer_proto_rawDescGZIP(), []int{4}
}

func (x *JaegerHeadersSpec) GetJaegerDebugHeader() string {
	if x != nil {
		return x.JaegerDebugHeader
	}
	return ""
}

func (x *JaegerHeadersSpec) GetJaegerBaggageHeader() string {
	if x != nil {
		return x.JaegerBaggageHeader
	}
	return ""
}

func (x *JaegerHeadersSpec) GetTraceContextHeaderName() string {
	if x != nil {
		return x.TraceContextHeaderName
	}
	return ""
}

func (x *JaegerHeadersSpec) GetTraceBaggageHeaderPrefix() string {
	if x != nil {
		return x.TraceBaggageHeaderPrefix
	}
	return ""
}

type JaegerBaggageRestrictionsSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// DenyBaggageOnInitializationFailure controls the startup failure mode of
	// the baggage restriction manager.
	// If true, the manager will not allow any baggage to be written until
	// baggage restrictions have been retrieved from jaeger-agent.
	// If false, the manager wil allow any baggage to be written until baggage
	// restrictions have been retrieved from jaeger-agent.
	// Default is [false].
	DenyBaggageOnInitializationFailure bool `protobuf:"varint,1,opt,name=DenyBaggageOnInitializationFailure,json=denyBaggageOnInitializationFailure,proto3" json:"DenyBaggageOnInitializationFailure,omitempty"`
	// [OPTIONAL]
	// HostPort is the hostPort of jaeger-agent's baggage restrictions server
	// Default is not set.
	HostPort string `protobuf:"bytes,2,opt,name=HostPort,json=hostPort,proto3" json:"HostPort,omitempty"`
	// [OPTIONAL]
	// RefreshInterval controls how often the baggage restriction manager
	// will poll jaeger-agent for the most recent baggage restrictions.
	// The unit is milliseconds.
	// Default is not set.
	RefreshInterval int32 `protobuf:"varint,3,opt,name=RefreshInterval,json=refreshInterval,proto3" json:"RefreshInterval,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *JaegerBaggageRestrictionsSpec) Reset() {
	*x = JaegerBaggageRestrictionsSpec{}
	mi := &file_app_v1_tracer_jaegertracer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JaegerBaggageRestrictionsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JaegerBaggageRestrictionsSpec) ProtoMessage() {}

func (x *JaegerBaggageRestrictionsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_tracer_jaegertracer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JaegerBaggageRestrictionsSpec.ProtoReflect.Descriptor instead.
func (*JaegerBaggageRestrictionsSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_tracer_jaegertracer_proto_rawDescGZIP(), []int{5}
}

func (x *JaegerBaggageRestrictionsSpec) GetDenyBaggageOnInitializationFailure() bool {
	if x != nil {
		return x.DenyBaggageOnInitializationFailure
	}
	return false
}

func (x *JaegerBaggageRestrictionsSpec) GetHostPort() string {
	if x != nil {
		return x.HostPort
	}
	return ""
}

func (x *JaegerBaggageRestrictionsSpec) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

type JaegerThrottlerSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// HostPort of jaeger-agent's credit server.
	// Default is not set.
	HostPort string `protobuf:"bytes,1,opt,name=HostPort,json=hostPort,proto3" json:"HostPort,omitempty"`
	// [OPTIONAL]
	// RefreshInterval controls how often the throttler will poll jaeger-agent for more throttling credits.
	// The unit is milliseconds.
	// Default is not set.
	RefreshInterval int32 `protobuf:"varint,2,opt,name=RefreshInterval,json=refreshInterval,proto3" json:"RefreshInterval,omitempty"`
	// [OPTIONAL]
	// SynchronousInitialization determines whether or not the throttler should
	// synchronously fetch credits from the agent when an operation is seen for
	// the first time.
	// Default is [false].
	SynchronousInitialization bool `protobuf:"varint,3,opt,name=SynchronousInitialization,json=synchronousInitialization,proto3" json:"SynchronousInitialization,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *JaegerThrottlerSpec) Reset() {
	*x = JaegerThrottlerSpec{}
	mi := &file_app_v1_tracer_jaegertracer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JaegerThrottlerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JaegerThrottlerSpec) ProtoMessage() {}

func (x *JaegerThrottlerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_tracer_jaegertracer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JaegerThrottlerSpec.ProtoReflect.Descriptor instead.
func (*JaegerThrottlerSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_tracer_jaegertracer_proto_rawDescGZIP(), []int{6}
}

func (x *JaegerThrottlerSpec) GetHostPort() string {
	if x != nil {
		return x.HostPort
	}
	return ""
}

func (x *JaegerThrottlerSpec) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *JaegerThrottlerSpec) GetSynchronousInitialization() bool {
	if x != nil {
		return x.SynchronousInitialization
	}
	return false
}

var File_app_v1_tracer_jaegertracer_proto protoreflect.FileDescriptor

var file_app_v1_tracer_jaegertracer_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2f,
	0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x1a, 0x1a, 0x61, 0x70, 0x70, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x01, 0x0a, 0x0c, 0x4a,
	0x61, 0x65, 0x67, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0a, 0x41,
	0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0xba, 0x48, 0x0a, 0x72, 0x08, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x31, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x4b, 0x69,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xba, 0x48, 0x10, 0x72, 0x0e, 0x0a,
	0x0c, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2c, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22,
	0x8d, 0x09, 0x0a, 0x10, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x50, 0x43, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x70, 0x63, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x31, 0x32, 0x38, 0x42, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x31, 0x32, 0x38, 0x42,
	0x69, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12,
	0x36, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x61, 0x65, 0x67, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x13,
	0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x13, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x72,
	0x12, 0x3f, 0x0a, 0x0d, 0x4b, 0x38, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x38, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x0d, 0x6b, 0x38, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x51, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x13, 0x4d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4a,
	0x61, 0x65, 0x67, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x66, 0x0a,
	0x14, 0x54, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x77, 0x61, 0x72, 0x65, 0x53, 0x70, 0x61, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x77, 0x61, 0x72,
	0x65, 0x53, 0x70, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x14, 0x74, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x77, 0x61, 0x72, 0x65, 0x53, 0x70, 0x61, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46,
	0x0a, 0x18, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x53, 0x70, 0x61, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x54, 0x72, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x77, 0x61, 0x72, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xd9, 0x02, 0x0a, 0x11, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x61, 0x65,
	0x67, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4a,
	0x61, 0x65, 0x67, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x11,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x52,
	0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5f, 0x0a, 0x11, 0x4a, 0x61,
	0x65, 0x67, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x63, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4c,
	0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x04, 0x22, 0x99, 0x04, 0x0a, 0x12,
	0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x3e,
	0x0a, 0x1a, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3a,
	0x0a, 0x18, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x18, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x4d, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x48, 0x54, 0x54, 0x50, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe7, 0x01, 0x0a, 0x11, 0x4a, 0x61, 0x65, 0x67,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a,
	0x11, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x44, 0x65, 0x62, 0x75, 0x67, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x4a,
	0x61, 0x65, 0x67, 0x65, 0x72, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72,
	0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x16, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x63, 0x65, 0x42, 0x61,
	0x67, 0x67, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x74, 0x72, 0x61, 0x63, 0x65, 0x42, 0x61,
	0x67, 0x67, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x22, 0xb5, 0x01, 0x0a, 0x1d, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x42, 0x61, 0x67, 0x67,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x4e, 0x0a, 0x22, 0x44, 0x65, 0x6e, 0x79, 0x42, 0x61, 0x67, 0x67, 0x61,
	0x67, 0x65, 0x4f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x22, 0x64, 0x65, 0x6e, 0x79, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x99, 0x01, 0x0a, 0x13, 0x4a, 0x61,
	0x65, 0x67, 0x65, 0x72, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x19, 0x53, 0x79, 0x6e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x79, 0x6e, 0x63,
	0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x6f, 0x6e, 0x2d, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2f, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x6f, 0x6e, 0x2d, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_app_v1_tracer_jaegertracer_proto_rawDescOnce sync.Once
	file_app_v1_tracer_jaegertracer_proto_rawDescData []byte
)

func file_app_v1_tracer_jaegertracer_proto_rawDescGZIP() []byte {
	file_app_v1_tracer_jaegertracer_proto_rawDescOnce.Do(func() {
		file_app_v1_tracer_jaegertracer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_app_v1_tracer_jaegertracer_proto_rawDesc), len(file_app_v1_tracer_jaegertracer_proto_rawDesc)))
	})
	return file_app_v1_tracer_jaegertracer_proto_rawDescData
}

var file_app_v1_tracer_jaegertracer_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_app_v1_tracer_jaegertracer_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_app_v1_tracer_jaegertracer_proto_goTypes = []any{
	(JaegerSamplerSpec_JaegerSamplerType)(0), // 0: app.v1.JaegerSamplerSpec.JaegerSamplerType
	(*JaegerTracer)(nil),                     // 1: app.v1.JaegerTracer
	(*JaegerTracerSpec)(nil),                 // 2: app.v1.JaegerTracerSpec
	(*JaegerSamplerSpec)(nil),                // 3: app.v1.JaegerSamplerSpec
	(*JaegerReporterSpec)(nil),               // 4: app.v1.JaegerReporterSpec
	(*JaegerHeadersSpec)(nil),                // 5: app.v1.JaegerHeadersSpec
	(*JaegerBaggageRestrictionsSpec)(nil),    // 6: app.v1.JaegerBaggageRestrictionsSpec
	(*JaegerThrottlerSpec)(nil),              // 7: app.v1.JaegerThrottlerSpec
	nil,                                      // 8: app.v1.JaegerTracerSpec.TagsEntry
	nil,                                      // 9: app.v1.JaegerTracerSpec.MiddlewareSpanNamesEntry
	nil,                                      // 10: app.v1.JaegerTracerSpec.TripperwareSpanNamesEntry
	nil,                                      // 11: app.v1.JaegerReporterSpec.HTTPHeadersEntry
	(*kernel.Metadata)(nil),                  // 12: kernel.Metadata
	(*K8SAttributesSpec)(nil),                // 13: app.v1.K8sAttributesSpec
	(*ContainerAttributesSpec)(nil),          // 14: app.v1.ContainerAttributesSpec
	(*HostAttributesSpec)(nil),               // 15: app.v1.HostAttributesSpec
}
var file_app_v1_tracer_jaegertracer_proto_depIdxs = []int32{
	12, // 0: app.v1.JaegerTracer.Metadata:type_name -> kernel.Metadata
	2,  // 1: app.v1.JaegerTracer.Spec:type_name -> app.v1.JaegerTracerSpec
	8,  // 2: app.v1.JaegerTracerSpec.Tags:type_name -> app.v1.JaegerTracerSpec.TagsEntry
	3,  // 3: app.v1.JaegerTracerSpec.Sampler:type_name -> app.v1.JaegerSamplerSpec
	4,  // 4: app.v1.JaegerTracerSpec.Reporter:type_name -> app.v1.JaegerReporterSpec
	5,  // 5: app.v1.JaegerTracerSpec.Headers:type_name -> app.v1.JaegerHeadersSpec
	6,  // 6: app.v1.JaegerTracerSpec.BaggageRestrictions:type_name -> app.v1.JaegerBaggageRestrictionsSpec
	7,  // 7: app.v1.JaegerTracerSpec.Throttler:type_name -> app.v1.JaegerThrottlerSpec
	13, // 8: app.v1.JaegerTracerSpec.K8sAttributes:type_name -> app.v1.K8sAttributesSpec
	14, // 9: app.v1.JaegerTracerSpec.ContainerAttributes:type_name -> app.v1.ContainerAttributesSpec
	15, // 10: app.v1.JaegerTracerSpec.HostAttributes:type_name -> app.v1.HostAttributesSpec
	9,  // 11: app.v1.JaegerTracerSpec.MiddlewareSpanNames:type_name -> app.v1.JaegerTracerSpec.MiddlewareSpanNamesEntry
	10, // 12: app.v1.JaegerTracerSpec.TripperwareSpanNames:type_name -> app.v1.JaegerTracerSpec.TripperwareSpanNamesEntry
	0,  // 13: app.v1.JaegerSamplerSpec.Type:type_name -> app.v1.JaegerSamplerSpec.JaegerSamplerType
	11, // 14: app.v1.JaegerReporterSpec.HTTPHeaders:type_name -> app.v1.JaegerReporterSpec.HTTPHeadersEntry
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_app_v1_tracer_jaegertracer_proto_init() }
func file_app_v1_tracer_jaegertracer_proto_init() {
	if File_app_v1_tracer_jaegertracer_proto != nil {
		return
	}
	file_app_v1_tracer_tracer_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_app_v1_tracer_jaegertracer_proto_rawDesc), len(file_app_v1_tracer_jaegertracer_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_app_v1_tracer_jaegertracer_proto_goTypes,
		DependencyIndexes: file_app_v1_tracer_jaegertracer_proto_depIdxs,
		EnumInfos:         file_app_v1_tracer_jaegertracer_proto_enumTypes,
		MessageInfos:      file_app_v1_tracer_jaegertracer_proto_msgTypes,
	}.Build()
	File_app_v1_tracer_jaegertracer_proto = out.File
	file_app_v1_tracer_jaegertracer_proto_goTypes = nil
	file_app_v1_tracer_jaegertracer_proto_depIdxs = nil
}
