// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.0
// source: app/v1/authn/key.proto

package v1

import (
	kernel "github.com/aileron-gateway/aileron-gateway/apis/kernel"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KeyAuthnMiddleware resource definition.
// apiVersion="app/v1", kind="KeyAuthnMiddleware".
type KeyAuthnMiddleware struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	APIVersion    string                  `protobuf:"bytes,1,opt,name=APIVersion,json=apiVersion,proto3" json:"APIVersion,omitempty"`
	Kind          string                  `protobuf:"bytes,2,opt,name=Kind,json=kind,proto3" json:"Kind,omitempty"`
	Metadata      *kernel.Metadata        `protobuf:"bytes,3,opt,name=Metadata,json=metadata,proto3" json:"Metadata,omitempty"`
	Spec          *KeyAuthnMiddlewareSpec `protobuf:"bytes,4,opt,name=Spec,json=spec,proto3" json:"Spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyAuthnMiddleware) Reset() {
	*x = KeyAuthnMiddleware{}
	mi := &file_app_v1_authn_key_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyAuthnMiddleware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyAuthnMiddleware) ProtoMessage() {}

func (x *KeyAuthnMiddleware) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_authn_key_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyAuthnMiddleware.ProtoReflect.Descriptor instead.
func (*KeyAuthnMiddleware) Descriptor() ([]byte, []int) {
	return file_app_v1_authn_key_proto_rawDescGZIP(), []int{0}
}

func (x *KeyAuthnMiddleware) GetAPIVersion() string {
	if x != nil {
		return x.APIVersion
	}
	return ""
}

func (x *KeyAuthnMiddleware) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *KeyAuthnMiddleware) GetMetadata() *kernel.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *KeyAuthnMiddleware) GetSpec() *KeyAuthnMiddlewareSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// KeyAuthnMiddlewareSpec is the specifications for the KeyAuthnMiddleware object.
type KeyAuthnMiddlewareSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// Logger is the reference to a Logger object.
	// Referred object must implement Logger interface.
	// Default Logger is used when not set.
	Logger *kernel.Reference `protobuf:"bytes,1,opt,name=Logger,json=logger,proto3" json:"Logger,omitempty"`
	// [OPTIONAL]
	// ErrorHandler is the reference to a ErrorHandler object.
	// Referred object must implement ErrorHandler interface.
	// Default error handler is used when not set.
	ErrorHandler *kernel.Reference `protobuf:"bytes,2,opt,name=ErrorHandler,json=errorHandler,proto3" json:"ErrorHandler,omitempty"`
	// [OPTIONAL]
	// ClaimsKey is the key to set user attibutes in the context.
	// Claims can be used for authorization if necessary.
	// If not set, default value is used.
	// Default is ["AuthnClaims"].
	ClaimsKey string `protobuf:"bytes,3,opt,name=ClaimsKey,json=claimsKey,proto3" json:"ClaimsKey,omitempty"`
	// [OPTIONAL]
	// KeepCredentials is the flag to keep credentials in the header.
	// That means the HTTP header specified in KeyHeaderName is not removed.
	// If true, the API key header will be proxied upstream services.
	// Default is [false].
	KeepCredentials bool `protobuf:"varint,4,opt,name=KeepCredentials,json=keepCredentials,proto3" json:"KeepCredentials,omitempty"`
	// [OPTIONAL]
	// KeyHeaderName is the HTTP header name to get API key from.
	// Default is ["X-Api-Key"].
	KeyHeaderName string `protobuf:"bytes,5,opt,name=KeyHeaderName,json=keyHeaderName,proto3" json:"KeyHeaderName,omitempty"`
	// [OPTIONAL]
	// HashAlg is the algorithm to calculate hash value.
	// Set HMACSecret to use HMAC instead of plain hash.
	// If not set, API keys are treated as plain text keys.
	// Default is not set.
	HashAlg kernel.HashAlg `protobuf:"varint,6,opt,name=HashAlg,json=hashAlg,proto3,enum=kernel.HashAlg" json:"HashAlg,omitempty"`
	// [OPTIONAL]
	// HMACSecret is the Base64 encoded secret for HMAC.
	// The secret should be at least 64 bytes with enough entropy.
	// Use for example https://generate.plus/en/base64.
	// Default is not set.
	HMACSecret string `protobuf:"bytes,7,opt,name=HMACSecret,json=hmacSecret,proto3" json:"HMACSecret,omitempty"`
	// [OPTIONAL]
	// Providers is the api key provider to use.
	// If not set, EnvProvider with default values are used.
	//
	// Types that are valid to be assigned to Providers:
	//
	//	*KeyAuthnMiddlewareSpec_EnvProvider
	//	*KeyAuthnMiddlewareSpec_FileProvider
	Providers     isKeyAuthnMiddlewareSpec_Providers `protobuf_oneof:"Providers"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyAuthnMiddlewareSpec) Reset() {
	*x = KeyAuthnMiddlewareSpec{}
	mi := &file_app_v1_authn_key_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyAuthnMiddlewareSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyAuthnMiddlewareSpec) ProtoMessage() {}

func (x *KeyAuthnMiddlewareSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_authn_key_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyAuthnMiddlewareSpec.ProtoReflect.Descriptor instead.
func (*KeyAuthnMiddlewareSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_authn_key_proto_rawDescGZIP(), []int{1}
}

func (x *KeyAuthnMiddlewareSpec) GetLogger() *kernel.Reference {
	if x != nil {
		return x.Logger
	}
	return nil
}

func (x *KeyAuthnMiddlewareSpec) GetErrorHandler() *kernel.Reference {
	if x != nil {
		return x.ErrorHandler
	}
	return nil
}

func (x *KeyAuthnMiddlewareSpec) GetClaimsKey() string {
	if x != nil {
		return x.ClaimsKey
	}
	return ""
}

func (x *KeyAuthnMiddlewareSpec) GetKeepCredentials() bool {
	if x != nil {
		return x.KeepCredentials
	}
	return false
}

func (x *KeyAuthnMiddlewareSpec) GetKeyHeaderName() string {
	if x != nil {
		return x.KeyHeaderName
	}
	return ""
}

func (x *KeyAuthnMiddlewareSpec) GetHashAlg() kernel.HashAlg {
	if x != nil {
		return x.HashAlg
	}
	return kernel.HashAlg(0)
}

func (x *KeyAuthnMiddlewareSpec) GetHMACSecret() string {
	if x != nil {
		return x.HMACSecret
	}
	return ""
}

func (x *KeyAuthnMiddlewareSpec) GetProviders() isKeyAuthnMiddlewareSpec_Providers {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *KeyAuthnMiddlewareSpec) GetEnvProvider() *KeyAuthnEnvProvider {
	if x != nil {
		if x, ok := x.Providers.(*KeyAuthnMiddlewareSpec_EnvProvider); ok {
			return x.EnvProvider
		}
	}
	return nil
}

func (x *KeyAuthnMiddlewareSpec) GetFileProvider() *KeyAuthnFileProvider {
	if x != nil {
		if x, ok := x.Providers.(*KeyAuthnMiddlewareSpec_FileProvider); ok {
			return x.FileProvider
		}
	}
	return nil
}

type isKeyAuthnMiddlewareSpec_Providers interface {
	isKeyAuthnMiddlewareSpec_Providers()
}

type KeyAuthnMiddlewareSpec_EnvProvider struct {
	EnvProvider *KeyAuthnEnvProvider `protobuf:"bytes,15,opt,name=EnvProvider,json=envProvider,proto3,oneof"`
}

type KeyAuthnMiddlewareSpec_FileProvider struct {
	FileProvider *KeyAuthnFileProvider `protobuf:"bytes,16,opt,name=FileProvider,json=fileProvider,proto3,oneof"`
}

func (*KeyAuthnMiddlewareSpec_EnvProvider) isKeyAuthnMiddlewareSpec_Providers() {}

func (*KeyAuthnMiddlewareSpec_FileProvider) isKeyAuthnMiddlewareSpec_Providers() {}

type KeyAuthnEnvProvider struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// KeyPrefix is the prefix of environmental variable
	// that provides api keys.
	// If the prefix is "APIKEY_", then keys should be
	// set like "APIKEY_1=foo", "APIKEY_999=bar".
	// Note that the numbers can be zero padded which means
	// "APIKEY_1" and "APIKEY_001" are the same.
	// If empty string was set, default value is used.
	// Defailt is [GATEWAY_APIKEY_].
	KeyPrefix string `protobuf:"bytes,1,opt,name=KeyPrefix,json=keyPrefix,proto3" json:"KeyPrefix,omitempty"`
	// [OPTIONAL]
	// Encoding is the encoding algorithm used to decode passwords.
	// If set, all password strings are decoded with configured encoding.
	// Gateway will fail to start when failed to decoding.
	// Default is [false].
	Encoding      kernel.EncodingType `protobuf:"varint,2,opt,name=Encoding,json=encoding,proto3,enum=kernel.EncodingType" json:"Encoding,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyAuthnEnvProvider) Reset() {
	*x = KeyAuthnEnvProvider{}
	mi := &file_app_v1_authn_key_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyAuthnEnvProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyAuthnEnvProvider) ProtoMessage() {}

func (x *KeyAuthnEnvProvider) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_authn_key_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyAuthnEnvProvider.ProtoReflect.Descriptor instead.
func (*KeyAuthnEnvProvider) Descriptor() ([]byte, []int) {
	return file_app_v1_authn_key_proto_rawDescGZIP(), []int{2}
}

func (x *KeyAuthnEnvProvider) GetKeyPrefix() string {
	if x != nil {
		return x.KeyPrefix
	}
	return ""
}

func (x *KeyAuthnEnvProvider) GetEncoding() kernel.EncodingType {
	if x != nil {
		return x.Encoding
	}
	return kernel.EncodingType(0)
}

type KeyAuthnFileProvider struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// Paths are file paths that contains api keys.
	// If nothing set, all authentication challenge will fail.
	// If a line contains ":" character, is considered to be
	// a line in the format of "<id>:<key>" and the
	// <id> part is used for key lookup.
	// Default is not set.
	Paths []string `protobuf:"bytes,1,rep,name=Paths,json=paths,proto3" json:"Paths,omitempty"`
	// [OPTIONAL]
	// Encoding is the encoding algorithm used to decode passwords.
	// If set, all password strings are decoded with configured encoding.
	// Gateway will fail to start when failed to decoding.
	// Default is [false].
	Encoding      kernel.EncodingType `protobuf:"varint,2,opt,name=Encoding,json=encoding,proto3,enum=kernel.EncodingType" json:"Encoding,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyAuthnFileProvider) Reset() {
	*x = KeyAuthnFileProvider{}
	mi := &file_app_v1_authn_key_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyAuthnFileProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyAuthnFileProvider) ProtoMessage() {}

func (x *KeyAuthnFileProvider) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_authn_key_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyAuthnFileProvider.ProtoReflect.Descriptor instead.
func (*KeyAuthnFileProvider) Descriptor() ([]byte, []int) {
	return file_app_v1_authn_key_proto_rawDescGZIP(), []int{3}
}

func (x *KeyAuthnFileProvider) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *KeyAuthnFileProvider) GetEncoding() kernel.EncodingType {
	if x != nil {
		return x.Encoding
	}
	return kernel.EncodingType(0)
}

var File_app_v1_authn_key_proto protoreflect.FileDescriptor

var file_app_v1_authn_key_proto_rawDesc = string([]byte{
	0x0a, 0x16, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2f, 0x6b,
	0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31,
	0x1a, 0x15, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f,
	0x68, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xaa, 0x01, 0x0a, 0x12, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x4d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x04, 0x53, 0x70,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xc5,
	0x03, 0x0a, 0x16, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x06, 0x4c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x4b, 0x65, 0x65,
	0x70, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x48, 0x61, 0x73,
	0x68, 0x41, 0x6c, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x52, 0x07, 0x68, 0x61, 0x73,
	0x68, 0x41, 0x6c, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x4d, 0x41, 0x43, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6d, 0x61, 0x63, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x45, 0x6e, 0x76, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x22, 0x65, 0x0a, 0x13, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74,
	0x68, 0x6e, 0x45, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x30, 0x0a, 0x08, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x5e, 0x0a,
	0x14, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x38, 0x5a,
	0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x69, 0x6c, 0x65,
	0x72, 0x6f, 0x6e, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61, 0x69, 0x6c, 0x65,
	0x72, 0x6f, 0x6e, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_app_v1_authn_key_proto_rawDescOnce sync.Once
	file_app_v1_authn_key_proto_rawDescData []byte
)

func file_app_v1_authn_key_proto_rawDescGZIP() []byte {
	file_app_v1_authn_key_proto_rawDescOnce.Do(func() {
		file_app_v1_authn_key_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_app_v1_authn_key_proto_rawDesc), len(file_app_v1_authn_key_proto_rawDesc)))
	})
	return file_app_v1_authn_key_proto_rawDescData
}

var file_app_v1_authn_key_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_app_v1_authn_key_proto_goTypes = []any{
	(*KeyAuthnMiddleware)(nil),     // 0: app.v1.KeyAuthnMiddleware
	(*KeyAuthnMiddlewareSpec)(nil), // 1: app.v1.KeyAuthnMiddlewareSpec
	(*KeyAuthnEnvProvider)(nil),    // 2: app.v1.KeyAuthnEnvProvider
	(*KeyAuthnFileProvider)(nil),   // 3: app.v1.KeyAuthnFileProvider
	(*kernel.Metadata)(nil),        // 4: kernel.Metadata
	(*kernel.Reference)(nil),       // 5: kernel.Reference
	(kernel.HashAlg)(0),            // 6: kernel.HashAlg
	(kernel.EncodingType)(0),       // 7: kernel.EncodingType
}
var file_app_v1_authn_key_proto_depIdxs = []int32{
	4, // 0: app.v1.KeyAuthnMiddleware.Metadata:type_name -> kernel.Metadata
	1, // 1: app.v1.KeyAuthnMiddleware.Spec:type_name -> app.v1.KeyAuthnMiddlewareSpec
	5, // 2: app.v1.KeyAuthnMiddlewareSpec.Logger:type_name -> kernel.Reference
	5, // 3: app.v1.KeyAuthnMiddlewareSpec.ErrorHandler:type_name -> kernel.Reference
	6, // 4: app.v1.KeyAuthnMiddlewareSpec.HashAlg:type_name -> kernel.HashAlg
	2, // 5: app.v1.KeyAuthnMiddlewareSpec.EnvProvider:type_name -> app.v1.KeyAuthnEnvProvider
	3, // 6: app.v1.KeyAuthnMiddlewareSpec.FileProvider:type_name -> app.v1.KeyAuthnFileProvider
	7, // 7: app.v1.KeyAuthnEnvProvider.Encoding:type_name -> kernel.EncodingType
	7, // 8: app.v1.KeyAuthnFileProvider.Encoding:type_name -> kernel.EncodingType
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_app_v1_authn_key_proto_init() }
func file_app_v1_authn_key_proto_init() {
	if File_app_v1_authn_key_proto != nil {
		return
	}
	file_app_v1_authn_key_proto_msgTypes[1].OneofWrappers = []any{
		(*KeyAuthnMiddlewareSpec_EnvProvider)(nil),
		(*KeyAuthnMiddlewareSpec_FileProvider)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_app_v1_authn_key_proto_rawDesc), len(file_app_v1_authn_key_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_app_v1_authn_key_proto_goTypes,
		DependencyIndexes: file_app_v1_authn_key_proto_depIdxs,
		MessageInfos:      file_app_v1_authn_key_proto_msgTypes,
	}.Build()
	File_app_v1_authn_key_proto = out.File
	file_app_v1_authn_key_proto_goTypes = nil
	file_app_v1_authn_key_proto_depIdxs = nil
}
