// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.0
// source: app/v1/encoding.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kernel "github.com/aileron-gateway/aileron-gateway/apis/kernel"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SecureEncoderSpec is the specification of a secure encoder.
type SecureEncoderSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// HashAlg is the algorithm to calculate hash value by HMAC.
	// Default is SHA256, or HMAC-Sha256.
	HashAlg kernel.HashAlg `protobuf:"varint,1,opt,name=HashAlg,json=hashAlg,proto3,enum=kernel.HashAlg" json:"HashAlg,omitempty"`
	// [OPTIONAL]
	// HMACSecret is the Base64 encoded secret for HMAC.
	// The secret should be at least 64 bytes with enough entropy.
	// Use for example https://generate.plus/en/base64.
	// Default value is Base64(sha512(hostname + uid + gid)) but do not use it in production.
	HMACSecret string `protobuf:"bytes,2,opt,name=HMACSecret,json=hmacSecret,proto3" json:"HMACSecret,omitempty"`
	// [OPTIONAL]
	// CommonKeyCryptType is the algorithm used for encrypting the data.
	// Set CryptSecret using at production.
	// Default is [AESGCM].
	CommonKeyCryptType kernel.CommonKeyCryptType `protobuf:"varint,3,opt,name=CommonKeyCryptType,json=commonKeyCryptType,proto3,enum=kernel.CommonKeyCryptType" json:"CommonKeyCryptType,omitempty"`
	// [OPTIONAL]
	// CryptSecret is the Base64 encoded secret for common key encryption.
	// The secret length depends on the crypt algorithms.
	// Use for example https://generate.plus/en/base64.
	// Default value is Base64(sha256(hostname + uid + gid)) but do not use it in production.
	CryptSecret string `protobuf:"bytes,4,opt,name=CryptSecret,json=cryptSecret,proto3" json:"CryptSecret,omitempty"`
	// [OPTIONAL]
	// EnableCompression compress the encoded values by Gzip.
	EnableCompression bool `protobuf:"varint,6,opt,name=EnableCompression,json=enableCompression,proto3" json:"EnableCompression,omitempty"`
	// [OPTIONAL]
	// DisableHMAC is the flag to disable HMAC hashing.
	// Disabling HMAC slightly increase the performance but it is not recommended
	// from the stand point of security.
	// Never disable HMAC when using the encoder for cookie values or something exposed to clients.
	DisableHMAC bool `protobuf:"varint,7,opt,name=DisableHMAC,json=disableHMAC,proto3" json:"DisableHMAC,omitempty"`
	//	[OPTIONAL] DisableEncryption is the flag to disable common key encryption.
	//
	// Disabling encryption slightly increase the performance but it is not recommended
	// from the stand point of security.
	// Never disable encryption when using the encoder for cookie values or something exposed to clients.
	DisableEncryption bool `protobuf:"varint,8,opt,name=DisableEncryption,json=disableEncryption,proto3" json:"DisableEncryption,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SecureEncoderSpec) Reset() {
	*x = SecureEncoderSpec{}
	mi := &file_app_v1_encoding_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecureEncoderSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureEncoderSpec) ProtoMessage() {}

func (x *SecureEncoderSpec) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_encoding_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureEncoderSpec.ProtoReflect.Descriptor instead.
func (*SecureEncoderSpec) Descriptor() ([]byte, []int) {
	return file_app_v1_encoding_proto_rawDescGZIP(), []int{0}
}

func (x *SecureEncoderSpec) GetHashAlg() kernel.HashAlg {
	if x != nil {
		return x.HashAlg
	}
	return kernel.HashAlg(0)
}

func (x *SecureEncoderSpec) GetHMACSecret() string {
	if x != nil {
		return x.HMACSecret
	}
	return ""
}

func (x *SecureEncoderSpec) GetCommonKeyCryptType() kernel.CommonKeyCryptType {
	if x != nil {
		return x.CommonKeyCryptType
	}
	return kernel.CommonKeyCryptType(0)
}

func (x *SecureEncoderSpec) GetCryptSecret() string {
	if x != nil {
		return x.CryptSecret
	}
	return ""
}

func (x *SecureEncoderSpec) GetEnableCompression() bool {
	if x != nil {
		return x.EnableCompression
	}
	return false
}

func (x *SecureEncoderSpec) GetDisableHMAC() bool {
	if x != nil {
		return x.DisableHMAC
	}
	return false
}

func (x *SecureEncoderSpec) GetDisableEncryption() bool {
	if x != nil {
		return x.DisableEncryption
	}
	return false
}

var File_app_v1_encoding_proto protoreflect.FileDescriptor

var file_app_v1_encoding_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x70, 0x1a, 0x1b, 0x62, 0x75,
	0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xfa, 0x02, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x41, 0x6c,
	0x67, 0x12, 0x36, 0x0a, 0x0a, 0x48, 0x4d, 0x41, 0x43, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xba, 0x48, 0x13, 0x72, 0x11, 0x32, 0x0f, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2b, 0x2f, 0x3d, 0x5d, 0x2b, 0x52, 0x0a, 0x68,
	0x6d, 0x61, 0x63, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x43, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xba, 0x48, 0x13, 0x72,
	0x11, 0x32, 0x0f, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2b, 0x2f, 0x3d,
	0x5d, 0x2b, 0x52, 0x0b, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x4d, 0x41, 0x43, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x4d, 0x41, 0x43, 0x12,
	0x2c, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x38, 0x5a,
	0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x69, 0x6c, 0x65,
	0x72, 0x6f, 0x6e, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61, 0x69, 0x6c, 0x65,
	0x72, 0x6f, 0x6e, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_app_v1_encoding_proto_rawDescOnce sync.Once
	file_app_v1_encoding_proto_rawDescData = file_app_v1_encoding_proto_rawDesc
)

func file_app_v1_encoding_proto_rawDescGZIP() []byte {
	file_app_v1_encoding_proto_rawDescOnce.Do(func() {
		file_app_v1_encoding_proto_rawDescData = protoimpl.X.CompressGZIP(file_app_v1_encoding_proto_rawDescData)
	})
	return file_app_v1_encoding_proto_rawDescData
}

var file_app_v1_encoding_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_app_v1_encoding_proto_goTypes = []any{
	(*SecureEncoderSpec)(nil),      // 0: app.SecureEncoderSpec
	(kernel.HashAlg)(0),            // 1: kernel.HashAlg
	(kernel.CommonKeyCryptType)(0), // 2: kernel.CommonKeyCryptType
}
var file_app_v1_encoding_proto_depIdxs = []int32{
	1, // 0: app.SecureEncoderSpec.HashAlg:type_name -> kernel.HashAlg
	2, // 1: app.SecureEncoderSpec.CommonKeyCryptType:type_name -> kernel.CommonKeyCryptType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_app_v1_encoding_proto_init() }
func file_app_v1_encoding_proto_init() {
	if File_app_v1_encoding_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_app_v1_encoding_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_app_v1_encoding_proto_goTypes,
		DependencyIndexes: file_app_v1_encoding_proto_depIdxs,
		MessageInfos:      file_app_v1_encoding_proto_msgTypes,
	}.Build()
	File_app_v1_encoding_proto = out.File
	file_app_v1_encoding_proto_rawDesc = nil
	file_app_v1_encoding_proto_goTypes = nil
	file_app_v1_encoding_proto_depIdxs = nil
}
