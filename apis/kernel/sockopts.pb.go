// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.0
// source: kernel/sockopts.proto

package kernel

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SockOption is the options for networking sockets.
type SockOption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// SOOption is the socket options.
	// See https://man7.org/linux/man-pages/man7/socket.7.html
	SOOption *SockSOOption `protobuf:"bytes,1,opt,name=SOOption,json=soOption,proto3" json:"SOOption,omitempty"`
	// [OPTIONAL]
	// IPOption is the ip socket options.
	// See https://man7.org/linux/man-pages/man7/ip.7.html
	IPOption *SockIPOption `protobuf:"bytes,2,opt,name=IPOption,json=ipOption,proto3" json:"IPOption,omitempty"`
	// [OPTIONAL]
	// IPV6Option is the ipv6 socket options.
	// See https://man7.org/linux/man-pages/man7/ipv6.7.html
	IPV6Option *SockIPV6Option `protobuf:"bytes,3,opt,name=IPV6Option,json=ipv6Option,proto3" json:"IPV6Option,omitempty"`
	// [OPTIONAL]
	// TCPOption is the TCP socket options.
	// See https://man7.org/linux/man-pages/man7/tcp.7.html
	TCPOption *SockTCPOption `protobuf:"bytes,4,opt,name=TCPOption,json=tcpOption,proto3" json:"TCPOption,omitempty"`
	// [OPTIONAL]
	// UDPOption is the UDP socket options.
	// See https://man7.org/linux/man-pages/man7/udp.7.html
	UDPOption     *SockUDPOption `protobuf:"bytes,5,opt,name=UDPOption,json=udpOption,proto3" json:"UDPOption,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SockOption) Reset() {
	*x = SockOption{}
	mi := &file_kernel_sockopts_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SockOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SockOption) ProtoMessage() {}

func (x *SockOption) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_sockopts_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SockOption.ProtoReflect.Descriptor instead.
func (*SockOption) Descriptor() ([]byte, []int) {
	return file_kernel_sockopts_proto_rawDescGZIP(), []int{0}
}

func (x *SockOption) GetSOOption() *SockSOOption {
	if x != nil {
		return x.SOOption
	}
	return nil
}

func (x *SockOption) GetIPOption() *SockIPOption {
	if x != nil {
		return x.IPOption
	}
	return nil
}

func (x *SockOption) GetIPV6Option() *SockIPV6Option {
	if x != nil {
		return x.IPV6Option
	}
	return nil
}

func (x *SockOption) GetTCPOption() *SockTCPOption {
	if x != nil {
		return x.TCPOption
	}
	return nil
}

func (x *SockOption) GetUDPOption() *SockUDPOption {
	if x != nil {
		return x.UDPOption
	}
	return nil
}

// SockSOOption is socket options for SOL_SOCKET level.
// See https://man7.org/linux/man-pages/man7/socket.7.html
type SockSOOption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// BindToDevice is the value of SO_BINDTODEVICE.
	// See socket(7) of linux manual page for the details.
	// This option works only for unix.
	// This field will be ignored if the value is not set or set to empty string.
	// Default is not set.
	BindToDevice string `protobuf:"bytes,1,opt,name=BindToDevice,json=bindToDevice,proto3" json:"BindToDevice,omitempty"`
	// [OPTIONAL]
	// Debug is the value of SO_DEBUG.
	// See socket(7) of linux manual page for the details.
	// This socket option is defined in POSIX.
	// This field will be ignored if the value is not set or set to false.
	// Default is not set.
	Debug bool `protobuf:"varint,2,opt,name=Debug,json=debug,proto3" json:"Debug,omitempty"`
	// [OPTIONAL]
	// KeepAlive is the value of SO_KEEPALIVE.
	// See socket(7) of linux manual page for the details.
	// This field will be ignored if the value is not set or set to false.
	// Default is not set.
	KeepAlive bool `protobuf:"varint,4,opt,name=KeepAlive,json=keepAlive,proto3" json:"KeepAlive,omitempty"`
	// [OPTIONAL]
	// Linger is the value of SO_LINGER.
	// See socket(7) of linux manual page for the details.
	// This field will be ignored if the value is zero or negative.
	// Default is not set.
	Linger int32 `protobuf:"varint,5,opt,name=Linger,json=linger,proto3" json:"Linger,omitempty"`
	// [OPTIONAL]
	// Mark is the value of SO_MARK.
	// See socket(7) of linux manual page for the details.
	// This option works only for unix.
	// This field will be ignored if the value is zero or negative.
	// Default is not set.
	Mark int32 `protobuf:"varint,6,opt,name=Mark,json=mark,proto3" json:"Mark,omitempty"`
	// [OPTIONAL]
	// ReceiveBuffer is the value of SO_RCVBUF.
	// See socket(7) of linux manual page for the details.
	// This field will be ignored if the value is zero or negative.
	// Default is not set.
	ReceiveBuffer int32 `protobuf:"varint,7,opt,name=ReceiveBuffer,json=receiveBuffer,proto3" json:"ReceiveBuffer,omitempty"`
	// [OPTIONAL]
	// ReceiveBufferForce is the value of SO_RCVBUFFORCE.
	// See socket(7) of linux manual page for the details.
	// This option works only for unix.
	// This field will be ignored if the value is zero or negative.
	// Default is not set.
	ReceiveBufferForce int32 `protobuf:"varint,8,opt,name=ReceiveBufferForce,json=receiveBufferForce,proto3" json:"ReceiveBufferForce,omitempty"`
	// [OPTIONAL]
	// ReceiveTimeout is the value of SO_RCVTIMEO.
	// Value unit is millisecond.
	// See socket(7) of linux manual page for the details.
	// This option works only for unix.
	// Operatin system's default will be used if the value is zero.
	// Default is not set.
	ReceiveTimeout int32 `protobuf:"varint,9,opt,name=ReceiveTimeout,json=receiveTimeout,proto3" json:"ReceiveTimeout,omitempty"`
	// [OPTIONAL]
	// SendTimeout is the value of SO_SNDTIMEO.
	// Value unit is millisecond.
	// See socket(7) of linux manual page for the details.
	// This option works only for unix.
	// This field will be ignored if the value is zero or negative.
	// Default is not set.
	SendTimeout int32 `protobuf:"varint,10,opt,name=SendTimeout,json=sendTimeout,proto3" json:"SendTimeout,omitempty"`
	// [OPTIONAL]
	// ReuseAddr is the value of SO_REUSEADDR.
	// See socket(7) of linux manual page for the details.
	// This field will be ignored if the value is not set or set to false.
	// Default is not set.
	ReuseAddr bool `protobuf:"varint,11,opt,name=ReuseAddr,json=reuseAddr,proto3" json:"ReuseAddr,omitempty"`
	// [OPTIONAL]
	// ReusePort is the value of SO_REUSEPORT.
	// See socket(7) of linux manual page for the details.
	// This option works only for unix.
	// This field will be ignored if the value is not set or set to false.
	// Default is not set.
	ReusePort bool `protobuf:"varint,12,opt,name=ReusePort,json=reusePort,proto3" json:"ReusePort,omitempty"`
	// [OPTIONAL]
	// SendBuffer is the value of SO_SNDBUF.
	// See socket(7) of linux manual page for the details.
	// This field will be ignored if the value is zero or negative.
	// Default is not set.
	SendBuffer int32 `protobuf:"varint,13,opt,name=SendBuffer,json=sendBuffer,proto3" json:"SendBuffer,omitempty"`
	// [OPTIONAL]
	// SendBufferForce is the value of SO_SNDBUFFORCE.
	// See socket(7) of linux manual page for the details.
	// This option works only for unix.
	// This field will be ignored if the value is zero or negative.
	// Default is not set.
	SendBufferForce int32 `protobuf:"varint,14,opt,name=SendBufferForce,json=sendBufferForce,proto3" json:"SendBufferForce,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SockSOOption) Reset() {
	*x = SockSOOption{}
	mi := &file_kernel_sockopts_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SockSOOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SockSOOption) ProtoMessage() {}

func (x *SockSOOption) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_sockopts_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SockSOOption.ProtoReflect.Descriptor instead.
func (*SockSOOption) Descriptor() ([]byte, []int) {
	return file_kernel_sockopts_proto_rawDescGZIP(), []int{1}
}

func (x *SockSOOption) GetBindToDevice() string {
	if x != nil {
		return x.BindToDevice
	}
	return ""
}

func (x *SockSOOption) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *SockSOOption) GetKeepAlive() bool {
	if x != nil {
		return x.KeepAlive
	}
	return false
}

func (x *SockSOOption) GetLinger() int32 {
	if x != nil {
		return x.Linger
	}
	return 0
}

func (x *SockSOOption) GetMark() int32 {
	if x != nil {
		return x.Mark
	}
	return 0
}

func (x *SockSOOption) GetReceiveBuffer() int32 {
	if x != nil {
		return x.ReceiveBuffer
	}
	return 0
}

func (x *SockSOOption) GetReceiveBufferForce() int32 {
	if x != nil {
		return x.ReceiveBufferForce
	}
	return 0
}

func (x *SockSOOption) GetReceiveTimeout() int32 {
	if x != nil {
		return x.ReceiveTimeout
	}
	return 0
}

func (x *SockSOOption) GetSendTimeout() int32 {
	if x != nil {
		return x.SendTimeout
	}
	return 0
}

func (x *SockSOOption) GetReuseAddr() bool {
	if x != nil {
		return x.ReuseAddr
	}
	return false
}

func (x *SockSOOption) GetReusePort() bool {
	if x != nil {
		return x.ReusePort
	}
	return false
}

func (x *SockSOOption) GetSendBuffer() int32 {
	if x != nil {
		return x.SendBuffer
	}
	return 0
}

func (x *SockSOOption) GetSendBufferForce() int32 {
	if x != nil {
		return x.SendBufferForce
	}
	return 0
}

// SockIPOption is socket options for IPPROTO_IP level.
// See https://man7.org/linux/man-pages/man7/ip.7.html
type SockIPOption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// BindAddressNoPort is the value of IP_BIND_ADDRESS_NO_PORT.
	// See ip(7) of linux manual page for the details.
	// This option works only for unix.
	// This field will be ignored if the value is not set or set to false.
	// Default is not set.
	BindAddressNoPort bool `protobuf:"varint,1,opt,name=BindAddressNoPort,json=bindAddressNoPort,proto3" json:"BindAddressNoPort,omitempty"`
	// [OPTIONAL]
	// FreeBind is the value of IP_FREEBIND.
	// See ip(7) of linux manual page for the details.
	// This option works only for unix.
	// This field will be ignored if the value is not set or set to false.
	// Default is not set.
	FreeBind bool `protobuf:"varint,2,opt,name=FreeBind,json=freeBind,proto3" json:"FreeBind,omitempty"`
	// [OPTIONAL]
	// LocalPortRangeUpper is the upper port of IP_LOCAL_PORT_RANGE.
	// See ip(7) of linux manual page for the details.
	// This option works only for unix.
	// Operatin system's default will be used if the value is zero or negative.
	// Default is not set.
	LocalPortRangeUpper int32 `protobuf:"varint,3,opt,name=LocalPortRangeUpper,json=localPortRangeUpper,proto3" json:"LocalPortRangeUpper,omitempty"`
	// [OPTIONAL]
	// LocalPortRangeLower is the lower port of IP_LOCAL_PORT_RANGE.
	// See ip(7) of linux manual page for the details.
	// This option works only for unix.
	// This field will be ignored if the value is zero or negative.
	// Default is not set.
	LocalPortRangeLower int32 `protobuf:"varint,4,opt,name=LocalPortRangeLower,json=localPortRangeLower,proto3" json:"LocalPortRangeLower,omitempty"`
	// [OPTIONAL]
	// Transparent is the value of IP_TRANSPARENT.
	// See ip(7) of linux manual page for the details.
	// This option works only for unix.
	// This field will be ignored if the value is not set or set to false.
	// Default is not set.
	Transparent bool `protobuf:"varint,5,opt,name=Transparent,json=transparent,proto3" json:"Transparent,omitempty"`
	// [OPTIONAL]
	// TTL is the value of IP_TTL.
	// See ip(7) of linux manual page for the details.
	// This field will be ignored if the value is zero or negative.
	// Default is not set.
	TTL           int32 `protobuf:"varint,6,opt,name=TTL,json=ttl,proto3" json:"TTL,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SockIPOption) Reset() {
	*x = SockIPOption{}
	mi := &file_kernel_sockopts_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SockIPOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SockIPOption) ProtoMessage() {}

func (x *SockIPOption) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_sockopts_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SockIPOption.ProtoReflect.Descriptor instead.
func (*SockIPOption) Descriptor() ([]byte, []int) {
	return file_kernel_sockopts_proto_rawDescGZIP(), []int{2}
}

func (x *SockIPOption) GetBindAddressNoPort() bool {
	if x != nil {
		return x.BindAddressNoPort
	}
	return false
}

func (x *SockIPOption) GetFreeBind() bool {
	if x != nil {
		return x.FreeBind
	}
	return false
}

func (x *SockIPOption) GetLocalPortRangeUpper() int32 {
	if x != nil {
		return x.LocalPortRangeUpper
	}
	return 0
}

func (x *SockIPOption) GetLocalPortRangeLower() int32 {
	if x != nil {
		return x.LocalPortRangeLower
	}
	return 0
}

func (x *SockIPOption) GetTransparent() bool {
	if x != nil {
		return x.Transparent
	}
	return false
}

func (x *SockIPOption) GetTTL() int32 {
	if x != nil {
		return x.TTL
	}
	return 0
}

// SockIPV6Option is socket options for IPPROTO_IPV6 level.
// See https://man7.org/linux/man-pages/man7/ipv6.7.html
type SockIPV6Option struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SockIPV6Option) Reset() {
	*x = SockIPV6Option{}
	mi := &file_kernel_sockopts_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SockIPV6Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SockIPV6Option) ProtoMessage() {}

func (x *SockIPV6Option) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_sockopts_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SockIPV6Option.ProtoReflect.Descriptor instead.
func (*SockIPV6Option) Descriptor() ([]byte, []int) {
	return file_kernel_sockopts_proto_rawDescGZIP(), []int{3}
}

// SockTCPOption is socket options for IPPROTO_TCP level.
// See https://man7.org/linux/man-pages/man7/tcp.7.html
type SockTCPOption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// CORK is the value of TCP_CORK.
	// See tcp(7) of linux manual page for the details.
	// This option works only for unix.
	// This field will be ignored if the value is not set or set to false.
	// Default is not set.
	CORK bool `protobuf:"varint,1,opt,name=CORK,json=cork,proto3" json:"CORK,omitempty"`
	// [OPTIONAL]
	// DeferAccept is the value of TCP_DEFER_ACCEPT.
	// See tcp(7) of linux manual page for the details.
	// This field will be ignored if the value is zero or negative.
	// Default is not set.
	DeferAccept int32 `protobuf:"varint,2,opt,name=DeferAccept,json=deferAccept,proto3" json:"DeferAccept,omitempty"`
	// [OPTIONAL]
	// KeepCount is the value of TCP_KEEPCNT.
	// See tcp(7) of linux manual page for the details.
	// This option works only for unix.
	// This field will be ignored if the value is zero or negative.
	// Default is not set.
	KeepCount int32 `protobuf:"varint,3,opt,name=KeepCount,json=keepCount,proto3" json:"KeepCount,omitempty"`
	// [OPTIONAL]
	// KeepIdle is the value of TCP_KEEPIDLE.
	// See tcp(7) of linux manual page for the details.
	// This field will be ignored if the value is zero or negative.
	// Default is not set.
	KeepIdle int32 `protobuf:"varint,4,opt,name=KeepIdle,json=keepIdle,proto3" json:"KeepIdle,omitempty"`
	// [OPTIONAL]
	// KeepInterval is the value of TCP_KEEPINTVL.
	// See tcp(7) of linux manual page for the details.
	// This option works only for unix.
	// This field will be ignored if the value is zero or negative.
	// Default is not set.
	KeepInterval int32 `protobuf:"varint,5,opt,name=KeepInterval,json=keepInterval,proto3" json:"KeepInterval,omitempty"`
	// [OPTIONAL]
	// Linger2 is the value of TCP_LINGER2.
	// See tcp(7) of linux manual page for the details.
	// This field will be ignored if the value is zero or negative.
	// Default is not set.
	Linger2 int32 `protobuf:"varint,6,opt,name=Linger2,json=linger2,proto3" json:"Linger2,omitempty"`
	// [OPTIONAL]
	// MaxSegment is the value of TCP_MAXSEG.
	// See tcp(7) of linux manual page for the details.
	// This option works only for unix.
	// This field will be ignored if the value is zero or negative.
	// Default is not set.
	MaxSegment int32 `protobuf:"varint,7,opt,name=MaxSegment,json=maxSegment,proto3" json:"MaxSegment,omitempty"`
	// [OPTIONAL]
	// NoDelay is the value of TCP_NODELAY.
	// See tcp(7) of linux manual page for the details.
	// This field will be ignored if the value is not set or set to false.
	// Default is not set.
	NoDelay bool `protobuf:"varint,8,opt,name=NoDelay,json=noDelay,proto3" json:"NoDelay,omitempty"`
	// [OPTIONAL]
	// QuickAck is the value of TCP_QUICKACK.
	// See tcp(7) of linux manual page for the details.
	// This field will be ignored if the value is not set or set to false.
	// Default is not set.
	QuickAck bool `protobuf:"varint,9,opt,name=QuickAck,json=quickAck,proto3" json:"QuickAck,omitempty"`
	// [OPTIONAL]
	// SynCount is the value of TCP_SYNCNT.
	// See tcp(7) of linux manual page for the details.
	// This field will be ignored if the value is zero or negative.
	// Default is not set.
	SynCount int32 `protobuf:"varint,10,opt,name=SynCount,json=synCount,proto3" json:"SynCount,omitempty"`
	// [OPTIONAL]
	// UserTimeout is the value of TCP_USER_TIMEOUT.
	// See tcp(7) of linux manual page for the details.
	// This option works only for unix.
	// This field will be ignored if the value is zero or negative.
	// Default is not set.
	UserTimeout int32 `protobuf:"varint,11,opt,name=UserTimeout,json=userTimeout,proto3" json:"UserTimeout,omitempty"`
	// [OPTIONAL]
	// WindowClamp is the value of TCP_FASTOPEN.
	// See tcp(7) of linux manual page for the details.
	// This option works only for unix.
	// This field will be ignored if the value is zero or negative.
	// Default is not set.
	WindowClamp int32 `protobuf:"varint,12,opt,name=WindowClamp,json=windowClamp,proto3" json:"WindowClamp,omitempty"`
	// [OPTIONAL]
	// FastOpen is the value of TCP_QUICKACK.
	// See tcp(7) of linux manual page for the details.
	// This option works only for unix.
	// This field will be ignored if the value is not set or set to false.
	// Default is not set.
	FastOpen bool `protobuf:"varint,13,opt,name=FastOpen,json=fastOpen,proto3" json:"FastOpen,omitempty"`
	// [OPTIONAL]
	// FastOpenConnect is the value of TCP_FASTOPEN_CONNECT.
	// See tcp(7) of linux manual page for the details.
	// This field will be ignored if the value is not set or set to false.
	// Default is not set.
	FastOpenConnect bool `protobuf:"varint,14,opt,name=FastOpenConnect,json=fastOpenConnect,proto3" json:"FastOpenConnect,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SockTCPOption) Reset() {
	*x = SockTCPOption{}
	mi := &file_kernel_sockopts_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SockTCPOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SockTCPOption) ProtoMessage() {}

func (x *SockTCPOption) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_sockopts_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SockTCPOption.ProtoReflect.Descriptor instead.
func (*SockTCPOption) Descriptor() ([]byte, []int) {
	return file_kernel_sockopts_proto_rawDescGZIP(), []int{4}
}

func (x *SockTCPOption) GetCORK() bool {
	if x != nil {
		return x.CORK
	}
	return false
}

func (x *SockTCPOption) GetDeferAccept() int32 {
	if x != nil {
		return x.DeferAccept
	}
	return 0
}

func (x *SockTCPOption) GetKeepCount() int32 {
	if x != nil {
		return x.KeepCount
	}
	return 0
}

func (x *SockTCPOption) GetKeepIdle() int32 {
	if x != nil {
		return x.KeepIdle
	}
	return 0
}

func (x *SockTCPOption) GetKeepInterval() int32 {
	if x != nil {
		return x.KeepInterval
	}
	return 0
}

func (x *SockTCPOption) GetLinger2() int32 {
	if x != nil {
		return x.Linger2
	}
	return 0
}

func (x *SockTCPOption) GetMaxSegment() int32 {
	if x != nil {
		return x.MaxSegment
	}
	return 0
}

func (x *SockTCPOption) GetNoDelay() bool {
	if x != nil {
		return x.NoDelay
	}
	return false
}

func (x *SockTCPOption) GetQuickAck() bool {
	if x != nil {
		return x.QuickAck
	}
	return false
}

func (x *SockTCPOption) GetSynCount() int32 {
	if x != nil {
		return x.SynCount
	}
	return 0
}

func (x *SockTCPOption) GetUserTimeout() int32 {
	if x != nil {
		return x.UserTimeout
	}
	return 0
}

func (x *SockTCPOption) GetWindowClamp() int32 {
	if x != nil {
		return x.WindowClamp
	}
	return 0
}

func (x *SockTCPOption) GetFastOpen() bool {
	if x != nil {
		return x.FastOpen
	}
	return false
}

func (x *SockTCPOption) GetFastOpenConnect() bool {
	if x != nil {
		return x.FastOpenConnect
	}
	return false
}

// SockUDPOption is socket options for IPPROTO_UDP level.
// See https://man7.org/linux/man-pages/man7/udp.7.html
type SockUDPOption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// CORK is the value of UDP_CORK.
	// See udp(7) of linux manual page for the details.
	// This option works only for unix.
	// This field will be ignored if the value is not set or set to false.
	// Default is not set.
	CORK bool `protobuf:"varint,1,opt,name=CORK,json=cork,proto3" json:"CORK,omitempty"`
	// [OPTIONAL]
	// Sement is the upper port of UDP_SEGMENT.
	// See udp(7) of linux manual page for the details.
	// This option works only for unix.
	// This field will be ignored if the value is zero or negative.
	// Default is not set.
	Segment int32 `protobuf:"varint,2,opt,name=Segment,json=segment,proto3" json:"Segment,omitempty"`
	// [OPTIONAL]
	// GRO is the value of UDP_GRO.
	// See udp(7) of linux manual page for the details.
	// This option works only for unix.
	// This field will be ignored if the value is not set or set to false.
	// Default is not set.
	GRO           bool `protobuf:"varint,3,opt,name=GRO,json=gro,proto3" json:"GRO,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SockUDPOption) Reset() {
	*x = SockUDPOption{}
	mi := &file_kernel_sockopts_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SockUDPOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SockUDPOption) ProtoMessage() {}

func (x *SockUDPOption) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_sockopts_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SockUDPOption.ProtoReflect.Descriptor instead.
func (*SockUDPOption) Descriptor() ([]byte, []int) {
	return file_kernel_sockopts_proto_rawDescGZIP(), []int{5}
}

func (x *SockUDPOption) GetCORK() bool {
	if x != nil {
		return x.CORK
	}
	return false
}

func (x *SockUDPOption) GetSegment() int32 {
	if x != nil {
		return x.Segment
	}
	return 0
}

func (x *SockUDPOption) GetGRO() bool {
	if x != nil {
		return x.GRO
	}
	return false
}

var File_kernel_sockopts_proto protoreflect.FileDescriptor

const file_kernel_sockopts_proto_rawDesc = "" +
	"\n" +
	"\x15kernel/sockopts.proto\x12\x06kernel\x1a\x1bbuf/validate/validate.proto\"\x92\x02\n" +
	"\n" +
	"SockOption\x120\n" +
	"\bSOOption\x18\x01 \x01(\v2\x14.kernel.SockSOOptionR\bsoOption\x120\n" +
	"\bIPOption\x18\x02 \x01(\v2\x14.kernel.SockIPOptionR\bipOption\x126\n" +
	"\n" +
	"IPV6Option\x18\x03 \x01(\v2\x16.kernel.SockIPV6OptionR\n" +
	"ipv6Option\x123\n" +
	"\tTCPOption\x18\x04 \x01(\v2\x15.kernel.SockTCPOptionR\ttcpOption\x123\n" +
	"\tUDPOption\x18\x05 \x01(\v2\x15.kernel.SockUDPOptionR\tudpOption\"\xb8\x03\n" +
	"\fSockSOOption\x12\"\n" +
	"\fBindToDevice\x18\x01 \x01(\tR\fbindToDevice\x12\x14\n" +
	"\x05Debug\x18\x02 \x01(\bR\x05debug\x12\x1c\n" +
	"\tKeepAlive\x18\x04 \x01(\bR\tkeepAlive\x12\x16\n" +
	"\x06Linger\x18\x05 \x01(\x05R\x06linger\x12\x12\n" +
	"\x04Mark\x18\x06 \x01(\x05R\x04mark\x12$\n" +
	"\rReceiveBuffer\x18\a \x01(\x05R\rreceiveBuffer\x12.\n" +
	"\x12ReceiveBufferForce\x18\b \x01(\x05R\x12receiveBufferForce\x12&\n" +
	"\x0eReceiveTimeout\x18\t \x01(\x05R\x0ereceiveTimeout\x12 \n" +
	"\vSendTimeout\x18\n" +
	" \x01(\x05R\vsendTimeout\x12\x1c\n" +
	"\tReuseAddr\x18\v \x01(\bR\treuseAddr\x12\x1c\n" +
	"\tReusePort\x18\f \x01(\bR\treusePort\x12\x1e\n" +
	"\n" +
	"SendBuffer\x18\r \x01(\x05R\n" +
	"sendBuffer\x12(\n" +
	"\x0fSendBufferForce\x18\x0e \x01(\x05R\x0fsendBufferForce\"\x8a\x02\n" +
	"\fSockIPOption\x12,\n" +
	"\x11BindAddressNoPort\x18\x01 \x01(\bR\x11bindAddressNoPort\x12\x1a\n" +
	"\bFreeBind\x18\x02 \x01(\bR\bfreeBind\x12=\n" +
	"\x13LocalPortRangeUpper\x18\x03 \x01(\x05B\v\xbaH\b\x1a\x06\x18\xff\xff\x03(\x00R\x13localPortRangeUpper\x12=\n" +
	"\x13LocalPortRangeLower\x18\x04 \x01(\x05B\v\xbaH\b\x1a\x06\x18\xff\xff\x03(\x00R\x13localPortRangeLower\x12 \n" +
	"\vTransparent\x18\x05 \x01(\bR\vtransparent\x12\x10\n" +
	"\x03TTL\x18\x06 \x01(\x05R\x03ttl\"\x10\n" +
	"\x0eSockIPV6Option\"\xb9\x03\n" +
	"\rSockTCPOption\x12\x12\n" +
	"\x04CORK\x18\x01 \x01(\bR\x04cork\x12 \n" +
	"\vDeferAccept\x18\x02 \x01(\x05R\vdeferAccept\x12\x1c\n" +
	"\tKeepCount\x18\x03 \x01(\x05R\tkeepCount\x12\x1a\n" +
	"\bKeepIdle\x18\x04 \x01(\x05R\bkeepIdle\x12\"\n" +
	"\fKeepInterval\x18\x05 \x01(\x05R\fkeepInterval\x12\x18\n" +
	"\aLinger2\x18\x06 \x01(\x05R\alinger2\x12\x1e\n" +
	"\n" +
	"MaxSegment\x18\a \x01(\x05R\n" +
	"maxSegment\x12\x18\n" +
	"\aNoDelay\x18\b \x01(\bR\anoDelay\x12\x1a\n" +
	"\bQuickAck\x18\t \x01(\bR\bquickAck\x12\x1a\n" +
	"\bSynCount\x18\n" +
	" \x01(\x05R\bsynCount\x12 \n" +
	"\vUserTimeout\x18\v \x01(\x05R\vuserTimeout\x12 \n" +
	"\vWindowClamp\x18\f \x01(\x05R\vwindowClamp\x12\x1a\n" +
	"\bFastOpen\x18\r \x01(\bR\bfastOpen\x12(\n" +
	"\x0fFastOpenConnect\x18\x0e \x01(\bR\x0ffastOpenConnect\"O\n" +
	"\rSockUDPOption\x12\x12\n" +
	"\x04CORK\x18\x01 \x01(\bR\x04cork\x12\x18\n" +
	"\aSegment\x18\x02 \x01(\x05R\asegment\x12\x10\n" +
	"\x03GRO\x18\x03 \x01(\bR\x03groB8Z6github.com/aileron-gateway/aileron-gateway/apis/kernelb\x06proto3"

var (
	file_kernel_sockopts_proto_rawDescOnce sync.Once
	file_kernel_sockopts_proto_rawDescData []byte
)

func file_kernel_sockopts_proto_rawDescGZIP() []byte {
	file_kernel_sockopts_proto_rawDescOnce.Do(func() {
		file_kernel_sockopts_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kernel_sockopts_proto_rawDesc), len(file_kernel_sockopts_proto_rawDesc)))
	})
	return file_kernel_sockopts_proto_rawDescData
}

var file_kernel_sockopts_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_kernel_sockopts_proto_goTypes = []any{
	(*SockOption)(nil),     // 0: kernel.SockOption
	(*SockSOOption)(nil),   // 1: kernel.SockSOOption
	(*SockIPOption)(nil),   // 2: kernel.SockIPOption
	(*SockIPV6Option)(nil), // 3: kernel.SockIPV6Option
	(*SockTCPOption)(nil),  // 4: kernel.SockTCPOption
	(*SockUDPOption)(nil),  // 5: kernel.SockUDPOption
}
var file_kernel_sockopts_proto_depIdxs = []int32{
	1, // 0: kernel.SockOption.SOOption:type_name -> kernel.SockSOOption
	2, // 1: kernel.SockOption.IPOption:type_name -> kernel.SockIPOption
	3, // 2: kernel.SockOption.IPV6Option:type_name -> kernel.SockIPV6Option
	4, // 3: kernel.SockOption.TCPOption:type_name -> kernel.SockTCPOption
	5, // 4: kernel.SockOption.UDPOption:type_name -> kernel.SockUDPOption
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_kernel_sockopts_proto_init() }
func file_kernel_sockopts_proto_init() {
	if File_kernel_sockopts_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kernel_sockopts_proto_rawDesc), len(file_kernel_sockopts_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kernel_sockopts_proto_goTypes,
		DependencyIndexes: file_kernel_sockopts_proto_depIdxs,
		MessageInfos:      file_kernel_sockopts_proto_msgTypes,
	}.Build()
	File_kernel_sockopts_proto = out.File
	file_kernel_sockopts_proto_goTypes = nil
	file_kernel_sockopts_proto_depIdxs = nil
}
