// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.0
// source: kernel/matcher.proto

package kernel

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MatchType is the matching methods of string or bytes data.
// See https://pkg.go.dev/strings for string matching, https://pkg.go.dev/bytes for bytes matching.
// https://pkg.go.dev/regexp and https://pkg.go.dev/regexp/syntax for regular expression matching.
type MatchType int32

const (
	// Exact is the exact matching method type.
	MatchType_Exact MatchType = 0
	// Prefix is the prefix matching method type.
	// See https://pkg.go.dev/strings#HasPrefix for string matching.
	// See https://pkg.go.dev/bytes#HasPrefix for bytes matching.
	MatchType_Prefix MatchType = 1
	// Suffix is the suffix matching method type.
	// See https://pkg.go.dev/strings#HasSuffix for string matching.
	// See https://pkg.go.dev/bytes#HasSuffix for bytes matching.
	MatchType_Suffix MatchType = 2
	// Contains is the containing matching method type.
	// See https://pkg.go.dev/strings#Contains for string matching.
	// See https://pkg.go.dev/bytes#Contains for bytes matching.
	MatchType_Contains MatchType = 3
	// Path is the path matching method type.
	// See https://pkg.go.dev/path#Match for string and bytes matching.
	MatchType_Path MatchType = 4
	// FilePath is the file path matching method type.
	// See https://pkg.go.dev/path/filepath#Match for string and bytes matching.
	MatchType_FilePath MatchType = 5
	// Regex is the regular expression matching method type.
	// See  https://pkg.go.dev/regexp#Match and https://pkg.go.dev/regexp/syntax
	// for string and bytes matching.
	MatchType_Regex MatchType = 6
	// RegexPOSIX is the POSIX regular expression matching method type.
	// See  https://pkg.go.dev/regexp#Match and https://pkg.go.dev/regexp/syntax
	// for string and bytes matching.
	MatchType_RegexPOSIX MatchType = 7
)

// Enum value maps for MatchType.
var (
	MatchType_name = map[int32]string{
		0: "Exact",
		1: "Prefix",
		2: "Suffix",
		3: "Contains",
		4: "Path",
		5: "FilePath",
		6: "Regex",
		7: "RegexPOSIX",
	}
	MatchType_value = map[string]int32{
		"Exact":      0,
		"Prefix":     1,
		"Suffix":     2,
		"Contains":   3,
		"Path":       4,
		"FilePath":   5,
		"Regex":      6,
		"RegexPOSIX": 7,
	}
)

func (x MatchType) Enum() *MatchType {
	p := new(MatchType)
	*p = x
	return p
}

func (x MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_kernel_matcher_proto_enumTypes[0].Descriptor()
}

func (MatchType) Type() protoreflect.EnumType {
	return &file_kernel_matcher_proto_enumTypes[0]
}

func (x MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchType.Descriptor instead.
func (MatchType) EnumDescriptor() ([]byte, []int) {
	return file_kernel_matcher_proto_rawDescGZIP(), []int{0}
}

// MatcherSpec is the string or bytes matching specification.
type MatcherSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// Patterns is the list of matching patterns.
	// Values must have appropriate expressions for the specified match type.
	// Default is not set.
	Patterns []string `protobuf:"bytes,1,rep,name=Patterns,json=patterns,proto3" json:"Patterns,omitempty"`
	// [OPTIONAL]
	// MatchType is the matching method type.
	// Default is [Exact].
	MatchType     MatchType `protobuf:"varint,2,opt,name=MatchType,json=matchType,proto3,enum=kernel.MatchType" json:"MatchType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatcherSpec) Reset() {
	*x = MatcherSpec{}
	mi := &file_kernel_matcher_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatcherSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatcherSpec) ProtoMessage() {}

func (x *MatcherSpec) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_matcher_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatcherSpec.ProtoReflect.Descriptor instead.
func (*MatcherSpec) Descriptor() ([]byte, []int) {
	return file_kernel_matcher_proto_rawDescGZIP(), []int{0}
}

func (x *MatcherSpec) GetPatterns() []string {
	if x != nil {
		return x.Patterns
	}
	return nil
}

func (x *MatcherSpec) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_Exact
}

var File_kernel_matcher_proto protoreflect.FileDescriptor

const file_kernel_matcher_proto_rawDesc = "" +
	"\n" +
	"\x14kernel/matcher.proto\x12\x06kernel\x1a\x1bbuf/validate/validate.proto\"d\n" +
	"\vMatcherSpec\x12$\n" +
	"\bPatterns\x18\x01 \x03(\tB\b\xbaH\x05\x92\x01\x02\x18\x01R\bpatterns\x12/\n" +
	"\tMatchType\x18\x02 \x01(\x0e2\x11.kernel.MatchTypeR\tmatchType*o\n" +
	"\tMatchType\x12\t\n" +
	"\x05Exact\x10\x00\x12\n" +
	"\n" +
	"\x06Prefix\x10\x01\x12\n" +
	"\n" +
	"\x06Suffix\x10\x02\x12\f\n" +
	"\bContains\x10\x03\x12\b\n" +
	"\x04Path\x10\x04\x12\f\n" +
	"\bFilePath\x10\x05\x12\t\n" +
	"\x05Regex\x10\x06\x12\x0e\n" +
	"\n" +
	"RegexPOSIX\x10\aB8Z6github.com/aileron-gateway/aileron-gateway/apis/kernelb\x06proto3"

var (
	file_kernel_matcher_proto_rawDescOnce sync.Once
	file_kernel_matcher_proto_rawDescData []byte
)

func file_kernel_matcher_proto_rawDescGZIP() []byte {
	file_kernel_matcher_proto_rawDescOnce.Do(func() {
		file_kernel_matcher_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kernel_matcher_proto_rawDesc), len(file_kernel_matcher_proto_rawDesc)))
	})
	return file_kernel_matcher_proto_rawDescData
}

var file_kernel_matcher_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kernel_matcher_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_kernel_matcher_proto_goTypes = []any{
	(MatchType)(0),      // 0: kernel.MatchType
	(*MatcherSpec)(nil), // 1: kernel.MatcherSpec
}
var file_kernel_matcher_proto_depIdxs = []int32{
	0, // 0: kernel.MatcherSpec.MatchType:type_name -> kernel.MatchType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_kernel_matcher_proto_init() }
func file_kernel_matcher_proto_init() {
	if File_kernel_matcher_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kernel_matcher_proto_rawDesc), len(file_kernel_matcher_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kernel_matcher_proto_goTypes,
		DependencyIndexes: file_kernel_matcher_proto_depIdxs,
		EnumInfos:         file_kernel_matcher_proto_enumTypes,
		MessageInfos:      file_kernel_matcher_proto_msgTypes,
	}.Build()
	File_kernel_matcher_proto = out.File
	file_kernel_matcher_proto_goTypes = nil
	file_kernel_matcher_proto_depIdxs = nil
}
