// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.27.2
// source: kernel/txtutil.proto

package kernel

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MatchType is the matching methods of string or bytes data.
// See https://pkg.go.dev/strings for string matching, https://pkg.go.dev/bytes for bytes matching.
// https://pkg.go.dev/regexp and https://pkg.go.dev/regexp/syntax for regular expression matching.
type MatchType int32

const (
	// Exact is the exact matching method type.
	MatchType_Exact MatchType = 0
	// Prefix is the prefix matching method type.
	// See https://pkg.go.dev/strings#HasPrefix for string matching.
	// See https://pkg.go.dev/bytes#HasPrefix for bytes matching.
	MatchType_Prefix MatchType = 1
	// Suffix is the suffix matching method type.
	// See https://pkg.go.dev/strings#HasSuffix for string matching.
	// See https://pkg.go.dev/bytes#HasSuffix for bytes matching.
	MatchType_Suffix MatchType = 2
	// Contains is the containing matching method type.
	// See https://pkg.go.dev/strings#Contains for string matching.
	// See https://pkg.go.dev/bytes#Contains for bytes matching.
	MatchType_Contains MatchType = 3
	// Path is the path matching method type.
	// See https://pkg.go.dev/path#Match for string and bytes matching.
	MatchType_Path MatchType = 4
	// FilePath is the file path matching method type.
	// See https://pkg.go.dev/path/filepath#Match for string and bytes matching.
	MatchType_FilePath MatchType = 5
	// Regex is the regular expression matching method type.
	// See  https://pkg.go.dev/regexp#Match and https://pkg.go.dev/regexp/syntax
	// for string and bytes matching.
	MatchType_Regex MatchType = 6
	// RegexPOSIX is the POSIX regular expression matching method type.
	// See  https://pkg.go.dev/regexp#Match and https://pkg.go.dev/regexp/syntax
	// for string and bytes matching.
	MatchType_RegexPOSIX MatchType = 7
)

// Enum value maps for MatchType.
var (
	MatchType_name = map[int32]string{
		0: "Exact",
		1: "Prefix",
		2: "Suffix",
		3: "Contains",
		4: "Path",
		5: "FilePath",
		6: "Regex",
		7: "RegexPOSIX",
	}
	MatchType_value = map[string]int32{
		"Exact":      0,
		"Prefix":     1,
		"Suffix":     2,
		"Contains":   3,
		"Path":       4,
		"FilePath":   5,
		"Regex":      6,
		"RegexPOSIX": 7,
	}
)

func (x MatchType) Enum() *MatchType {
	p := new(MatchType)
	*p = x
	return p
}

func (x MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_kernel_txtutil_proto_enumTypes[0].Descriptor()
}

func (MatchType) Type() protoreflect.EnumType {
	return &file_kernel_txtutil_proto_enumTypes[0]
}

func (x MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchType.Descriptor instead.
func (MatchType) EnumDescriptor() ([]byte, []int) {
	return file_kernel_txtutil_proto_rawDescGZIP(), []int{0}
}

// ReplaceType is the replacing methods of string or bytes data.
type ReplaceType int32

const (
	ReplaceType_Fixed      ReplaceType = 0
	ReplaceType_Value      ReplaceType = 1
	ReplaceType_Left       ReplaceType = 2
	ReplaceType_Right      ReplaceType = 3
	ReplaceType_Trim       ReplaceType = 4
	ReplaceType_TrimLeft   ReplaceType = 5
	ReplaceType_TrimRight  ReplaceType = 6
	ReplaceType_TrimPrefix ReplaceType = 7
	ReplaceType_TrimSuffix ReplaceType = 8
	ReplaceType_Encode     ReplaceType = 9
	ReplaceType_Hash       ReplaceType = 10
	ReplaceType_Regexp     ReplaceType = 11
	ReplaceType_Expand     ReplaceType = 12
	ReplaceType_Encrypt    ReplaceType = 13
	ReplaceType_HMAC       ReplaceType = 14
)

// Enum value maps for ReplaceType.
var (
	ReplaceType_name = map[int32]string{
		0:  "Fixed",
		1:  "Value",
		2:  "Left",
		3:  "Right",
		4:  "Trim",
		5:  "TrimLeft",
		6:  "TrimRight",
		7:  "TrimPrefix",
		8:  "TrimSuffix",
		9:  "Encode",
		10: "Hash",
		11: "Regexp",
		12: "Expand",
		13: "Encrypt",
		14: "HMAC",
	}
	ReplaceType_value = map[string]int32{
		"Fixed":      0,
		"Value":      1,
		"Left":       2,
		"Right":      3,
		"Trim":       4,
		"TrimLeft":   5,
		"TrimRight":  6,
		"TrimPrefix": 7,
		"TrimSuffix": 8,
		"Encode":     9,
		"Hash":       10,
		"Regexp":     11,
		"Expand":     12,
		"Encrypt":    13,
		"HMAC":       14,
	}
)

func (x ReplaceType) Enum() *ReplaceType {
	p := new(ReplaceType)
	*p = x
	return p
}

func (x ReplaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_kernel_txtutil_proto_enumTypes[1].Descriptor()
}

func (ReplaceType) Type() protoreflect.EnumType {
	return &file_kernel_txtutil_proto_enumTypes[1]
}

func (x ReplaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplaceType.Descriptor instead.
func (ReplaceType) EnumDescriptor() ([]byte, []int) {
	return file_kernel_txtutil_proto_rawDescGZIP(), []int{1}
}

// TemplateType is the type of template document.
type TemplateType int32

const (
	TemplateType_Text   TemplateType = 0 // Text is a standard text type. Content will be used as it is.
	TemplateType_GoText TemplateType = 1 // GoText is Go's text template type. See https://pkg.go.dev/text/template.
	TemplateType_GoHTML TemplateType = 2 // GoHTML is Go's HTML template type. See https://pkg.go.dev/html/template.
)

// Enum value maps for TemplateType.
var (
	TemplateType_name = map[int32]string{
		0: "Text",
		1: "GoText",
		2: "GoHTML",
	}
	TemplateType_value = map[string]int32{
		"Text":   0,
		"GoText": 1,
		"GoHTML": 2,
	}
)

func (x TemplateType) Enum() *TemplateType {
	p := new(TemplateType)
	*p = x
	return p
}

func (x TemplateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemplateType) Descriptor() protoreflect.EnumDescriptor {
	return file_kernel_txtutil_proto_enumTypes[2].Descriptor()
}

func (TemplateType) Type() protoreflect.EnumType {
	return &file_kernel_txtutil_proto_enumTypes[2]
}

func (x TemplateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemplateType.Descriptor instead.
func (TemplateType) EnumDescriptor() ([]byte, []int) {
	return file_kernel_txtutil_proto_rawDescGZIP(), []int{2}
}

// MatcherSpec is the string or bytes matching specification.
type MatcherSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// Patterns is the list of matching patterns.
	// Values must have appropriate expressions for the specified match type.
	// Default is not set.
	Patterns []string `protobuf:"bytes,1,rep,name=Patterns,json=patterns,proto3" json:"Patterns,omitempty"`
	// [OPTIONAL]
	// MatchType is the matching method type.
	// Default is [Exact].
	MatchType     MatchType `protobuf:"varint,2,opt,name=MatchType,json=matchType,proto3,enum=kernel.MatchType" json:"MatchType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatcherSpec) Reset() {
	*x = MatcherSpec{}
	mi := &file_kernel_txtutil_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatcherSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatcherSpec) ProtoMessage() {}

func (x *MatcherSpec) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_txtutil_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatcherSpec.ProtoReflect.Descriptor instead.
func (*MatcherSpec) Descriptor() ([]byte, []int) {
	return file_kernel_txtutil_proto_rawDescGZIP(), []int{0}
}

func (x *MatcherSpec) GetPatterns() []string {
	if x != nil {
		return x.Patterns
	}
	return nil
}

func (x *MatcherSpec) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_Exact
}

type ReplacerSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Replacers:
	//
	//	*ReplacerSpec_Fixed
	//	*ReplacerSpec_Value
	//	*ReplacerSpec_Left
	//	*ReplacerSpec_Right
	//	*ReplacerSpec_Trim
	//	*ReplacerSpec_TrimLeft
	//	*ReplacerSpec_TrimRight
	//	*ReplacerSpec_TrimPrefix
	//	*ReplacerSpec_TrimSuffix
	//	*ReplacerSpec_Encode
	//	*ReplacerSpec_Hash
	//	*ReplacerSpec_Regexp
	//	*ReplacerSpec_Expand
	//	*ReplacerSpec_Encrypt
	//	*ReplacerSpec_HMAC
	Replacers     isReplacerSpec_Replacers `protobuf_oneof:"Replacers"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplacerSpec) Reset() {
	*x = ReplacerSpec{}
	mi := &file_kernel_txtutil_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplacerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplacerSpec) ProtoMessage() {}

func (x *ReplacerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_txtutil_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplacerSpec.ProtoReflect.Descriptor instead.
func (*ReplacerSpec) Descriptor() ([]byte, []int) {
	return file_kernel_txtutil_proto_rawDescGZIP(), []int{1}
}

func (x *ReplacerSpec) GetReplacers() isReplacerSpec_Replacers {
	if x != nil {
		return x.Replacers
	}
	return nil
}

func (x *ReplacerSpec) GetFixed() *FixedReplacer {
	if x != nil {
		if x, ok := x.Replacers.(*ReplacerSpec_Fixed); ok {
			return x.Fixed
		}
	}
	return nil
}

func (x *ReplacerSpec) GetValue() *ValueReplacer {
	if x != nil {
		if x, ok := x.Replacers.(*ReplacerSpec_Value); ok {
			return x.Value
		}
	}
	return nil
}

func (x *ReplacerSpec) GetLeft() *LeftReplacer {
	if x != nil {
		if x, ok := x.Replacers.(*ReplacerSpec_Left); ok {
			return x.Left
		}
	}
	return nil
}

func (x *ReplacerSpec) GetRight() *RightReplacer {
	if x != nil {
		if x, ok := x.Replacers.(*ReplacerSpec_Right); ok {
			return x.Right
		}
	}
	return nil
}

func (x *ReplacerSpec) GetTrim() *TrimReplacer {
	if x != nil {
		if x, ok := x.Replacers.(*ReplacerSpec_Trim); ok {
			return x.Trim
		}
	}
	return nil
}

func (x *ReplacerSpec) GetTrimLeft() *TrimLeftReplacer {
	if x != nil {
		if x, ok := x.Replacers.(*ReplacerSpec_TrimLeft); ok {
			return x.TrimLeft
		}
	}
	return nil
}

func (x *ReplacerSpec) GetTrimRight() *TrimRightReplacer {
	if x != nil {
		if x, ok := x.Replacers.(*ReplacerSpec_TrimRight); ok {
			return x.TrimRight
		}
	}
	return nil
}

func (x *ReplacerSpec) GetTrimPrefix() *TrimPrefixReplacer {
	if x != nil {
		if x, ok := x.Replacers.(*ReplacerSpec_TrimPrefix); ok {
			return x.TrimPrefix
		}
	}
	return nil
}

func (x *ReplacerSpec) GetTrimSuffix() *TrimSuffixReplacer {
	if x != nil {
		if x, ok := x.Replacers.(*ReplacerSpec_TrimSuffix); ok {
			return x.TrimSuffix
		}
	}
	return nil
}

func (x *ReplacerSpec) GetEncode() *EncodeReplacer {
	if x != nil {
		if x, ok := x.Replacers.(*ReplacerSpec_Encode); ok {
			return x.Encode
		}
	}
	return nil
}

func (x *ReplacerSpec) GetHash() *HashReplacer {
	if x != nil {
		if x, ok := x.Replacers.(*ReplacerSpec_Hash); ok {
			return x.Hash
		}
	}
	return nil
}

func (x *ReplacerSpec) GetRegexp() *RegexpReplacer {
	if x != nil {
		if x, ok := x.Replacers.(*ReplacerSpec_Regexp); ok {
			return x.Regexp
		}
	}
	return nil
}

func (x *ReplacerSpec) GetExpand() *ExpandReplacer {
	if x != nil {
		if x, ok := x.Replacers.(*ReplacerSpec_Expand); ok {
			return x.Expand
		}
	}
	return nil
}

func (x *ReplacerSpec) GetEncrypt() *EncryptReplacer {
	if x != nil {
		if x, ok := x.Replacers.(*ReplacerSpec_Encrypt); ok {
			return x.Encrypt
		}
	}
	return nil
}

func (x *ReplacerSpec) GetHMAC() *HMACReplacer {
	if x != nil {
		if x, ok := x.Replacers.(*ReplacerSpec_HMAC); ok {
			return x.HMAC
		}
	}
	return nil
}

type isReplacerSpec_Replacers interface {
	isReplacerSpec_Replacers()
}

type ReplacerSpec_Fixed struct {
	// Fixed is the fixed value replacer.
	// This replacer replaces input to a fixed value configured.
	Fixed *FixedReplacer `protobuf:"bytes,1,opt,name=Fixed,json=fixed,proto3,oneof"`
}

type ReplacerSpec_Value struct {
	// Value is the configured values replacer.
	// This replacer replaces a configured value to another.
	Value *ValueReplacer `protobuf:"bytes,2,opt,name=Value,json=value,proto3,oneof"`
}

type ReplacerSpec_Left struct {
	// Left is the left side replacer.
	// This replacer replaces left side of a string
	// with the configured characters.
	Left *LeftReplacer `protobuf:"bytes,3,opt,name=Left,json=left,proto3,oneof"`
}

type ReplacerSpec_Right struct {
	// Right is the right side replacer.
	// This replacer replaces right side of a string
	// with the configured characters.
	Right *RightReplacer `protobuf:"bytes,4,opt,name=Right,json=right,proto3,oneof"`
}

type ReplacerSpec_Trim struct {
	// Trim is the replacer that trims characters from
	// both side of a string.
	// This leverages https://pkg.go.dev/strings#Trim
	Trim *TrimReplacer `protobuf:"bytes,5,opt,name=Trim,json=trim,proto3,oneof"`
}

type ReplacerSpec_TrimLeft struct {
	// TrimLeft is the replacer that trims characters from
	// left side of a string.
	// This leverages https://pkg.go.dev/strings#TrimLeft
	TrimLeft *TrimLeftReplacer `protobuf:"bytes,6,opt,name=TrimLeft,json=trimLeft,proto3,oneof"`
}

type ReplacerSpec_TrimRight struct {
	// TrimRight is the replacer that trims characters from
	// right side of a string.
	// This leverages https://pkg.go.dev/strings#TrimRight
	TrimRight *TrimRightReplacer `protobuf:"bytes,7,opt,name=TrimRight,json=trimRight,proto3,oneof"`
}

type ReplacerSpec_TrimPrefix struct {
	// TrimPrefix is the replacer that replace a prefix if matched.
	// This leverages https://pkg.go.dev/strings#TrimPrefix
	TrimPrefix *TrimPrefixReplacer `protobuf:"bytes,8,opt,name=TrimPrefix,json=trimPrefix,proto3,oneof"`
}

type ReplacerSpec_TrimSuffix struct {
	// TrimSuffix is the replacer that replace a suffix if matched.
	// This leverages https://pkg.go.dev/strings#TrimSuffix
	TrimSuffix *TrimSuffixReplacer `protobuf:"bytes,9,opt,name=TrimSuffix,json=trimSuffix,proto3,oneof"`
}

type ReplacerSpec_Encode struct {
	// Encode is the replacer that replace string
	// to encoded values.
	Encode *EncodeReplacer `protobuf:"bytes,10,opt,name=Encode,json=encode,proto3,oneof"`
}

type ReplacerSpec_Hash struct {
	// Hash is the replacer that replace string
	// to hashed values.
	Hash *HashReplacer `protobuf:"bytes,11,opt,name=Hash,json=hash,proto3,oneof"`
}

type ReplacerSpec_Regexp struct {
	// Regexp is the replacer that replace string
	// using regular expression.
	// See https://pkg.go.dev/regexp#Regexp.ReplaceAllString
	Regexp *RegexpReplacer `protobuf:"bytes,12,opt,name=Regexp,json=regexp,proto3,oneof"`
}

type ReplacerSpec_Expand struct {
	// Expand is the replacer that replace string
	// using regular expression.
	// See https://pkg.go.dev/regexp#Regexp.ExpandString
	Expand *ExpandReplacer `protobuf:"bytes,13,opt,name=Expand,json=expand,proto3,oneof"`
}

type ReplacerSpec_Encrypt struct {
	// Encrypt is the replacer that replace string
	// to encrypted values.
	Encrypt *EncryptReplacer `protobuf:"bytes,14,opt,name=Encrypt,json=encrypt,proto3,oneof"`
}

type ReplacerSpec_HMAC struct {
	// HMAC is the replacer that replace string
	// to hmac hash values.
	HMAC *HMACReplacer `protobuf:"bytes,15,opt,name=HMAC,json=hmac,proto3,oneof"`
}

func (*ReplacerSpec_Fixed) isReplacerSpec_Replacers() {}

func (*ReplacerSpec_Value) isReplacerSpec_Replacers() {}

func (*ReplacerSpec_Left) isReplacerSpec_Replacers() {}

func (*ReplacerSpec_Right) isReplacerSpec_Replacers() {}

func (*ReplacerSpec_Trim) isReplacerSpec_Replacers() {}

func (*ReplacerSpec_TrimLeft) isReplacerSpec_Replacers() {}

func (*ReplacerSpec_TrimRight) isReplacerSpec_Replacers() {}

func (*ReplacerSpec_TrimPrefix) isReplacerSpec_Replacers() {}

func (*ReplacerSpec_TrimSuffix) isReplacerSpec_Replacers() {}

func (*ReplacerSpec_Encode) isReplacerSpec_Replacers() {}

func (*ReplacerSpec_Hash) isReplacerSpec_Replacers() {}

func (*ReplacerSpec_Regexp) isReplacerSpec_Replacers() {}

func (*ReplacerSpec_Expand) isReplacerSpec_Replacers() {}

func (*ReplacerSpec_Encrypt) isReplacerSpec_Replacers() {}

func (*ReplacerSpec_HMAC) isReplacerSpec_Replacers() {}

type FixedReplacer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	Value         string `protobuf:"bytes,1,opt,name=Value,json=value,proto3" json:"Value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FixedReplacer) Reset() {
	*x = FixedReplacer{}
	mi := &file_kernel_txtutil_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixedReplacer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedReplacer) ProtoMessage() {}

func (x *FixedReplacer) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_txtutil_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedReplacer.ProtoReflect.Descriptor instead.
func (*FixedReplacer) Descriptor() ([]byte, []int) {
	return file_kernel_txtutil_proto_rawDescGZIP(), []int{2}
}

func (x *FixedReplacer) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ValueReplacer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// FromTo is the pairs of 2 valus.
	// Key is the string which is replaced by the value.
	// Value is the string which replaces the key.
	// Default is not set.
	FromTo        map[string]string `protobuf:"bytes,1,rep,name=FromTo,json=fromTo,proto3" json:"FromTo,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValueReplacer) Reset() {
	*x = ValueReplacer{}
	mi := &file_kernel_txtutil_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValueReplacer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueReplacer) ProtoMessage() {}

func (x *ValueReplacer) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_txtutil_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueReplacer.ProtoReflect.Descriptor instead.
func (*ValueReplacer) Descriptor() ([]byte, []int) {
	return file_kernel_txtutil_proto_rawDescGZIP(), []int{3}
}

func (x *ValueReplacer) GetFromTo() map[string]string {
	if x != nil {
		return x.FromTo
	}
	return nil
}

type LeftReplacer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// Char is the character to replaces.
	Char string `protobuf:"bytes,1,opt,name=Char,json=char,proto3" json:"Char,omitempty"`
	// [OPTIONAL]
	// Length is the character length that is
	// replaced from the left side of a string.
	// Default is not set, or 0.
	Length        uint32 `protobuf:"varint,2,opt,name=Length,json=length,proto3" json:"Length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeftReplacer) Reset() {
	*x = LeftReplacer{}
	mi := &file_kernel_txtutil_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeftReplacer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeftReplacer) ProtoMessage() {}

func (x *LeftReplacer) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_txtutil_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeftReplacer.ProtoReflect.Descriptor instead.
func (*LeftReplacer) Descriptor() ([]byte, []int) {
	return file_kernel_txtutil_proto_rawDescGZIP(), []int{4}
}

func (x *LeftReplacer) GetChar() string {
	if x != nil {
		return x.Char
	}
	return ""
}

func (x *LeftReplacer) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type RightReplacer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// Char is the character to replaces.
	Char string `protobuf:"bytes,1,opt,name=Char,json=char,proto3" json:"Char,omitempty"`
	// [OPTIONAL]
	// Length is the character length that is
	// replaced from the right side of a string.
	// Default is not set, or 0.
	Length        uint32 `protobuf:"varint,2,opt,name=Length,json=length,proto3" json:"Length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RightReplacer) Reset() {
	*x = RightReplacer{}
	mi := &file_kernel_txtutil_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RightReplacer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RightReplacer) ProtoMessage() {}

func (x *RightReplacer) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_txtutil_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RightReplacer.ProtoReflect.Descriptor instead.
func (*RightReplacer) Descriptor() ([]byte, []int) {
	return file_kernel_txtutil_proto_rawDescGZIP(), []int{5}
}

func (x *RightReplacer) GetChar() string {
	if x != nil {
		return x.Char
	}
	return ""
}

func (x *RightReplacer) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type TrimReplacer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// CutSets is the sets of character to be trimmed
	// from both side of strings.
	// This uses https://pkg.go.dev/strings#Trim
	CutSets       []string `protobuf:"bytes,1,rep,name=CutSets,json=cutSets,proto3" json:"CutSets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrimReplacer) Reset() {
	*x = TrimReplacer{}
	mi := &file_kernel_txtutil_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrimReplacer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrimReplacer) ProtoMessage() {}

func (x *TrimReplacer) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_txtutil_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrimReplacer.ProtoReflect.Descriptor instead.
func (*TrimReplacer) Descriptor() ([]byte, []int) {
	return file_kernel_txtutil_proto_rawDescGZIP(), []int{6}
}

func (x *TrimReplacer) GetCutSets() []string {
	if x != nil {
		return x.CutSets
	}
	return nil
}

type TrimLeftReplacer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// CutSets is the sets of character to be trimmed
	// from left side of strings.
	// This uses https://pkg.go.dev/strings#TrimLeft
	CutSets       []string `protobuf:"bytes,1,rep,name=CutSets,json=cutSets,proto3" json:"CutSets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrimLeftReplacer) Reset() {
	*x = TrimLeftReplacer{}
	mi := &file_kernel_txtutil_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrimLeftReplacer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrimLeftReplacer) ProtoMessage() {}

func (x *TrimLeftReplacer) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_txtutil_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrimLeftReplacer.ProtoReflect.Descriptor instead.
func (*TrimLeftReplacer) Descriptor() ([]byte, []int) {
	return file_kernel_txtutil_proto_rawDescGZIP(), []int{7}
}

func (x *TrimLeftReplacer) GetCutSets() []string {
	if x != nil {
		return x.CutSets
	}
	return nil
}

type TrimRightReplacer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// CutSets is the sets of character to be trimmed
	// from right side of strings.
	// This uses https://pkg.go.dev/strings#TrimRight
	CutSets       []string `protobuf:"bytes,1,rep,name=CutSets,json=cutSets,proto3" json:"CutSets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrimRightReplacer) Reset() {
	*x = TrimRightReplacer{}
	mi := &file_kernel_txtutil_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrimRightReplacer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrimRightReplacer) ProtoMessage() {}

func (x *TrimRightReplacer) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_txtutil_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrimRightReplacer.ProtoReflect.Descriptor instead.
func (*TrimRightReplacer) Descriptor() ([]byte, []int) {
	return file_kernel_txtutil_proto_rawDescGZIP(), []int{8}
}

func (x *TrimRightReplacer) GetCutSets() []string {
	if x != nil {
		return x.CutSets
	}
	return nil
}

type TrimPrefixReplacer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// Prefixes is the strings that are removed
	// from the target strings.
	// This uses https://pkg.go.dev/strings#TrimPrefix
	Prefixes      []string `protobuf:"bytes,1,rep,name=Prefixes,json=prefixes,proto3" json:"Prefixes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrimPrefixReplacer) Reset() {
	*x = TrimPrefixReplacer{}
	mi := &file_kernel_txtutil_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrimPrefixReplacer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrimPrefixReplacer) ProtoMessage() {}

func (x *TrimPrefixReplacer) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_txtutil_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrimPrefixReplacer.ProtoReflect.Descriptor instead.
func (*TrimPrefixReplacer) Descriptor() ([]byte, []int) {
	return file_kernel_txtutil_proto_rawDescGZIP(), []int{9}
}

func (x *TrimPrefixReplacer) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

type TrimSuffixReplacer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// Suffixes is the strings that are removed
	// from the target strings.
	// This uses https://pkg.go.dev/strings#TrimSuffix
	Suffixes      []string `protobuf:"bytes,1,rep,name=Suffixes,json=suffixes,proto3" json:"Suffixes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrimSuffixReplacer) Reset() {
	*x = TrimSuffixReplacer{}
	mi := &file_kernel_txtutil_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrimSuffixReplacer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrimSuffixReplacer) ProtoMessage() {}

func (x *TrimSuffixReplacer) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_txtutil_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrimSuffixReplacer.ProtoReflect.Descriptor instead.
func (*TrimSuffixReplacer) Descriptor() ([]byte, []int) {
	return file_kernel_txtutil_proto_rawDescGZIP(), []int{10}
}

func (x *TrimSuffixReplacer) GetSuffixes() []string {
	if x != nil {
		return x.Suffixes
	}
	return nil
}

type EncodeReplacer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// Pattern is the strings pattern that should be replaced.
	// If not set or empty, the entire value is considered to be matched.
	// Default is not set.
	Pattern string `protobuf:"bytes,1,opt,name=Pattern,json=pattern,proto3" json:"Pattern,omitempty"`
	// [OPTIONAL]
	// POSIX is the flag to use POSIX regular expression.
	// See https://pkg.go.dev/regexp#CompilePOSIX
	// Default is false.
	POSIX bool `protobuf:"varint,2,opt,name=POSIX,json=posix,proto3" json:"POSIX,omitempty"`
	// [REQUIRED]
	// Encoding is the types of encoding to encode the matched values.
	Encoding      EncodingType `protobuf:"varint,3,opt,name=Encoding,json=encoding,proto3,enum=kernel.EncodingType" json:"Encoding,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncodeReplacer) Reset() {
	*x = EncodeReplacer{}
	mi := &file_kernel_txtutil_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodeReplacer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeReplacer) ProtoMessage() {}

func (x *EncodeReplacer) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_txtutil_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeReplacer.ProtoReflect.Descriptor instead.
func (*EncodeReplacer) Descriptor() ([]byte, []int) {
	return file_kernel_txtutil_proto_rawDescGZIP(), []int{11}
}

func (x *EncodeReplacer) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *EncodeReplacer) GetPOSIX() bool {
	if x != nil {
		return x.POSIX
	}
	return false
}

func (x *EncodeReplacer) GetEncoding() EncodingType {
	if x != nil {
		return x.Encoding
	}
	return EncodingType_EncodingTypeUnknown
}

type HashReplacer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// Pattern is the strings pattern that should be replaced.
	// If not set or empty, the entire value is considered to be matched.
	// Default is not set.
	Pattern string `protobuf:"bytes,1,opt,name=Pattern,json=pattern,proto3" json:"Pattern,omitempty"`
	// [OPTIONAL]
	// POSIX is the flag to use POSIX regular expression.
	// See https://pkg.go.dev/regexp#CompilePOSIX
	// Default is false.
	POSIX bool `protobuf:"varint,2,opt,name=POSIX,json=posix,proto3" json:"POSIX,omitempty"`
	// [REQUIRED]
	// Alg is the hash algorithm to hash the matched values.
	Alg HashAlg `protobuf:"varint,3,opt,name=Alg,json=alg,proto3,enum=kernel.HashAlg" json:"Alg,omitempty"`
	// [REQUIRED]
	// Encoding is the types of encoding to encode the hash values.
	Encoding      EncodingType `protobuf:"varint,4,opt,name=Encoding,json=encoding,proto3,enum=kernel.EncodingType" json:"Encoding,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HashReplacer) Reset() {
	*x = HashReplacer{}
	mi := &file_kernel_txtutil_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HashReplacer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashReplacer) ProtoMessage() {}

func (x *HashReplacer) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_txtutil_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashReplacer.ProtoReflect.Descriptor instead.
func (*HashReplacer) Descriptor() ([]byte, []int) {
	return file_kernel_txtutil_proto_rawDescGZIP(), []int{12}
}

func (x *HashReplacer) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *HashReplacer) GetPOSIX() bool {
	if x != nil {
		return x.POSIX
	}
	return false
}

func (x *HashReplacer) GetAlg() HashAlg {
	if x != nil {
		return x.Alg
	}
	return HashAlg_HashAlgUnknown
}

func (x *HashReplacer) GetEncoding() EncodingType {
	if x != nil {
		return x.Encoding
	}
	return EncodingType_EncodingTypeUnknown
}

type RegexpReplacer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [REQUIRED]
	// Pattern is the strings pattern that should be replaced.
	Pattern string `protobuf:"bytes,1,opt,name=Pattern,json=pattern,proto3" json:"Pattern,omitempty"`
	// [OPTIONAL]
	// Replace is the replace pattern.
	// Default is not set.
	Replace string `protobuf:"bytes,2,opt,name=Replace,json=replace,proto3" json:"Replace,omitempty"`
	// [OPTIONAL]
	// POSIX is the flag to use POSIX regular expression.
	// See https://pkg.go.dev/regexp#CompilePOSIX
	POSIX bool `protobuf:"varint,3,opt,name=POSIX,json=posix,proto3" json:"POSIX,omitempty"`
	// [OPTIONAL]
	// Literal is the flag to use the replace value as literal value.
	// See https://pkg.go.dev/regexp#Regexp.ReplaceAllLiteral
	Literal       bool `protobuf:"varint,4,opt,name=Literal,json=literal,proto3" json:"Literal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegexpReplacer) Reset() {
	*x = RegexpReplacer{}
	mi := &file_kernel_txtutil_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegexpReplacer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegexpReplacer) ProtoMessage() {}

func (x *RegexpReplacer) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_txtutil_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegexpReplacer.ProtoReflect.Descriptor instead.
func (*RegexpReplacer) Descriptor() ([]byte, []int) {
	return file_kernel_txtutil_proto_rawDescGZIP(), []int{13}
}

func (x *RegexpReplacer) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *RegexpReplacer) GetReplace() string {
	if x != nil {
		return x.Replace
	}
	return ""
}

func (x *RegexpReplacer) GetPOSIX() bool {
	if x != nil {
		return x.POSIX
	}
	return false
}

func (x *RegexpReplacer) GetLiteral() bool {
	if x != nil {
		return x.Literal
	}
	return false
}

type ExpandReplacer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [REQUIRED]
	// Pattern is the strings pattern that should be replaced.
	Pattern string `protobuf:"bytes,1,opt,name=Pattern,json=pattern,proto3" json:"Pattern,omitempty"`
	// [OPTIONAL]
	// Replace is the replace pattern.
	// Default is not set.
	Template string `protobuf:"bytes,2,opt,name=Template,json=template,proto3" json:"Template,omitempty"`
	// [OPTIONAL]
	// POSIX is the flag to use POSIX regular expression.
	// See https://pkg.go.dev/regexp#CompilePOSIX
	POSIX         bool `protobuf:"varint,3,opt,name=POSIX,json=posix,proto3" json:"POSIX,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExpandReplacer) Reset() {
	*x = ExpandReplacer{}
	mi := &file_kernel_txtutil_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpandReplacer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandReplacer) ProtoMessage() {}

func (x *ExpandReplacer) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_txtutil_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandReplacer.ProtoReflect.Descriptor instead.
func (*ExpandReplacer) Descriptor() ([]byte, []int) {
	return file_kernel_txtutil_proto_rawDescGZIP(), []int{14}
}

func (x *ExpandReplacer) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *ExpandReplacer) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *ExpandReplacer) GetPOSIX() bool {
	if x != nil {
		return x.POSIX
	}
	return false
}

type EncryptReplacer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// Pattern is the strings pattern that should be replaced.
	// If not set or empty, the entire value is considered to be matched.
	// Default is not set.
	Pattern string `protobuf:"bytes,1,opt,name=Pattern,json=pattern,proto3" json:"Pattern,omitempty"`
	// [OPTIONAL]
	// POSIX is the flag to use POSIX regular expression.
	// See https://pkg.go.dev/regexp#CompilePOSIX
	// Default is false.
	POSIX bool `protobuf:"varint,2,opt,name=POSIX,json=posix,proto3" json:"POSIX,omitempty"`
	// [REQUIRED]
	// Alg is the common key encryption algorithm.
	Alg CommonKeyCryptType `protobuf:"varint,3,opt,name=Alg,json=alg,proto3,enum=kernel.CommonKeyCryptType" json:"Alg,omitempty"`
	// [REQUIRED]
	// Encoding is the types of encoding to encode the hash values.
	Encoding EncodingType `protobuf:"varint,4,opt,name=Encoding,json=encoding,proto3,enum=kernel.EncodingType" json:"Encoding,omitempty"`
	// [REQUIRED]
	// Password is the hex encoded password string
	// for the common key encryption.
	// Password length must be the valid length corresponding to the algorithm.
	// 16,24,32 bytes for AES, 8 bytes for DES, 24 bytes for 3DES, 1-256 bytes for RC4.
	// Default is not set.
	Password      string `protobuf:"bytes,5,opt,name=Password,json=password,proto3" json:"Password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncryptReplacer) Reset() {
	*x = EncryptReplacer{}
	mi := &file_kernel_txtutil_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptReplacer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptReplacer) ProtoMessage() {}

func (x *EncryptReplacer) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_txtutil_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptReplacer.ProtoReflect.Descriptor instead.
func (*EncryptReplacer) Descriptor() ([]byte, []int) {
	return file_kernel_txtutil_proto_rawDescGZIP(), []int{15}
}

func (x *EncryptReplacer) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *EncryptReplacer) GetPOSIX() bool {
	if x != nil {
		return x.POSIX
	}
	return false
}

func (x *EncryptReplacer) GetAlg() CommonKeyCryptType {
	if x != nil {
		return x.Alg
	}
	return CommonKeyCryptType_CommonKeyCryptTypeUnknown
}

func (x *EncryptReplacer) GetEncoding() EncodingType {
	if x != nil {
		return x.Encoding
	}
	return EncodingType_EncodingTypeUnknown
}

func (x *EncryptReplacer) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type HMACReplacer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// Pattern is the strings pattern that should be replaced.
	// If not set or empty, the entire value is considered to be matched.
	// Default is not set.
	Pattern string `protobuf:"bytes,1,opt,name=Pattern,json=pattern,proto3" json:"Pattern,omitempty"`
	// [OPTIONAL]
	// POSIX is the flag to use POSIX regular expression.
	// See https://pkg.go.dev/regexp#CompilePOSIX
	// Default is false.
	POSIX bool `protobuf:"varint,2,opt,name=POSIX,json=posix,proto3" json:"POSIX,omitempty"`
	// [REQUIRED]
	// Alg is the hash algorithm to hash the matched values.
	Alg HashAlg `protobuf:"varint,3,opt,name=Alg,json=alg,proto3,enum=kernel.HashAlg" json:"Alg,omitempty"`
	// [REQUIRED]
	// Encoding is the types of encoding to encode the hash values.
	Encoding EncodingType `protobuf:"varint,4,opt,name=Encoding,json=encoding,proto3,enum=kernel.EncodingType" json:"Encoding,omitempty"`
	// [REQUIRED]
	// Key is the hex encoded key string for HMAC.
	// Default is not set.
	Key           string `protobuf:"bytes,5,opt,name=Key,json=key,proto3" json:"Key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HMACReplacer) Reset() {
	*x = HMACReplacer{}
	mi := &file_kernel_txtutil_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HMACReplacer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HMACReplacer) ProtoMessage() {}

func (x *HMACReplacer) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_txtutil_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HMACReplacer.ProtoReflect.Descriptor instead.
func (*HMACReplacer) Descriptor() ([]byte, []int) {
	return file_kernel_txtutil_proto_rawDescGZIP(), []int{16}
}

func (x *HMACReplacer) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *HMACReplacer) GetPOSIX() bool {
	if x != nil {
		return x.POSIX
	}
	return false
}

func (x *HMACReplacer) GetAlg() HashAlg {
	if x != nil {
		return x.Alg
	}
	return HashAlg_HashAlgUnknown
}

func (x *HMACReplacer) GetEncoding() EncodingType {
	if x != nil {
		return x.Encoding
	}
	return EncodingType_EncodingTypeUnknown
}

func (x *HMACReplacer) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

var File_kernel_txtutil_proto protoreflect.FileDescriptor

var file_kernel_txtutil_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x74, 0x78, 0x74, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x1a, 0x1b,
	0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x64, 0x0a, 0x0b, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92,
	0x01, 0x02, 0x18, 0x01, 0x52, 0x08, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x2f,
	0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x92, 0x06, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x2d, 0x0a, 0x05, 0x46, 0x69, 0x78, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x12,
	0x2d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a,
	0x0a, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x2e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x54, 0x72, 0x69,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x2e, 0x54, 0x72, 0x69, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x72, 0x69, 0x6d, 0x12, 0x36, 0x0a, 0x08, 0x54, 0x72, 0x69, 0x6d, 0x4c, 0x65, 0x66,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x2e, 0x54, 0x72, 0x69, 0x6d, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x69, 0x6d, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x39, 0x0a,
	0x09, 0x54, 0x72, 0x69, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x54, 0x72, 0x69, 0x6d, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x74,
	0x72, 0x69, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x54, 0x72, 0x69, 0x6d,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x54, 0x72, 0x69, 0x6d, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x72, 0x69, 0x6d,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x3c, 0x0a, 0x0a, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x2e, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x72, 0x69, 0x6d, 0x53, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x12, 0x30, 0x0a, 0x06, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x30, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x70, 0x12, 0x30, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06,
	0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x48,
	0x4d, 0x41, 0x43, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x2e, 0x48, 0x4d, 0x41, 0x43, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x04, 0x68, 0x6d, 0x61, 0x63, 0x42, 0x0b, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x72, 0x73, 0x22, 0x25, 0x0a, 0x0d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x0d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x12, 0x39, 0x0a,
	0x06, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6d,
	0x54, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x0c, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x68, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22,
	0x3b, 0x0a, 0x0d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x68, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x28, 0x0a, 0x0c,
	0x54, 0x72, 0x69, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x75, 0x74, 0x53, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x75, 0x74, 0x53, 0x65, 0x74, 0x73, 0x22, 0x2c, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x6d, 0x4c, 0x65,
	0x66, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x75,
	0x74, 0x53, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x74,
	0x53, 0x65, 0x74, 0x73, 0x22, 0x2d, 0x0a, 0x11, 0x54, 0x72, 0x69, 0x6d, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x75, 0x74,
	0x53, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x74, 0x53,
	0x65, 0x74, 0x73, 0x22, 0x30, 0x0a, 0x12, 0x54, 0x72, 0x69, 0x6d, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x30, 0x0a, 0x12, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x4f, 0x53, 0x49, 0x58, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x69, 0x78, 0x12, 0x38, 0x0a, 0x08, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x22, 0xa3, 0x01, 0x0a, 0x0c, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x4f, 0x53, 0x49, 0x58, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70,
	0x6f, 0x73, 0x69, 0x78, 0x12, 0x29, 0x0a, 0x03, 0x41, 0x6c, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x41,
	0x6c, 0x67, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x03, 0x61, 0x6c, 0x67, 0x12,
	0x38, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x7d, 0x0a, 0x0e, 0x52, 0x65, 0x67,
	0x65, 0x78, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x07, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x4f, 0x53, 0x49,
	0x58, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x69, 0x78, 0x12, 0x18,
	0x0a, 0x07, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x22, 0x65, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x07, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x4f, 0x53,
	0x49, 0x58, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x69, 0x78, 0x22,
	0xd5, 0x01, 0x0a, 0x0f, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x50, 0x4f, 0x53, 0x49, 0x58, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70, 0x6f,
	0x73, 0x69, 0x78, 0x12, 0x34, 0x0a, 0x03, 0x41, 0x6c, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x43, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x03, 0x61, 0x6c, 0x67, 0x12, 0x38, 0x0a, 0x08, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x0c, 0x48, 0x4d, 0x41, 0x43,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x4f, 0x53, 0x49, 0x58, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x69, 0x78, 0x12, 0x29, 0x0a, 0x03, 0x41, 0x6c, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x03,
	0x61, 0x6c, 0x67, 0x12, 0x38, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a,
	0x03, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x2a, 0x6f, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x78, 0x61, 0x63, 0x74, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x10, 0x05, 0x12, 0x09, 0x0a,
	0x05, 0x52, 0x65, 0x67, 0x65, 0x78, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x50, 0x4f, 0x53, 0x49, 0x58, 0x10, 0x07, 0x2a, 0xc4, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x72, 0x69, 0x6d, 0x10, 0x04, 0x12, 0x0c, 0x0a,
	0x08, 0x54, 0x72, 0x69, 0x6d, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x72, 0x69, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x72,
	0x69, 0x6d, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x72,
	0x69, 0x6d, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x10, 0x0a,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4d, 0x41, 0x43, 0x10, 0x0e, 0x2a,
	0x30, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x6f, 0x54,
	0x65, 0x78, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x6f, 0x48, 0x54, 0x4d, 0x4c, 0x10,
	0x02, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x69, 0x6c, 0x65, 0x72, 0x6f, 0x6e, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f,
	0x61, 0x69, 0x6c, 0x65, 0x72, 0x6f, 0x6e, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_kernel_txtutil_proto_rawDescOnce sync.Once
	file_kernel_txtutil_proto_rawDescData = file_kernel_txtutil_proto_rawDesc
)

func file_kernel_txtutil_proto_rawDescGZIP() []byte {
	file_kernel_txtutil_proto_rawDescOnce.Do(func() {
		file_kernel_txtutil_proto_rawDescData = protoimpl.X.CompressGZIP(file_kernel_txtutil_proto_rawDescData)
	})
	return file_kernel_txtutil_proto_rawDescData
}

var file_kernel_txtutil_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_kernel_txtutil_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_kernel_txtutil_proto_goTypes = []any{
	(MatchType)(0),             // 0: kernel.MatchType
	(ReplaceType)(0),           // 1: kernel.ReplaceType
	(TemplateType)(0),          // 2: kernel.TemplateType
	(*MatcherSpec)(nil),        // 3: kernel.MatcherSpec
	(*ReplacerSpec)(nil),       // 4: kernel.ReplacerSpec
	(*FixedReplacer)(nil),      // 5: kernel.FixedReplacer
	(*ValueReplacer)(nil),      // 6: kernel.ValueReplacer
	(*LeftReplacer)(nil),       // 7: kernel.LeftReplacer
	(*RightReplacer)(nil),      // 8: kernel.RightReplacer
	(*TrimReplacer)(nil),       // 9: kernel.TrimReplacer
	(*TrimLeftReplacer)(nil),   // 10: kernel.TrimLeftReplacer
	(*TrimRightReplacer)(nil),  // 11: kernel.TrimRightReplacer
	(*TrimPrefixReplacer)(nil), // 12: kernel.TrimPrefixReplacer
	(*TrimSuffixReplacer)(nil), // 13: kernel.TrimSuffixReplacer
	(*EncodeReplacer)(nil),     // 14: kernel.EncodeReplacer
	(*HashReplacer)(nil),       // 15: kernel.HashReplacer
	(*RegexpReplacer)(nil),     // 16: kernel.RegexpReplacer
	(*ExpandReplacer)(nil),     // 17: kernel.ExpandReplacer
	(*EncryptReplacer)(nil),    // 18: kernel.EncryptReplacer
	(*HMACReplacer)(nil),       // 19: kernel.HMACReplacer
	nil,                        // 20: kernel.ValueReplacer.FromToEntry
	(EncodingType)(0),          // 21: kernel.EncodingType
	(HashAlg)(0),               // 22: kernel.HashAlg
	(CommonKeyCryptType)(0),    // 23: kernel.CommonKeyCryptType
}
var file_kernel_txtutil_proto_depIdxs = []int32{
	0,  // 0: kernel.MatcherSpec.MatchType:type_name -> kernel.MatchType
	5,  // 1: kernel.ReplacerSpec.Fixed:type_name -> kernel.FixedReplacer
	6,  // 2: kernel.ReplacerSpec.Value:type_name -> kernel.ValueReplacer
	7,  // 3: kernel.ReplacerSpec.Left:type_name -> kernel.LeftReplacer
	8,  // 4: kernel.ReplacerSpec.Right:type_name -> kernel.RightReplacer
	9,  // 5: kernel.ReplacerSpec.Trim:type_name -> kernel.TrimReplacer
	10, // 6: kernel.ReplacerSpec.TrimLeft:type_name -> kernel.TrimLeftReplacer
	11, // 7: kernel.ReplacerSpec.TrimRight:type_name -> kernel.TrimRightReplacer
	12, // 8: kernel.ReplacerSpec.TrimPrefix:type_name -> kernel.TrimPrefixReplacer
	13, // 9: kernel.ReplacerSpec.TrimSuffix:type_name -> kernel.TrimSuffixReplacer
	14, // 10: kernel.ReplacerSpec.Encode:type_name -> kernel.EncodeReplacer
	15, // 11: kernel.ReplacerSpec.Hash:type_name -> kernel.HashReplacer
	16, // 12: kernel.ReplacerSpec.Regexp:type_name -> kernel.RegexpReplacer
	17, // 13: kernel.ReplacerSpec.Expand:type_name -> kernel.ExpandReplacer
	18, // 14: kernel.ReplacerSpec.Encrypt:type_name -> kernel.EncryptReplacer
	19, // 15: kernel.ReplacerSpec.HMAC:type_name -> kernel.HMACReplacer
	20, // 16: kernel.ValueReplacer.FromTo:type_name -> kernel.ValueReplacer.FromToEntry
	21, // 17: kernel.EncodeReplacer.Encoding:type_name -> kernel.EncodingType
	22, // 18: kernel.HashReplacer.Alg:type_name -> kernel.HashAlg
	21, // 19: kernel.HashReplacer.Encoding:type_name -> kernel.EncodingType
	23, // 20: kernel.EncryptReplacer.Alg:type_name -> kernel.CommonKeyCryptType
	21, // 21: kernel.EncryptReplacer.Encoding:type_name -> kernel.EncodingType
	22, // 22: kernel.HMACReplacer.Alg:type_name -> kernel.HashAlg
	21, // 23: kernel.HMACReplacer.Encoding:type_name -> kernel.EncodingType
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_kernel_txtutil_proto_init() }
func file_kernel_txtutil_proto_init() {
	if File_kernel_txtutil_proto != nil {
		return
	}
	file_kernel_encoding_proto_init()
	file_kernel_hash_proto_init()
	file_kernel_crypt_proto_init()
	file_kernel_txtutil_proto_msgTypes[1].OneofWrappers = []any{
		(*ReplacerSpec_Fixed)(nil),
		(*ReplacerSpec_Value)(nil),
		(*ReplacerSpec_Left)(nil),
		(*ReplacerSpec_Right)(nil),
		(*ReplacerSpec_Trim)(nil),
		(*ReplacerSpec_TrimLeft)(nil),
		(*ReplacerSpec_TrimRight)(nil),
		(*ReplacerSpec_TrimPrefix)(nil),
		(*ReplacerSpec_TrimSuffix)(nil),
		(*ReplacerSpec_Encode)(nil),
		(*ReplacerSpec_Hash)(nil),
		(*ReplacerSpec_Regexp)(nil),
		(*ReplacerSpec_Expand)(nil),
		(*ReplacerSpec_Encrypt)(nil),
		(*ReplacerSpec_HMAC)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kernel_txtutil_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kernel_txtutil_proto_goTypes,
		DependencyIndexes: file_kernel_txtutil_proto_depIdxs,
		EnumInfos:         file_kernel_txtutil_proto_enumTypes,
		MessageInfos:      file_kernel_txtutil_proto_msgTypes,
	}.Build()
	File_kernel_txtutil_proto = out.File
	file_kernel_txtutil_proto_rawDesc = nil
	file_kernel_txtutil_proto_goTypes = nil
	file_kernel_txtutil_proto_depIdxs = nil
}
