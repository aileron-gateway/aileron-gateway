// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.0
// source: core/v1/errhandler.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kernel "github.com/aileron-gateway/aileron-gateway/apis/kernel"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ErrorHandler is the definition of the ErrorHandler object.
// ErrorHandler implements interface of error handler.
type ErrorHandler struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [REQUIRED]
	// APIVersion is the defined version of the error handler.
	// This value must be "core/v1".
	APIVersion string `protobuf:"bytes,1,opt,name=APIVersion,json=apiVersion,proto3" json:"APIVersion,omitempty"`
	// [REQUIRED]
	// Kind is the kind of this object.
	// This value must be "ErrorHandler".
	Kind string `protobuf:"bytes,2,opt,name=Kind,json=kind,proto3" json:"Kind,omitempty"`
	// [OPTIONAL]
	// Metadata is the metadata of the error handler object.
	// If not set, both name and namespace in the metadata
	// are treated as "default".
	Metadata *kernel.Metadata `protobuf:"bytes,3,opt,name=Metadata,json=metadata,proto3" json:"Metadata,omitempty"`
	// [OPTIONAL]
	// Spec is the specification of the error handler .
	// Default values are used when nothing is set.
	Spec          *ErrorHandlerSpec `protobuf:"bytes,4,opt,name=Spec,json=spec,proto3" json:"Spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorHandler) Reset() {
	*x = ErrorHandler{}
	mi := &file_core_v1_errhandler_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorHandler) ProtoMessage() {}

func (x *ErrorHandler) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_errhandler_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorHandler.ProtoReflect.Descriptor instead.
func (*ErrorHandler) Descriptor() ([]byte, []int) {
	return file_core_v1_errhandler_proto_rawDescGZIP(), []int{0}
}

func (x *ErrorHandler) GetAPIVersion() string {
	if x != nil {
		return x.APIVersion
	}
	return ""
}

func (x *ErrorHandler) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ErrorHandler) GetMetadata() *kernel.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ErrorHandler) GetSpec() *ErrorHandlerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// ErrorHandlerSpec is the specifications for the ErrorHandler object.
type ErrorHandlerSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// StackAlways is the flag to output stacktrace to the logger.
	// If set to true, this error handler output stacktrace
	// even when handling client side error, or 400-499 status error.
	// Default is [false].
	StackAlways bool `protobuf:"varint,1,opt,name=StackAlways,json=stackAlways,proto3" json:"StackAlways,omitempty"`
	// [OPTIONAL]
	// ErrorMessages is the list of custom error messages to overwrite.
	// Default is not set.
	ErrorMessages []*ErrorMessageSpec `protobuf:"bytes,2,rep,name=ErrorMessages,json=errorMessages,proto3" json:"ErrorMessages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorHandlerSpec) Reset() {
	*x = ErrorHandlerSpec{}
	mi := &file_core_v1_errhandler_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorHandlerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorHandlerSpec) ProtoMessage() {}

func (x *ErrorHandlerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_errhandler_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorHandlerSpec.ProtoReflect.Descriptor instead.
func (*ErrorHandlerSpec) Descriptor() ([]byte, []int) {
	return file_core_v1_errhandler_proto_rawDescGZIP(), []int{1}
}

func (x *ErrorHandlerSpec) GetStackAlways() bool {
	if x != nil {
		return x.StackAlways
	}
	return false
}

func (x *ErrorHandlerSpec) GetErrorMessages() []*ErrorMessageSpec {
	if x != nil {
		return x.ErrorMessages
	}
	return nil
}

// ErrorMessageSpec is the specification of HTTP error response.
type ErrorMessageSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// Codes are the list of error code patterns to match this message.
	// String is evaluated by the path match.
	// For example, "E123*" or "E12*".
	// See https://pkg.go.dev/path#Match for for available expressions.
	// If an error matched to one of the Codes, Kinds or Message patterns
	// then the response is overwritten by the MIMEContents.
	// Default is not set.
	Codes []string `protobuf:"bytes,2,rep,name=Codes,json=codes,proto3" json:"Codes,omitempty"`
	// [OPTIONAL]
	// Kinds are the list of error kind patterns to match this message.
	// String is evaluated by the path match.
	// See https://pkg.go.dev/path#Match for for available expressions.
	// If an error matched to one of the Codes, Kinds or Message patterns
	// then the response is overwritten by the MIMEContents.
	// Default is not set.
	Kinds []string `protobuf:"bytes,3,rep,name=Kinds,json=kinds,proto3" json:"Kinds,omitempty"`
	// [OPTIONAL]
	// Messages are the list of error message pattarns to match this message.
	// String is evaluated by the regular expression.
	// See https://pkg.go.dev/regexp and https://github.com/google/re2/wiki/Syntax
	// for available expressions.
	// If an error matched to one of the Codes, Kinds or Message patterns
	// then the response is overwritten by the MIMEContents.
	// Default is not set.
	Messages []string `protobuf:"bytes,4,rep,name=Messages,json=messages,proto3" json:"Messages,omitempty"`
	// [OPTIONAL]
	// HeaderTemplate is the key-value pairs of HTTP headers
	// to add to the error response.
	// Unlike headers that can set in MIMEContents field,
	// values can be written in template.
	// HTTP status code `{{status}}` and status text `{{statusText}}`,
	// error code and kind `{{code}}`, `{{kind}}` can be used in the value.
	// Header names cannot be in template format.
	// This field is mainly intended to set error redirecting headers.
	// Default is not set.
	HeaderTemplate map[string]string `protobuf:"bytes,5,rep,name=HeaderTemplate,json=headerTemplate,proto3" json:"HeaderTemplate,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// [OPTIONAL]
	// MIMEContents is the list of mime content to be used for overwriting the error response.
	// If an error matched to one of the Codes, Kinds or Message patterns
	// then the response is overwritten by one of the MIMEContents.
	// Responses are not overwritten if this field has no content.
	// The first one is used when the Accept header did not matched to any content.
	// Default is not set.
	MIMEContents  []*MIMEContentSpec `protobuf:"bytes,6,rep,name=MIMEContents,json=mimeContents,proto3" json:"MIMEContents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorMessageSpec) Reset() {
	*x = ErrorMessageSpec{}
	mi := &file_core_v1_errhandler_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorMessageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorMessageSpec) ProtoMessage() {}

func (x *ErrorMessageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_errhandler_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorMessageSpec.ProtoReflect.Descriptor instead.
func (*ErrorMessageSpec) Descriptor() ([]byte, []int) {
	return file_core_v1_errhandler_proto_rawDescGZIP(), []int{2}
}

func (x *ErrorMessageSpec) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

func (x *ErrorMessageSpec) GetKinds() []string {
	if x != nil {
		return x.Kinds
	}
	return nil
}

func (x *ErrorMessageSpec) GetMessages() []string {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ErrorMessageSpec) GetHeaderTemplate() map[string]string {
	if x != nil {
		return x.HeaderTemplate
	}
	return nil
}

func (x *ErrorMessageSpec) GetMIMEContents() []*MIMEContentSpec {
	if x != nil {
		return x.MIMEContents
	}
	return nil
}

var File_core_v1_errhandler_proto protoreflect.FileDescriptor

const file_core_v1_errhandler_proto_rawDesc = "" +
	"\n" +
	"\x18core/v1/errhandler.proto\x12\acore.v1\x1a\x1bbuf/validate/validate.proto\x1a\x16core/v1/template.proto\x1a\x15kernel/resource.proto\"\xc4\x01\n" +
	"\fErrorHandler\x12.\n" +
	"\n" +
	"APIVersion\x18\x01 \x01(\tB\x0e\xbaH\vr\t\n" +
	"\acore/v1R\n" +
	"apiVersion\x12'\n" +
	"\x04Kind\x18\x02 \x01(\tB\x13\xbaH\x10r\x0e\n" +
	"\fErrorHandlerR\x04kind\x12,\n" +
	"\bMetadata\x18\x03 \x01(\v2\x10.kernel.MetadataR\bmetadata\x12-\n" +
	"\x04Spec\x18\x04 \x01(\v2\x19.core.v1.ErrorHandlerSpecR\x04spec\"u\n" +
	"\x10ErrorHandlerSpec\x12 \n" +
	"\vStackAlways\x18\x01 \x01(\bR\vstackAlways\x12?\n" +
	"\rErrorMessages\x18\x02 \x03(\v2\x19.core.v1.ErrorMessageSpecR\rerrorMessages\"\xe2\x02\n" +
	"\x10ErrorMessageSpec\x12$\n" +
	"\x05Codes\x18\x02 \x03(\tB\x0e\xbaH\v\x92\x01\b\x18\x01\"\x04r\x02\x10\x01R\x05codes\x12$\n" +
	"\x05Kinds\x18\x03 \x03(\tB\x0e\xbaH\v\x92\x01\b\x18\x01\"\x04r\x02\x10\x01R\x05kinds\x12*\n" +
	"\bMessages\x18\x04 \x03(\tB\x0e\xbaH\v\x92\x01\b\x18\x01\"\x04r\x02\x10\x01R\bmessages\x12U\n" +
	"\x0eHeaderTemplate\x18\x05 \x03(\v2-.core.v1.ErrorMessageSpec.HeaderTemplateEntryR\x0eheaderTemplate\x12<\n" +
	"\fMIMEContents\x18\x06 \x03(\v2\x18.core.v1.MIMEContentSpecR\fmimeContents\x1aA\n" +
	"\x13HeaderTemplateEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B9Z7github.com/aileron-gateway/aileron-gateway/apis/core/v1b\x06proto3"

var (
	file_core_v1_errhandler_proto_rawDescOnce sync.Once
	file_core_v1_errhandler_proto_rawDescData []byte
)

func file_core_v1_errhandler_proto_rawDescGZIP() []byte {
	file_core_v1_errhandler_proto_rawDescOnce.Do(func() {
		file_core_v1_errhandler_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_core_v1_errhandler_proto_rawDesc), len(file_core_v1_errhandler_proto_rawDesc)))
	})
	return file_core_v1_errhandler_proto_rawDescData
}

var file_core_v1_errhandler_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_core_v1_errhandler_proto_goTypes = []any{
	(*ErrorHandler)(nil),     // 0: core.v1.ErrorHandler
	(*ErrorHandlerSpec)(nil), // 1: core.v1.ErrorHandlerSpec
	(*ErrorMessageSpec)(nil), // 2: core.v1.ErrorMessageSpec
	nil,                      // 3: core.v1.ErrorMessageSpec.HeaderTemplateEntry
	(*kernel.Metadata)(nil),  // 4: kernel.Metadata
	(*MIMEContentSpec)(nil),  // 5: core.v1.MIMEContentSpec
}
var file_core_v1_errhandler_proto_depIdxs = []int32{
	4, // 0: core.v1.ErrorHandler.Metadata:type_name -> kernel.Metadata
	1, // 1: core.v1.ErrorHandler.Spec:type_name -> core.v1.ErrorHandlerSpec
	2, // 2: core.v1.ErrorHandlerSpec.ErrorMessages:type_name -> core.v1.ErrorMessageSpec
	3, // 3: core.v1.ErrorMessageSpec.HeaderTemplate:type_name -> core.v1.ErrorMessageSpec.HeaderTemplateEntry
	5, // 4: core.v1.ErrorMessageSpec.MIMEContents:type_name -> core.v1.MIMEContentSpec
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_core_v1_errhandler_proto_init() }
func file_core_v1_errhandler_proto_init() {
	if File_core_v1_errhandler_proto != nil {
		return
	}
	file_core_v1_template_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_core_v1_errhandler_proto_rawDesc), len(file_core_v1_errhandler_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_core_v1_errhandler_proto_goTypes,
		DependencyIndexes: file_core_v1_errhandler_proto_depIdxs,
		MessageInfos:      file_core_v1_errhandler_proto_msgTypes,
	}.Build()
	File_core_v1_errhandler_proto = out.File
	file_core_v1_errhandler_proto_goTypes = nil
	file_core_v1_errhandler_proto_depIdxs = nil
}
