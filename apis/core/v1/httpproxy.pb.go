// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.0
// source: core/v1/httpproxy.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kernel "github.com/aileron-gateway/aileron-gateway/apis/kernel"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LBAlgorithm is the load balance algorithm.
type LBAlgorithm int32

const (
	LBAlgorithm_RoundRobin LBAlgorithm = 0 // Round-robin algorithm.
	LBAlgorithm_Random     LBAlgorithm = 1 // Random algorithm.
	LBAlgorithm_RingHash   LBAlgorithm = 2 // RingHash algorithm.
	LBAlgorithm_Maglev     LBAlgorithm = 3 // Maglev algorithm.
	LBAlgorithm_DirectHash LBAlgorithm = 4 // DirectHash algorithm.
)

// Enum value maps for LBAlgorithm.
var (
	LBAlgorithm_name = map[int32]string{
		0: "RoundRobin",
		1: "Random",
		2: "RingHash",
		3: "Maglev",
		4: "DirectHash",
	}
	LBAlgorithm_value = map[string]int32{
		"RoundRobin": 0,
		"Random":     1,
		"RingHash":   2,
		"Maglev":     3,
		"DirectHash": 4,
	}
)

func (x LBAlgorithm) Enum() *LBAlgorithm {
	p := new(LBAlgorithm)
	*p = x
	return p
}

func (x LBAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LBAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_core_v1_httpproxy_proto_enumTypes[0].Descriptor()
}

func (LBAlgorithm) Type() protoreflect.EnumType {
	return &file_core_v1_httpproxy_proto_enumTypes[0]
}

func (x LBAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LBAlgorithm.Descriptor instead.
func (LBAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_core_v1_httpproxy_proto_rawDescGZIP(), []int{0}
}

// HashSource is the value source for calculating hash source.
type HTTPHasherSpec_HashSourceType int32

const (
	HTTPHasherSpec_ClientAddr HTTPHasherSpec_HashSourceType = 0 // ClientAddr uses client IP:Port.
	HTTPHasherSpec_Header     HTTPHasherSpec_HashSourceType = 1 // Header uses single HTTP header.
	HTTPHasherSpec_Cookie     HTTPHasherSpec_HashSourceType = 2 // Cookie uses cookie value.
	HTTPHasherSpec_Query      HTTPHasherSpec_HashSourceType = 3 // Query uses URL query parameter.
	HTTPHasherSpec_PathParam  HTTPHasherSpec_HashSourceType = 4 // PathParam uses path parameter.
)

// Enum value maps for HTTPHasherSpec_HashSourceType.
var (
	HTTPHasherSpec_HashSourceType_name = map[int32]string{
		0: "ClientAddr",
		1: "Header",
		2: "Cookie",
		3: "Query",
		4: "PathParam",
	}
	HTTPHasherSpec_HashSourceType_value = map[string]int32{
		"ClientAddr": 0,
		"Header":     1,
		"Cookie":     2,
		"Query":      3,
		"PathParam":  4,
	}
)

func (x HTTPHasherSpec_HashSourceType) Enum() *HTTPHasherSpec_HashSourceType {
	p := new(HTTPHasherSpec_HashSourceType)
	*p = x
	return p
}

func (x HTTPHasherSpec_HashSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTPHasherSpec_HashSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_core_v1_httpproxy_proto_enumTypes[1].Descriptor()
}

func (HTTPHasherSpec_HashSourceType) Type() protoreflect.EnumType {
	return &file_core_v1_httpproxy_proto_enumTypes[1]
}

func (x HTTPHasherSpec_HashSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTPHasherSpec_HashSourceType.Descriptor instead.
func (HTTPHasherSpec_HashSourceType) EnumDescriptor() ([]byte, []int) {
	return file_core_v1_httpproxy_proto_rawDescGZIP(), []int{6, 0}
}

// ReverseProxyHandler resource definition.
// apiVersion="core/v1", kind="ReverseProxyHandler".
type ReverseProxyHandler struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	APIVersion    string                   `protobuf:"bytes,1,opt,name=APIVersion,json=apiVersion,proto3" json:"APIVersion,omitempty"`
	Kind          string                   `protobuf:"bytes,2,opt,name=Kind,json=kind,proto3" json:"Kind,omitempty"`
	Metadata      *kernel.Metadata         `protobuf:"bytes,3,opt,name=Metadata,json=metadata,proto3" json:"Metadata,omitempty"`
	Spec          *ReverseProxyHandlerSpec `protobuf:"bytes,4,opt,name=Spec,json=spec,proto3" json:"Spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReverseProxyHandler) Reset() {
	*x = ReverseProxyHandler{}
	mi := &file_core_v1_httpproxy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReverseProxyHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseProxyHandler) ProtoMessage() {}

func (x *ReverseProxyHandler) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_httpproxy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseProxyHandler.ProtoReflect.Descriptor instead.
func (*ReverseProxyHandler) Descriptor() ([]byte, []int) {
	return file_core_v1_httpproxy_proto_rawDescGZIP(), []int{0}
}

func (x *ReverseProxyHandler) GetAPIVersion() string {
	if x != nil {
		return x.APIVersion
	}
	return ""
}

func (x *ReverseProxyHandler) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ReverseProxyHandler) GetMetadata() *kernel.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ReverseProxyHandler) GetSpec() *ReverseProxyHandlerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// ReverseProxyHandlerSpec is the specifications for the ReverseProxyHandler object.
type ReverseProxyHandlerSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// Patterns is path patterns that this handler is registered to a server.
	// Default is not set.
	Patterns []string `protobuf:"bytes,1,rep,name=Patterns,json=patterns,proto3" json:"Patterns,omitempty"`
	// [OPTIONAL]
	// Methods is the list of HTTP method this handler can handle.
	// Note that it depends on the multiplexer, or HTTP router
	// if this field can be used.
	// If not set, all methods are accepted.
	// Default is not set.
	Methods []HTTPMethod `protobuf:"varint,2,rep,packed,name=Methods,json=methods,proto3,enum=core.v1.HTTPMethod" json:"Methods,omitempty"`
	// [OPTIONAL]
	// Tripperwares is the list of references to Tripperwares  object.
	// Referred object must implement Tripperware interface.
	// Default is not set.
	Tripperwares []*kernel.Reference `protobuf:"bytes,3,rep,name=Tripperwares,json=tripperwares,proto3" json:"Tripperwares,omitempty"`
	// [OPTIONAL]
	// RoundTripper is the references to a roundTripper  object.
	// Referred object must implement RoundTripper interface.
	// Default roundTripper is used when not set.
	RoundTripper *kernel.Reference `protobuf:"bytes,4,opt,name=RoundTripper,json=roundTripper,proto3" json:"RoundTripper,omitempty"`
	// [OPTIONAL]
	// LoadBalancers is the list of load balancers.
	// Proxy upstreams are specified in this field.
	// Requests will be proxied to the first matched upstream
	// by matching with the load balancers defined order.
	// Default is not set.
	LoadBalancers []*LoadBalancerSpec `protobuf:"bytes,5,rep,name=LoadBalancers,json=loadBalancers,proto3" json:"LoadBalancers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReverseProxyHandlerSpec) Reset() {
	*x = ReverseProxyHandlerSpec{}
	mi := &file_core_v1_httpproxy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReverseProxyHandlerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseProxyHandlerSpec) ProtoMessage() {}

func (x *ReverseProxyHandlerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_httpproxy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseProxyHandlerSpec.ProtoReflect.Descriptor instead.
func (*ReverseProxyHandlerSpec) Descriptor() ([]byte, []int) {
	return file_core_v1_httpproxy_proto_rawDescGZIP(), []int{1}
}

func (x *ReverseProxyHandlerSpec) GetPatterns() []string {
	if x != nil {
		return x.Patterns
	}
	return nil
}

func (x *ReverseProxyHandlerSpec) GetMethods() []HTTPMethod {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *ReverseProxyHandlerSpec) GetTripperwares() []*kernel.Reference {
	if x != nil {
		return x.Tripperwares
	}
	return nil
}

func (x *ReverseProxyHandlerSpec) GetRoundTripper() *kernel.Reference {
	if x != nil {
		return x.RoundTripper
	}
	return nil
}

func (x *ReverseProxyHandlerSpec) GetLoadBalancers() []*LoadBalancerSpec {
	if x != nil {
		return x.LoadBalancers
	}
	return nil
}

// LoadBalancerSpec is the specification of LoadBalancer objects.
type LoadBalancerSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// LBAlgorithm specifies the load balancing algorithm.
	// Default RoundRobin will be used if not set.
	// Default is not set.
	LBAlgorithm LBAlgorithm `protobuf:"varint,1,opt,name=LBAlgorithm,json=lbAlgorithm,proto3,enum=core.v1.LBAlgorithm" json:"LBAlgorithm,omitempty"`
	// [REQUIRED]
	// Upstreams is the list of upstream server of proxy target.
	// An internal server error will be returned when no upstreams are defined.
	// Default is not set.
	Upstreams []*UpstreamSpec `protobuf:"bytes,2,rep,name=Upstreams,json=upstreams,proto3" json:"Upstreams,omitempty"`
	// [OPTIONAL]
	// PathMatcher is the path matching algorithm to be used.
	// If need multiple path matchers, use PathMatchers field instead.
	// If both PathMatcher and PathMatchers are set, the PathMatcher
	// is appended as the first matcher of PathMatchers.
	// If both PathMatcher and PathMatchers are not set,
	// HTTP error responses are returned to all requests.
	// Default is not set.
	PathMatcher *PathMatcherSpec `protobuf:"bytes,3,opt,name=PathMatcher,json=pathMatcher,proto3" json:"PathMatcher,omitempty"`
	// [OPTIONAL]
	// PathMatchers is the list of path matching algorithm to be used.
	// A prefix matcher with "/" prefix will be used which matches all
	// requests if not set.
	// If need only 1 path matcher, PathMatcher field can be used instead.
	// If both PathMatcher and PathMatchers are set, the PathMatcher
	// is appended as the first matcher of PathMatchers.
	// HTTP error responses are returned to all requests.
	// Matchers are OR condition and the first matched one is used.
	// Default is not set.
	PathMatchers []*PathMatcherSpec `protobuf:"bytes,4,rep,name=PathMatchers,json=pathMatchers,proto3" json:"PathMatchers,omitempty"`
	// [OPTIONAL]
	// Methods is the list of HTTP method this loadbalancer can accept.
	// If not set, all methods are accepted.
	// Default is not set.
	Methods []HTTPMethod `protobuf:"varint,5,rep,packed,name=Methods,json=methods,proto3,enum=core.v1.HTTPMethod" json:"Methods,omitempty"`
	// [OPTIONAL]
	// Hosts is the list of hosts to allow.
	// If not set, all hosts are allowed.
	// List all host names because the value are matched by exact matching algorithm.
	// Wildcard characters such as "*" are not available.
	// Default is not set.
	Hosts []string `protobuf:"bytes,6,rep,name=Hosts,json=hosts,proto3" json:"Hosts,omitempty"`
	// [OPTIONAL]
	// PathParamMatcher is the path parameter value matcher to check
	// if this loadbalancer can accept the target request.
	// Path parameter is only available when the handler was registered
	// to a server with patterns containing path parameters
	// described at https://pkg.go.dev/net/http#hdr-Patterns.
	// Listed matchers are evaluated by AND condition.
	// If OR matching condition is necessary, set the condition within a single matcher.
	// Default is not set.
	PathParamMatchers []*ParamMatcherSpec `protobuf:"bytes,7,rep,name=PathParamMatchers,json=pathParamMatchers,proto3" json:"PathParamMatchers,omitempty"`
	// [OPTIONAL]
	// HeaderMatcher is the header value matcher to check
	// if this loadbalancer can accept the target request.
	// If multiple header values were found, they are joined
	// with a comma "," and aggregated to a singled string.
	// For example ["foo", "bar"] will be "foo,bar" and the matcher
	// is applied to the joined value "foo,bar".
	// Listed matchers are evaluated by AND condition.
	// If OR matching condition is necessary, set the condition within a single matcher.
	// Default is not set.
	HeaderMatchers []*ParamMatcherSpec `protobuf:"bytes,8,rep,name=HeaderMatchers,json=headerMatchers,proto3" json:"HeaderMatchers,omitempty"`
	// [OPTIONAL]
	// QueryMatcher is the URL query value matcher to check
	// this loadbalancer can accept the target request.
	// If multiple query values were found, they are joined
	// with a comma "," and aggregated to a singled string.
	// For example ["foo", "bar"] will be "foo,bar" and the matcher
	// is applied to the joined value "foo,bar".
	// Listed matchers are evaluated by AND condition.
	// If OR matching condition is necessary, set the condition within a single matcher.
	// Default is not set.
	QueryMatchers []*ParamMatcherSpec `protobuf:"bytes,9,rep,name=QueryMatchers,json=queryMatchers,proto3" json:"QueryMatchers,omitempty"`
	// [OPTIONAL]
	// Hasher is the hashing methods for hash-based load balancers.
	// Default is not set.
	Hasher        *HTTPHasherSpec `protobuf:"bytes,10,opt,name=Hasher,json=hasher,proto3" json:"Hasher,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoadBalancerSpec) Reset() {
	*x = LoadBalancerSpec{}
	mi := &file_core_v1_httpproxy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadBalancerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerSpec) ProtoMessage() {}

func (x *LoadBalancerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_httpproxy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerSpec.ProtoReflect.Descriptor instead.
func (*LoadBalancerSpec) Descriptor() ([]byte, []int) {
	return file_core_v1_httpproxy_proto_rawDescGZIP(), []int{2}
}

func (x *LoadBalancerSpec) GetLBAlgorithm() LBAlgorithm {
	if x != nil {
		return x.LBAlgorithm
	}
	return LBAlgorithm_RoundRobin
}

func (x *LoadBalancerSpec) GetUpstreams() []*UpstreamSpec {
	if x != nil {
		return x.Upstreams
	}
	return nil
}

func (x *LoadBalancerSpec) GetPathMatcher() *PathMatcherSpec {
	if x != nil {
		return x.PathMatcher
	}
	return nil
}

func (x *LoadBalancerSpec) GetPathMatchers() []*PathMatcherSpec {
	if x != nil {
		return x.PathMatchers
	}
	return nil
}

func (x *LoadBalancerSpec) GetMethods() []HTTPMethod {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *LoadBalancerSpec) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *LoadBalancerSpec) GetPathParamMatchers() []*ParamMatcherSpec {
	if x != nil {
		return x.PathParamMatchers
	}
	return nil
}

func (x *LoadBalancerSpec) GetHeaderMatchers() []*ParamMatcherSpec {
	if x != nil {
		return x.HeaderMatchers
	}
	return nil
}

func (x *LoadBalancerSpec) GetQueryMatchers() []*ParamMatcherSpec {
	if x != nil {
		return x.QueryMatchers
	}
	return nil
}

func (x *LoadBalancerSpec) GetHasher() *HTTPHasherSpec {
	if x != nil {
		return x.Hasher
	}
	return nil
}

// PathMatcherSpec is the specification of PathMatcher object
// used for path matching of incoming HTTP requests.
type PathMatcherSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// Match is the url path pattern to be matched to this matcher.
	// The grammar of the pattern depends on the MatchType.
	// This pattern should not contain prefix set by TrimPrefix or AppendPrefix.
	// Currently, only 1 prefix string can be set here.
	// Use Regex or RegexPOSIX match type and ser Rewrite field
	// if you need trim multiple prefix.
	// It can also trim or rewrite specific patterns.
	// Default is not set.
	Match string `protobuf:"bytes,1,opt,name=Match,json=match,proto3" json:"Match,omitempty"`
	// [OPTIONAL]
	// MatchType is the type of pattern matching algorithm.
	// The path pattern specified at the Match field should follow the
	// grammar of this match type.
	// Default is [Prefix].
	MatchType kernel.MatchType `protobuf:"varint,2,opt,name=MatchType,json=matchType,proto3,enum=kernel.MatchType" json:"MatchType,omitempty"`
	// [OPTIONAL]
	// Rewrite is the path rewrite expression.
	// This field is used when the MatchType is Regex or RegexPOSIX.
	// Checkout https://pkg.go.dev/regexp#Regexp.ExpandString
	// Default is not set.
	Rewrite string `protobuf:"bytes,3,opt,name=Rewrite,json=rewrite,proto3" json:"Rewrite,omitempty"`
	// [OPTIONAL]
	// TrimPrefix is the prefix string to be removed from the URL path.
	// For example, "/trim/me", "/prefix", "/api".
	// This prefix is removed before checking the match.
	// So the Match filed should not contain this value.
	// Default is not set.
	TrimPrefix string `protobuf:"bytes,4,opt,name=TrimPrefix,json=trimPrefix,proto3" json:"TrimPrefix,omitempty"`
	// [OPTIONAL]
	// AppendPrefix is the prefix string to be added to the URL path.
	// For example, "/append/me", "/prefix", "/api".
	// This prefix is added after checking the match.
	// So the Match filed should not contain this value.
	// Default is not set.
	AppendPrefix  string `protobuf:"bytes,5,opt,name=AppendPrefix,json=appendPrefix,proto3" json:"AppendPrefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PathMatcherSpec) Reset() {
	*x = PathMatcherSpec{}
	mi := &file_core_v1_httpproxy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathMatcherSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathMatcherSpec) ProtoMessage() {}

func (x *PathMatcherSpec) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_httpproxy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathMatcherSpec.ProtoReflect.Descriptor instead.
func (*PathMatcherSpec) Descriptor() ([]byte, []int) {
	return file_core_v1_httpproxy_proto_rawDescGZIP(), []int{3}
}

func (x *PathMatcherSpec) GetMatch() string {
	if x != nil {
		return x.Match
	}
	return ""
}

func (x *PathMatcherSpec) GetMatchType() kernel.MatchType {
	if x != nil {
		return x.MatchType
	}
	return kernel.MatchType(0)
}

func (x *PathMatcherSpec) GetRewrite() string {
	if x != nil {
		return x.Rewrite
	}
	return ""
}

func (x *PathMatcherSpec) GetTrimPrefix() string {
	if x != nil {
		return x.TrimPrefix
	}
	return ""
}

func (x *PathMatcherSpec) GetAppendPrefix() string {
	if x != nil {
		return x.AppendPrefix
	}
	return ""
}

// ParamMatcherSpec is the specification of ParamMatcherParamMatcherSpec object
// used for header or query value matching.
type ParamMatcherSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [REQUIRED]
	// Key is the key name to check.
	// If the specified key were not found in header, query or path params,
	// this matcher fails without calling the match function specified at MatchType.
	// Default is not set.
	Key string `protobuf:"bytes,1,opt,name=Key,json=key,proto3" json:"Key,omitempty"`
	// [OPTIONAL]
	// Patterns is the value pattern list.
	// The grammar of the pattern depends on the MatchType.
	// Patterns are evaluated by OR condition.
	// It will be considered that at least 1 pattern matched to a target,
	// this matcher object returns true.
	// Default is not set, which means an empty string.
	Patterns []string `protobuf:"bytes,2,rep,name=Patterns,json=patterns,proto3" json:"Patterns,omitempty"`
	// [OPTIONAL]
	// MatchType is the type of pattern matching algorithm.
	// The pattern specified at the Pattern field should follow the
	// grammar of this match type.
	// Default is [Exact].
	MatchType     kernel.MatchType `protobuf:"varint,3,opt,name=MatchType,json=matchType,proto3,enum=kernel.MatchType" json:"MatchType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParamMatcherSpec) Reset() {
	*x = ParamMatcherSpec{}
	mi := &file_core_v1_httpproxy_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParamMatcherSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamMatcherSpec) ProtoMessage() {}

func (x *ParamMatcherSpec) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_httpproxy_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParamMatcherSpec.ProtoReflect.Descriptor instead.
func (*ParamMatcherSpec) Descriptor() ([]byte, []int) {
	return file_core_v1_httpproxy_proto_rawDescGZIP(), []int{4}
}

func (x *ParamMatcherSpec) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ParamMatcherSpec) GetPatterns() []string {
	if x != nil {
		return x.Patterns
	}
	return nil
}

func (x *ParamMatcherSpec) GetMatchType() kernel.MatchType {
	if x != nil {
		return x.MatchType
	}
	return kernel.MatchType(0)
}

// UpstreamSpec is the specification of Upstream object.
type UpstreamSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [REQUIRED]
	// URL is the base url for for proxy.
	// This field can contain URL path.
	// For example "http://localhost:8080/api/"
	// Default is not set.
	URL string `protobuf:"bytes,1,opt,name=URL,json=url,proto3" json:"URL,omitempty"`
	// [OPTIONAL]
	// Weight is the weight, or priority of this target.
	// Set -1 to disable this upstream.
	// 0 is the same as default value 1.
	// Default is [1].
	Weight int32 `protobuf:"varint,2,opt,name=Weight,json=weight,proto3" json:"Weight,omitempty"`
	// [OPTIONAL]
	// EnablePassive enables passive health check.
	// Default is [false].
	// NOTE: This field is not used for now.
	EnablePassive bool `protobuf:"varint,3,opt,name=EnablePassive,json=enablePassive,proto3" json:"EnablePassive,omitempty"`
	// [OPTIONAL]
	// EnableActive enables active health check.
	// Default is [false].
	// NOTE: This field is not used for now.
	EnableActive bool `protobuf:"varint,4,opt,name=EnableActive,json=enableActive,proto3" json:"EnableActive,omitempty"`
	// [OPTIONAL]
	// InitialDelay is the wait time in seconds until to start active health checking after starts.
	// Note that this field is used only when the active health checking is configured.
	// Default is [0].
	// NOTE: This field is not used for now.
	InitialDelay int32 `protobuf:"varint,7,opt,name=InitialDelay,json=initialDelay,proto3" json:"InitialDelay,omitempty"`
	// [OPTIONAL]
	// HealthCheckInterval is the interval of active health check in seconds.
	// Note that this field is used only when the active health checking is configured.
	// Default is [1].
	// NOTE: This field is not used for now.
	HealthCheckInterval int32 `protobuf:"varint,8,opt,name=HealthCheckInterval,json=healthCheckInterval,proto3" json:"HealthCheckInterval,omitempty"`
	// [OPTIONAL]
	// Address is the active health check target URL or address.
	// For example, specify a url "http://example.com/healthy" for HTTP network type
	// and "tcp://127.0.0.1:8080" for TCP.
	// Default is not set.
	// NOTE: This field is not used for now.
	HealthCheckAddr string `protobuf:"bytes,9,opt,name=HealthCheckAddr,json=healthCheckAddr,proto3" json:"HealthCheckAddr,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpstreamSpec) Reset() {
	*x = UpstreamSpec{}
	mi := &file_core_v1_httpproxy_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpstreamSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamSpec) ProtoMessage() {}

func (x *UpstreamSpec) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_httpproxy_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamSpec.ProtoReflect.Descriptor instead.
func (*UpstreamSpec) Descriptor() ([]byte, []int) {
	return file_core_v1_httpproxy_proto_rawDescGZIP(), []int{5}
}

func (x *UpstreamSpec) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *UpstreamSpec) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *UpstreamSpec) GetEnablePassive() bool {
	if x != nil {
		return x.EnablePassive
	}
	return false
}

func (x *UpstreamSpec) GetEnableActive() bool {
	if x != nil {
		return x.EnableActive
	}
	return false
}

func (x *UpstreamSpec) GetInitialDelay() int32 {
	if x != nil {
		return x.InitialDelay
	}
	return 0
}

func (x *UpstreamSpec) GetHealthCheckInterval() int32 {
	if x != nil {
		return x.HealthCheckInterval
	}
	return 0
}

func (x *UpstreamSpec) GetHealthCheckAddr() string {
	if x != nil {
		return x.HealthCheckAddr
	}
	return ""
}

// HTTPHasherSpec is the specifications for hasher
// that calculate hashes from http requests.
type HTTPHasherSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [OPTIONAL]
	// HashSource is the source for calculating hash value.
	// This field is used by hash-based load balancers.
	// Non hash-based load balancers ignore this field.
	// Default is ["ClientAddr"].
	HashSource HTTPHasherSpec_HashSourceType `protobuf:"varint,1,opt,name=HashSource,json=hashSource,proto3,enum=core.v1.HTTPHasherSpec_HashSourceType" json:"HashSource,omitempty"`
	// [OPTIONAL]
	// Key is the data source key.
	// This is the header name for Header source type,
	// query parameter name for Query
	// and path parameter name for PathParam.
	// ClientAddr and MultiHeader hasher ignore this field.
	// Default is not set.
	Key           string `protobuf:"bytes,2,opt,name=Key,json=key,proto3" json:"Key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPHasherSpec) Reset() {
	*x = HTTPHasherSpec{}
	mi := &file_core_v1_httpproxy_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPHasherSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPHasherSpec) ProtoMessage() {}

func (x *HTTPHasherSpec) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_httpproxy_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPHasherSpec.ProtoReflect.Descriptor instead.
func (*HTTPHasherSpec) Descriptor() ([]byte, []int) {
	return file_core_v1_httpproxy_proto_rawDescGZIP(), []int{6}
}

func (x *HTTPHasherSpec) GetHashSource() HTTPHasherSpec_HashSourceType {
	if x != nil {
		return x.HashSource
	}
	return HTTPHasherSpec_ClientAddr
}

func (x *HTTPHasherSpec) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

var File_core_v1_httpproxy_proto protoreflect.FileDescriptor

var file_core_v1_httpproxy_proto_rawDesc = string([]byte{
	0x0a, 0x17, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xad, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x04, 0x53, 0x70,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x22, 0xa7, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x08,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x08, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02,
	0x18, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x54,
	0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x77, 0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x77, 0x61, 0x72,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x4c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0d, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x73, 0x22, 0xd0, 0x04, 0x0a, 0x10, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x36, 0x0a, 0x0b, 0x4c, 0x42, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x42, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x0b, 0x6c, 0x62, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x33, 0x0a, 0x09, 0x55, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x09, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x0b,
	0x50, 0x61, 0x74, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x70, 0x61, 0x74,
	0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0c, 0x50, 0x61, 0x74, 0x68,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12,
	0x1e, 0x0a, 0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12,
	0x47, 0x0a, 0x11, 0x50, 0x61, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x11, 0x70, 0x61, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0d, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x06,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x61, 0x73, 0x68, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x72, 0x22, 0xb6, 0x01,
	0x0a, 0x0f, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2f, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x69, 0x6d, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x69, 0x6d, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x7a, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x03, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x73, 0x12, 0x2f, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x0c, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x2d, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x32, 0x14, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x7c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x29, 0x2e, 0x2a, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x14, 0xba, 0x48, 0x11, 0x1a, 0x0f, 0x18, 0xff, 0xff, 0x03, 0x28, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x30,
	0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x28, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41,
	0x64, 0x64, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x22, 0xbe, 0x01, 0x0a, 0x0e, 0x48,
	0x54, 0x54, 0x50, 0x48, 0x61, 0x73, 0x68, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x46, 0x0a,
	0x0a, 0x48, 0x61, 0x73, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x52, 0x0a, 0x0e, 0x48, 0x61, 0x73, 0x68, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x61, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x10, 0x04, 0x2a, 0x53, 0x0a, 0x0b, 0x4c,
	0x42, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x69, 0x6e, 0x67, 0x48, 0x61,
	0x73, 0x68, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x67, 0x6c, 0x65, 0x76, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x10, 0x04,
	0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x69, 0x6c, 0x65, 0x72, 0x6f, 0x6e, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61,
	0x69, 0x6c, 0x65, 0x72, 0x6f, 0x6e, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_core_v1_httpproxy_proto_rawDescOnce sync.Once
	file_core_v1_httpproxy_proto_rawDescData []byte
)

func file_core_v1_httpproxy_proto_rawDescGZIP() []byte {
	file_core_v1_httpproxy_proto_rawDescOnce.Do(func() {
		file_core_v1_httpproxy_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_core_v1_httpproxy_proto_rawDesc), len(file_core_v1_httpproxy_proto_rawDesc)))
	})
	return file_core_v1_httpproxy_proto_rawDescData
}

var file_core_v1_httpproxy_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_core_v1_httpproxy_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_core_v1_httpproxy_proto_goTypes = []any{
	(LBAlgorithm)(0),                   // 0: core.v1.LBAlgorithm
	(HTTPHasherSpec_HashSourceType)(0), // 1: core.v1.HTTPHasherSpec.HashSourceType
	(*ReverseProxyHandler)(nil),        // 2: core.v1.ReverseProxyHandler
	(*ReverseProxyHandlerSpec)(nil),    // 3: core.v1.ReverseProxyHandlerSpec
	(*LoadBalancerSpec)(nil),           // 4: core.v1.LoadBalancerSpec
	(*PathMatcherSpec)(nil),            // 5: core.v1.PathMatcherSpec
	(*ParamMatcherSpec)(nil),           // 6: core.v1.ParamMatcherSpec
	(*UpstreamSpec)(nil),               // 7: core.v1.UpstreamSpec
	(*HTTPHasherSpec)(nil),             // 8: core.v1.HTTPHasherSpec
	(*kernel.Metadata)(nil),            // 9: kernel.Metadata
	(HTTPMethod)(0),                    // 10: core.v1.HTTPMethod
	(*kernel.Reference)(nil),           // 11: kernel.Reference
	(kernel.MatchType)(0),              // 12: kernel.MatchType
}
var file_core_v1_httpproxy_proto_depIdxs = []int32{
	9,  // 0: core.v1.ReverseProxyHandler.Metadata:type_name -> kernel.Metadata
	3,  // 1: core.v1.ReverseProxyHandler.Spec:type_name -> core.v1.ReverseProxyHandlerSpec
	10, // 2: core.v1.ReverseProxyHandlerSpec.Methods:type_name -> core.v1.HTTPMethod
	11, // 3: core.v1.ReverseProxyHandlerSpec.Tripperwares:type_name -> kernel.Reference
	11, // 4: core.v1.ReverseProxyHandlerSpec.RoundTripper:type_name -> kernel.Reference
	4,  // 5: core.v1.ReverseProxyHandlerSpec.LoadBalancers:type_name -> core.v1.LoadBalancerSpec
	0,  // 6: core.v1.LoadBalancerSpec.LBAlgorithm:type_name -> core.v1.LBAlgorithm
	7,  // 7: core.v1.LoadBalancerSpec.Upstreams:type_name -> core.v1.UpstreamSpec
	5,  // 8: core.v1.LoadBalancerSpec.PathMatcher:type_name -> core.v1.PathMatcherSpec
	5,  // 9: core.v1.LoadBalancerSpec.PathMatchers:type_name -> core.v1.PathMatcherSpec
	10, // 10: core.v1.LoadBalancerSpec.Methods:type_name -> core.v1.HTTPMethod
	6,  // 11: core.v1.LoadBalancerSpec.PathParamMatchers:type_name -> core.v1.ParamMatcherSpec
	6,  // 12: core.v1.LoadBalancerSpec.HeaderMatchers:type_name -> core.v1.ParamMatcherSpec
	6,  // 13: core.v1.LoadBalancerSpec.QueryMatchers:type_name -> core.v1.ParamMatcherSpec
	8,  // 14: core.v1.LoadBalancerSpec.Hasher:type_name -> core.v1.HTTPHasherSpec
	12, // 15: core.v1.PathMatcherSpec.MatchType:type_name -> kernel.MatchType
	12, // 16: core.v1.ParamMatcherSpec.MatchType:type_name -> kernel.MatchType
	1,  // 17: core.v1.HTTPHasherSpec.HashSource:type_name -> core.v1.HTTPHasherSpec.HashSourceType
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_core_v1_httpproxy_proto_init() }
func file_core_v1_httpproxy_proto_init() {
	if File_core_v1_httpproxy_proto != nil {
		return
	}
	file_core_v1_http_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_core_v1_httpproxy_proto_rawDesc), len(file_core_v1_httpproxy_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_core_v1_httpproxy_proto_goTypes,
		DependencyIndexes: file_core_v1_httpproxy_proto_depIdxs,
		EnumInfos:         file_core_v1_httpproxy_proto_enumTypes,
		MessageInfos:      file_core_v1_httpproxy_proto_msgTypes,
	}.Build()
	File_core_v1_httpproxy_proto = out.File
	file_core_v1_httpproxy_proto_goTypes = nil
	file_core_v1_httpproxy_proto_depIdxs = nil
}
